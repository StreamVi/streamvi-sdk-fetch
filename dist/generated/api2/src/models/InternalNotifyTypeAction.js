"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalNotifyTypeActionToJSONTyped = exports.InternalNotifyTypeActionToJSON = exports.InternalNotifyTypeActionFromJSONTyped = exports.InternalNotifyTypeActionFromJSON = exports.instanceOfInternalNotifyTypeAction = exports.InternalNotifyTypeActionGroupTypeEnum = exports.InternalNotifyTypeActionTypeEnum = exports.InternalNotifyTypeActionNameEnum = void 0;
const InternalNotifyTypeActionText_1 = require("./InternalNotifyTypeActionText");
/**
 * @export
 */
exports.InternalNotifyTypeActionNameEnum = {
    ExternalLink: 'external_link',
    CabinetLink: 'cabinet_link',
    LandingLink: 'landing_link',
    Link: 'link',
    Accept: 'accept',
    Decline: 'decline',
    Accept1: 'accept_1',
    Accept2: 'accept_2',
    Accept3: 'accept_3'
};
/**
 * @export
 */
exports.InternalNotifyTypeActionTypeEnum = {
    Primary: 'primary',
    Secondary: 'secondary',
    Link: 'link'
};
/**
 * @export
 */
exports.InternalNotifyTypeActionGroupTypeEnum = {
    Toggle: 'toggle',
    Select: 'select',
    Default: 'default'
};
/**
 * Check if a given object implements the InternalNotifyTypeAction interface.
 */
function instanceOfInternalNotifyTypeAction(value) {
    if (!('name' in value) || value['name'] === undefined)
        return false;
    if (!('value' in value) || value['value'] === undefined)
        return false;
    if (!('type' in value) || value['type'] === undefined)
        return false;
    if (!('text' in value) || value['text'] === undefined)
        return false;
    if (!('icon' in value) || value['icon'] === undefined)
        return false;
    if (!('groupId' in value) || value['groupId'] === undefined)
        return false;
    if (!('groupType' in value) || value['groupType'] === undefined)
        return false;
    return true;
}
exports.instanceOfInternalNotifyTypeAction = instanceOfInternalNotifyTypeAction;
function InternalNotifyTypeActionFromJSON(json) {
    return InternalNotifyTypeActionFromJSONTyped(json, false);
}
exports.InternalNotifyTypeActionFromJSON = InternalNotifyTypeActionFromJSON;
function InternalNotifyTypeActionFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'name': json['name'],
        'value': json['value'],
        'type': json['type'],
        'text': (json['text'].map(InternalNotifyTypeActionText_1.InternalNotifyTypeActionTextFromJSON)),
        'icon': json['icon'],
        'groupId': json['group_id'],
        'groupType': json['group_type'],
    };
}
exports.InternalNotifyTypeActionFromJSONTyped = InternalNotifyTypeActionFromJSONTyped;
function InternalNotifyTypeActionToJSON(json) {
    return InternalNotifyTypeActionToJSONTyped(json, false);
}
exports.InternalNotifyTypeActionToJSON = InternalNotifyTypeActionToJSON;
function InternalNotifyTypeActionToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'name': value['name'],
        'value': value['value'],
        'type': value['type'],
        'text': (value['text'].map(InternalNotifyTypeActionText_1.InternalNotifyTypeActionTextToJSON)),
        'icon': value['icon'],
        'group_id': value['groupId'],
        'group_type': value['groupType'],
    };
}
exports.InternalNotifyTypeActionToJSONTyped = InternalNotifyTypeActionToJSONTyped;
