"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlogPageSiteResponseToJSONTyped = exports.BlogPageSiteResponseToJSON = exports.BlogPageSiteResponseFromJSONTyped = exports.BlogPageSiteResponseFromJSON = exports.instanceOfBlogPageSiteResponse = exports.BlogPageSiteResponseAltLanguagesEnum = exports.BlogPageSiteResponseLanguageIsoEnum = exports.BlogPageSiteResponseLanguageEnum = exports.BlogPageSiteResponseStatusEnum = void 0;
const BlogPageSiteResponseId_1 = require("./BlogPageSiteResponseId");
/**
 * @export
 */
exports.BlogPageSiteResponseStatusEnum = {
    None: 'None',
    Backlog: 'Backlog',
    Drafting: 'Drafting',
    Reviewing: 'Reviewing',
    Done: 'Done',
    Published: 'Published'
};
/**
 * @export
 */
exports.BlogPageSiteResponseLanguageEnum = {
    Russian: 'russian',
    English: 'english',
    None: 'none'
};
/**
 * @export
 */
exports.BlogPageSiteResponseLanguageIsoEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.BlogPageSiteResponseAltLanguagesEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * Check if a given object implements the BlogPageSiteResponse interface.
 */
function instanceOfBlogPageSiteResponse(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('url' in value) || value['url'] === undefined)
        return false;
    if (!('status' in value) || value['status'] === undefined)
        return false;
    if (!('dateUpdate' in value) || value['dateUpdate'] === undefined)
        return false;
    if (!('datePublish' in value) || value['datePublish'] === undefined)
        return false;
    if (!('tags' in value) || value['tags'] === undefined)
        return false;
    if (!('language' in value) || value['language'] === undefined)
        return false;
    if (!('languageIso' in value) || value['languageIso'] === undefined)
        return false;
    if (!('title' in value) || value['title'] === undefined)
        return false;
    if (!('image' in value) || value['image'] === undefined)
        return false;
    if (!('shortText' in value) || value['shortText'] === undefined)
        return false;
    if (!('text' in value) || value['text'] === undefined)
        return false;
    if (!('altLanguages' in value) || value['altLanguages'] === undefined)
        return false;
    return true;
}
exports.instanceOfBlogPageSiteResponse = instanceOfBlogPageSiteResponse;
function BlogPageSiteResponseFromJSON(json) {
    return BlogPageSiteResponseFromJSONTyped(json, false);
}
exports.BlogPageSiteResponseFromJSON = BlogPageSiteResponseFromJSON;
function BlogPageSiteResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': (0, BlogPageSiteResponseId_1.BlogPageSiteResponseIdFromJSON)(json['_id']),
        'url': json['url'],
        'status': json['status'],
        'dateUpdate': (new Date(json['date_update'])),
        'datePublish': (new Date(json['date_publish'])),
        'tags': json['tags'],
        'language': json['language'],
        'languageIso': json['language_iso'],
        'title': json['title'],
        'image': json['image'],
        'shortText': json['short_text'],
        'text': json['text'],
        'altLanguages': json['alt_languages'],
    };
}
exports.BlogPageSiteResponseFromJSONTyped = BlogPageSiteResponseFromJSONTyped;
function BlogPageSiteResponseToJSON(json) {
    return BlogPageSiteResponseToJSONTyped(json, false);
}
exports.BlogPageSiteResponseToJSON = BlogPageSiteResponseToJSON;
function BlogPageSiteResponseToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        '_id': (0, BlogPageSiteResponseId_1.BlogPageSiteResponseIdToJSON)(value['id']),
        'url': value['url'],
        'status': value['status'],
        'date_update': ((value['dateUpdate']).toISOString()),
        'date_publish': ((value['datePublish']).toISOString()),
        'tags': value['tags'],
        'language': value['language'],
        'language_iso': value['languageIso'],
        'title': value['title'],
        'image': value['image'],
        'short_text': value['shortText'],
        'text': value['text'],
        'alt_languages': value['altLanguages'],
    };
}
exports.BlogPageSiteResponseToJSONTyped = BlogPageSiteResponseToJSONTyped;
