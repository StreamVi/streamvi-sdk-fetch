"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotifyHistorySiteResponseToJSONTyped = exports.NotifyHistorySiteResponseToJSON = exports.NotifyHistorySiteResponseFromJSONTyped = exports.NotifyHistorySiteResponseFromJSON = exports.instanceOfNotifyHistorySiteResponse = exports.NotifyHistorySiteResponseCategoryEnum = exports.NotifyHistorySiteResponseChannelEnum = void 0;
const InternalNotifyTypeText_1 = require("./InternalNotifyTypeText");
/**
 * @export
 */
exports.NotifyHistorySiteResponseChannelEnum = {
    Telegram: 'telegram',
    Cabinet: 'cabinet',
    Mobile: 'mobile'
};
/**
 * @export
 */
exports.NotifyHistorySiteResponseCategoryEnum = {
    Important: 'important',
    Stream: 'stream'
};
/**
 * Check if a given object implements the NotifyHistorySiteResponse interface.
 */
function instanceOfNotifyHistorySiteResponse(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('projectId' in value) || value['projectId'] === undefined)
        return false;
    if (!('dateCreate' in value) || value['dateCreate'] === undefined)
        return false;
    if (!('actions' in value) || value['actions'] === undefined)
        return false;
    if (!('channel' in value) || value['channel'] === undefined)
        return false;
    if (!('text' in value) || value['text'] === undefined)
        return false;
    if (!('statusRead' in value) || value['statusRead'] === undefined)
        return false;
    if (!('category' in value) || value['category'] === undefined)
        return false;
    return true;
}
exports.instanceOfNotifyHistorySiteResponse = instanceOfNotifyHistorySiteResponse;
function NotifyHistorySiteResponseFromJSON(json) {
    return NotifyHistorySiteResponseFromJSONTyped(json, false);
}
exports.NotifyHistorySiteResponseFromJSON = NotifyHistorySiteResponseFromJSON;
function NotifyHistorySiteResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'projectId': json['project_id'],
        'dateCreate': (new Date(json['date_create'])),
        'actions': json['actions'],
        'channel': json['channel'],
        'text': (json['text'].map(InternalNotifyTypeText_1.InternalNotifyTypeTextFromJSON)),
        'statusRead': json['status_read'],
        'category': json['category'],
    };
}
exports.NotifyHistorySiteResponseFromJSONTyped = NotifyHistorySiteResponseFromJSONTyped;
function NotifyHistorySiteResponseToJSON(json) {
    return NotifyHistorySiteResponseToJSONTyped(json, false);
}
exports.NotifyHistorySiteResponseToJSON = NotifyHistorySiteResponseToJSON;
function NotifyHistorySiteResponseToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'id': value['id'],
        'project_id': value['projectId'],
        'date_create': ((value['dateCreate']).toISOString()),
        'actions': value['actions'],
        'channel': value['channel'],
        'text': (value['text'].map(InternalNotifyTypeText_1.InternalNotifyTypeTextToJSON)),
        'status_read': value['statusRead'],
        'category': value['category'],
    };
}
exports.NotifyHistorySiteResponseToJSONTyped = NotifyHistorySiteResponseToJSONTyped;
