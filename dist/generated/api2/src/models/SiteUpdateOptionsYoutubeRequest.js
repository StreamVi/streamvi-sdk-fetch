"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SiteUpdateOptionsYoutubeRequestToJSONTyped = exports.SiteUpdateOptionsYoutubeRequestToJSON = exports.SiteUpdateOptionsYoutubeRequestFromJSONTyped = exports.SiteUpdateOptionsYoutubeRequestFromJSON = exports.instanceOfSiteUpdateOptionsYoutubeRequest = exports.SiteUpdateOptionsYoutubeRequestLangEnum = exports.SiteUpdateOptionsYoutubeRequestPrivacyVideoEnum = exports.SiteUpdateOptionsYoutubeRequestLatencyEnum = exports.SiteUpdateOptionsYoutubeRequestAudienceEnum = exports.SiteUpdateOptionsYoutubeRequestLanguageEnum = exports.SiteUpdateOptionsYoutubeRequestVEnum = void 0;
/**
 * @export
 */
exports.SiteUpdateOptionsYoutubeRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteUpdateOptionsYoutubeRequestLanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.SiteUpdateOptionsYoutubeRequestAudienceEnum = {
    mark_for_kids: 'mark_for_kids',
    mark_for_nokids: 'mark_for_nokids'
};
/**
 * @export
 */
exports.SiteUpdateOptionsYoutubeRequestLatencyEnum = {
    normal: 'normal',
    low: 'low',
    ultraLow: 'ultraLow'
};
/**
 * @export
 */
exports.SiteUpdateOptionsYoutubeRequestPrivacyVideoEnum = {
    private: 'private',
    public: 'public',
    unlisted: 'unlisted'
};
/**
 * @export
 */
exports.SiteUpdateOptionsYoutubeRequestLangEnum = {
    ru: 'ru',
    en: 'en'
};
/**
 * Check if a given object implements the SiteUpdateOptionsYoutubeRequest interface.
 */
function instanceOfSiteUpdateOptionsYoutubeRequest(value) {
    if (!('v' in value) || value['v'] === undefined)
        return false;
    if (!('language' in value) || value['language'] === undefined)
        return false;
    if (!('project_id' in value) || value['project_id'] === undefined)
        return false;
    if (!('channel_id' in value) || value['channel_id'] === undefined)
        return false;
    if (!('title' in value) || value['title'] === undefined)
        return false;
    if (!('description' in value) || value['description'] === undefined)
        return false;
    if (!('category_id' in value) || value['category_id'] === undefined)
        return false;
    if (!('category_name' in value) || value['category_name'] === undefined)
        return false;
    if (!('playlist_id' in value) || value['playlist_id'] === undefined)
        return false;
    if (!('audience' in value) || value['audience'] === undefined)
        return false;
    if (!('latency' in value) || value['latency'] === undefined)
        return false;
    if (!('privacy_video' in value) || value['privacy_video'] === undefined)
        return false;
    if (!('image' in value) || value['image'] === undefined)
        return false;
    if (!('lang' in value) || value['lang'] === undefined)
        return false;
    if (!('tags' in value) || value['tags'] === undefined)
        return false;
    return true;
}
exports.instanceOfSiteUpdateOptionsYoutubeRequest = instanceOfSiteUpdateOptionsYoutubeRequest;
function SiteUpdateOptionsYoutubeRequestFromJSON(json) {
    return SiteUpdateOptionsYoutubeRequestFromJSONTyped(json, false);
}
exports.SiteUpdateOptionsYoutubeRequestFromJSON = SiteUpdateOptionsYoutubeRequestFromJSON;
function SiteUpdateOptionsYoutubeRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'v': json['v'],
        'language': json['language'],
        'project_id': json['project_id'],
        'channel_id': json['channel_id'],
        'title': json['title'],
        'description': json['description'],
        'category_id': json['category_id'],
        'category_name': json['category_name'],
        'playlist_id': json['playlist_id'],
        'audience': json['audience'],
        'latency': json['latency'],
        'privacy_video': json['privacy_video'],
        'image': json['image'],
        'lang': json['lang'],
        'tags': new Set(json['tags']),
    };
}
exports.SiteUpdateOptionsYoutubeRequestFromJSONTyped = SiteUpdateOptionsYoutubeRequestFromJSONTyped;
function SiteUpdateOptionsYoutubeRequestToJSON(json) {
    return SiteUpdateOptionsYoutubeRequestToJSONTyped(json, false);
}
exports.SiteUpdateOptionsYoutubeRequestToJSON = SiteUpdateOptionsYoutubeRequestToJSON;
function SiteUpdateOptionsYoutubeRequestToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'v': value['v'],
        'language': value['language'],
        'project_id': value['project_id'],
        'channel_id': value['channel_id'],
        'title': value['title'],
        'description': value['description'],
        'category_id': value['category_id'],
        'category_name': value['category_name'],
        'playlist_id': value['playlist_id'],
        'audience': value['audience'],
        'latency': value['latency'],
        'privacy_video': value['privacy_video'],
        'image': value['image'],
        'lang': value['lang'],
        'tags': Array.from(value['tags']),
    };
}
exports.SiteUpdateOptionsYoutubeRequestToJSONTyped = SiteUpdateOptionsYoutubeRequestToJSONTyped;
