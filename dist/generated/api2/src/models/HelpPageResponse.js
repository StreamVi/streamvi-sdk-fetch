"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpPageResponseToJSONTyped = exports.HelpPageResponseToJSON = exports.HelpPageResponseFromJSONTyped = exports.HelpPageResponseFromJSON = exports.instanceOfHelpPageResponse = exports.HelpPageResponseAltLanguagesEnum = exports.HelpPageResponseLanguageIsoEnum = exports.HelpPageResponseLanguageEnum = exports.HelpPageResponseStatusEnum = void 0;
const BlogPageSiteResponseId_1 = require("./BlogPageSiteResponseId");
/**
 * @export
 */
exports.HelpPageResponseStatusEnum = {
    None: 'None',
    Backlog: 'Backlog',
    Drafting: 'Drafting',
    Reviewing: 'Reviewing',
    Done: 'Done',
    Published: 'Published'
};
/**
 * @export
 */
exports.HelpPageResponseLanguageEnum = {
    Russian: 'russian',
    English: 'english',
    None: 'none'
};
/**
 * @export
 */
exports.HelpPageResponseLanguageIsoEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.HelpPageResponseAltLanguagesEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * Check if a given object implements the HelpPageResponse interface.
 */
function instanceOfHelpPageResponse(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('url' in value) || value['url'] === undefined)
        return false;
    if (!('urlInherit' in value) || value['urlInherit'] === undefined)
        return false;
    if (!('notionParentId' in value) || value['notionParentId'] === undefined)
        return false;
    if (!('status' in value) || value['status'] === undefined)
        return false;
    if (!('dateUpdate' in value) || value['dateUpdate'] === undefined)
        return false;
    if (!('dateCreate' in value) || value['dateCreate'] === undefined)
        return false;
    if (!('icon' in value) || value['icon'] === undefined)
        return false;
    if (!('title' in value) || value['title'] === undefined)
        return false;
    if (!('language' in value) || value['language'] === undefined)
        return false;
    if (!('languageIso' in value) || value['languageIso'] === undefined)
        return false;
    if (!('text' in value) || value['text'] === undefined)
        return false;
    if (!('altLanguages' in value) || value['altLanguages'] === undefined)
        return false;
    return true;
}
exports.instanceOfHelpPageResponse = instanceOfHelpPageResponse;
function HelpPageResponseFromJSON(json) {
    return HelpPageResponseFromJSONTyped(json, false);
}
exports.HelpPageResponseFromJSON = HelpPageResponseFromJSON;
function HelpPageResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': (0, BlogPageSiteResponseId_1.BlogPageSiteResponseIdFromJSON)(json['_id']),
        'url': json['url'],
        'urlInherit': json['url_inherit'],
        'notionParentId': json['notion_parent_id'],
        'status': json['status'],
        'dateUpdate': (new Date(json['date_update'])),
        'dateCreate': (new Date(json['date_create'])),
        'icon': json['icon'],
        'title': json['title'],
        'language': json['language'],
        'languageIso': json['language_iso'],
        'text': json['text'],
        'altLanguages': json['alt_languages'],
    };
}
exports.HelpPageResponseFromJSONTyped = HelpPageResponseFromJSONTyped;
function HelpPageResponseToJSON(json) {
    return HelpPageResponseToJSONTyped(json, false);
}
exports.HelpPageResponseToJSON = HelpPageResponseToJSON;
function HelpPageResponseToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        '_id': (0, BlogPageSiteResponseId_1.BlogPageSiteResponseIdToJSON)(value['id']),
        'url': value['url'],
        'url_inherit': value['urlInherit'],
        'notion_parent_id': value['notionParentId'],
        'status': value['status'],
        'date_update': ((value['dateUpdate']).toISOString()),
        'date_create': ((value['dateCreate']).toISOString()),
        'icon': value['icon'],
        'title': value['title'],
        'language': value['language'],
        'language_iso': value['languageIso'],
        'text': value['text'],
        'alt_languages': value['altLanguages'],
    };
}
exports.HelpPageResponseToJSONTyped = HelpPageResponseToJSONTyped;
