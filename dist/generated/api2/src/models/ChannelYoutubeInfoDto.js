"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelYoutubeInfoDtoToJSONTyped = exports.ChannelYoutubeInfoDtoToJSON = exports.ChannelYoutubeInfoDtoFromJSONTyped = exports.ChannelYoutubeInfoDtoFromJSON = exports.instanceOfChannelYoutubeInfoDto = exports.ChannelYoutubeInfoDtoAudienceEnum = exports.ChannelYoutubeInfoDtoLatencyEnum = exports.ChannelYoutubeInfoDtoPrivacyVideoEnum = exports.ChannelYoutubeInfoDtoLangEnum = void 0;
const ChannelPlayListInfoDto_1 = require("./ChannelPlayListInfoDto");
const ChannelCategoryInfoDto_1 = require("./ChannelCategoryInfoDto");
/**
 * @export
 */
exports.ChannelYoutubeInfoDtoLangEnum = {
    Ru: 'ru',
    En: 'en'
};
/**
 * @export
 */
exports.ChannelYoutubeInfoDtoPrivacyVideoEnum = {
    Private: 'private',
    Public: 'public',
    Unlisted: 'unlisted'
};
/**
 * @export
 */
exports.ChannelYoutubeInfoDtoLatencyEnum = {
    Normal: 'normal',
    Low: 'low',
    UltraLow: 'ultraLow'
};
/**
 * @export
 */
exports.ChannelYoutubeInfoDtoAudienceEnum = {
    MarkForKids: 'mark_for_kids',
    MarkForNokids: 'mark_for_nokids'
};
/**
 * Check if a given object implements the ChannelYoutubeInfoDto interface.
 */
function instanceOfChannelYoutubeInfoDto(value) {
    if (!('title' in value) || value['title'] === undefined)
        return false;
    if (!('description' in value) || value['description'] === undefined)
        return false;
    return true;
}
exports.instanceOfChannelYoutubeInfoDto = instanceOfChannelYoutubeInfoDto;
function ChannelYoutubeInfoDtoFromJSON(json) {
    return ChannelYoutubeInfoDtoFromJSONTyped(json, false);
}
exports.ChannelYoutubeInfoDtoFromJSON = ChannelYoutubeInfoDtoFromJSON;
function ChannelYoutubeInfoDtoFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'title': json['title'],
        'description': json['description'],
        'lang': json['lang'] == null ? undefined : json['lang'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'category': json['category'] == null ? undefined : (0, ChannelCategoryInfoDto_1.ChannelCategoryInfoDtoFromJSON)(json['category']),
        'playlist': json['playlist'] == null ? undefined : (0, ChannelPlayListInfoDto_1.ChannelPlayListInfoDtoFromJSON)(json['playlist']),
        'privacyVideo': json['privacyVideo'] == null ? undefined : json['privacyVideo'],
        'latency': json['latency'] == null ? undefined : json['latency'],
        'audience': json['audience'] == null ? undefined : json['audience'],
        'image': json['image'] == null ? undefined : json['image'],
    };
}
exports.ChannelYoutubeInfoDtoFromJSONTyped = ChannelYoutubeInfoDtoFromJSONTyped;
function ChannelYoutubeInfoDtoToJSON(json) {
    return ChannelYoutubeInfoDtoToJSONTyped(json, false);
}
exports.ChannelYoutubeInfoDtoToJSON = ChannelYoutubeInfoDtoToJSON;
function ChannelYoutubeInfoDtoToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'title': value['title'],
        'description': value['description'],
        'lang': value['lang'],
        'tags': value['tags'],
        'category': (0, ChannelCategoryInfoDto_1.ChannelCategoryInfoDtoToJSON)(value['category']),
        'playlist': (0, ChannelPlayListInfoDto_1.ChannelPlayListInfoDtoToJSON)(value['playlist']),
        'privacyVideo': value['privacyVideo'],
        'latency': value['latency'],
        'audience': value['audience'],
        'image': value['image'],
    };
}
exports.ChannelYoutubeInfoDtoToJSONTyped = ChannelYoutubeInfoDtoToJSONTyped;
