"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramGetPostByFilterV1VEnum = exports.TelegramGetPostByFilterV1LanguageEnum = exports.ChannelSettingUpdateTokenV1VEnum = exports.ChannelSettingUpdateTokenV1RoleEnum = exports.ChannelSettingUpdateTokenV1LanguageEnum = exports.ChannelOptionsGetPlayListV1VEnum = exports.ChannelOptionsGetPlayListV1LanguageEnum = exports.ChannelOptionsGetPlannedV1VEnum = exports.ChannelOptionsGetPlannedV1LanguageEnum = exports.ChannelChatTelegramPostsV1VEnum = exports.ChannelChatTelegramPostsV1LanguageEnum = exports.ChannelChatSetTelegramSettingV1VEnum = exports.ChannelChatSetTelegramSettingV1LanguageEnum = exports.ChannelChatRemoveTelegramChatV1VEnum = exports.ChannelChatRemoveTelegramChatV1LanguageEnum = exports.ChannelChatInitTelegramChatConnectV1VEnum = exports.ChannelChatInitTelegramChatConnectV1LanguageEnum = exports.ChannelChatGetTelegramSettingV1VEnum = exports.ChannelChatGetTelegramSettingV1LanguageEnum = exports.ChannelSettingsApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class ChannelSettingsApi extends runtime.BaseAPI {
    /**
     * Get telegram settings
     */
    async channelChatGetTelegramSettingV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling channelChatGetTelegramSettingV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling channelChatGetTelegramSettingV1().');
        }
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError('channelId', 'Required parameter "channelId" was null or undefined when calling channelChatGetTelegramSettingV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['channelId'] != null) {
            queryParameters['channel_id'] = requestParameters['channelId'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_settings/chat/telegram/setting`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TelegramSettingsResponseDtoFromJSON)(jsonValue));
    }
    /**
     * Get telegram settings
     */
    async channelChatGetTelegramSettingV1(requestParameters, initOverrides) {
        const response = await this.channelChatGetTelegramSettingV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get code for connected chat
     */
    async channelChatInitTelegramChatConnectV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling channelChatInitTelegramChatConnectV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling channelChatInitTelegramChatConnectV1().');
        }
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError('channelId', 'Required parameter "channelId" was null or undefined when calling channelChatInitTelegramChatConnectV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['channelId'] != null) {
            queryParameters['channel_id'] = requestParameters['channelId'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_settings/chat/telegram/init`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TelegramInitConnectResponseDtoFromJSON)(jsonValue));
    }
    /**
     * Get code for connected chat
     */
    async channelChatInitTelegramChatConnectV1(requestParameters, initOverrides) {
        const response = await this.channelChatInitTelegramChatConnectV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Disconnect telegram chat
     */
    async channelChatRemoveTelegramChatV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling channelChatRemoveTelegramChatV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling channelChatRemoveTelegramChatV1().');
        }
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError('channelId', 'Required parameter "channelId" was null or undefined when calling channelChatRemoveTelegramChatV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['channelId'] != null) {
            queryParameters['channel_id'] = requestParameters['channelId'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_settings/chat/telegram/disconnect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Disconnect telegram chat
     */
    async channelChatRemoveTelegramChatV1(requestParameters, initOverrides) {
        const response = await this.channelChatRemoveTelegramChatV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Set telegram settings
     */
    async channelChatSetTelegramSettingV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling channelChatSetTelegramSettingV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling channelChatSetTelegramSettingV1().');
        }
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError('channelId', 'Required parameter "channelId" was null or undefined when calling channelChatSetTelegramSettingV1().');
        }
        if (requestParameters['telegramSetSettingsRequestDto'] == null) {
            throw new runtime.RequiredError('telegramSetSettingsRequestDto', 'Required parameter "telegramSetSettingsRequestDto" was null or undefined when calling channelChatSetTelegramSettingV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['channelId'] != null) {
            queryParameters['channel_id'] = requestParameters['channelId'];
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/channel_settings/chat/telegram/setting`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.TelegramSetSettingsRequestDtoToJSON)(requestParameters['telegramSetSettingsRequestDto']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Set telegram settings
     */
    async channelChatSetTelegramSettingV1(requestParameters, initOverrides) {
        const response = await this.channelChatSetTelegramSettingV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get telegram post list
     */
    async channelChatTelegramPostsV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling channelChatTelegramPostsV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling channelChatTelegramPostsV1().');
        }
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError('channelId', 'Required parameter "channelId" was null or undefined when calling channelChatTelegramPostsV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['channelId'] != null) {
            queryParameters['channel_id'] = requestParameters['channelId'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_settings/chat/telegram/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TelegramChatPostsResponseDtoFromJSON)(jsonValue));
    }
    /**
     * Get telegram post list
     */
    async channelChatTelegramPostsV1(requestParameters, initOverrides) {
        const response = await this.channelChatTelegramPostsV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Optional settings for telegram
     */
    async channelChatUpdateOptionsTelegramV1Raw(requestParameters, initOverrides) {
        if (requestParameters['siteUpdateChatTelegramRequest'] == null) {
            throw new runtime.RequiredError('siteUpdateChatTelegramRequest', 'Required parameter "siteUpdateChatTelegramRequest" was null or undefined when calling channelChatUpdateOptionsTelegramV1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/channel_settings/chat/setTelegram`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SiteUpdateChatTelegramRequestToJSON)(requestParameters['siteUpdateChatTelegramRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Optional settings for telegram
     */
    async channelChatUpdateOptionsTelegramV1(requestParameters, initOverrides) {
        const response = await this.channelChatUpdateOptionsTelegramV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get planned list
     */
    async channelOptionsGetPlannedV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling channelOptionsGetPlannedV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling channelOptionsGetPlannedV1().');
        }
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError('channelId', 'Required parameter "channelId" was null or undefined when calling channelOptionsGetPlannedV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['channelId'] != null) {
            queryParameters['channel_id'] = requestParameters['channelId'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_settings/options/getPlanned`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ListOfSitePlannedResponseFromJSON)(jsonValue));
    }
    /**
     * Get planned list
     */
    async channelOptionsGetPlannedV1(requestParameters, initOverrides) {
        const response = await this.channelOptionsGetPlannedV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get playlists from the platform
     */
    async channelOptionsGetPlayListV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling channelOptionsGetPlayListV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling channelOptionsGetPlayListV1().');
        }
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError('channelId', 'Required parameter "channelId" was null or undefined when calling channelOptionsGetPlayListV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['channelId'] != null) {
            queryParameters['channel_id'] = requestParameters['channelId'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_settings/options/getPlaylist`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ListOfPlaylistItemResponseFromJSON)(jsonValue));
    }
    /**
     * Get playlists from the platform
     */
    async channelOptionsGetPlayListV1(requestParameters, initOverrides) {
        const response = await this.channelOptionsGetPlayListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Optional settings for ok. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsOkV1Raw(requestParameters, initOverrides) {
        if (requestParameters['siteUpdateOptionsOkRequest'] == null) {
            throw new runtime.RequiredError('siteUpdateOptionsOkRequest', 'Required parameter "siteUpdateOptionsOkRequest" was null or undefined when calling channelOptionsUpdateOptionsOkV1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/channel_settings/options/setOk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SiteUpdateOptionsOkRequestToJSON)(requestParameters['siteUpdateOptionsOkRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Optional settings for ok. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsOkV1(requestParameters, initOverrides) {
        const response = await this.channelOptionsUpdateOptionsOkV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Optional settings for trovo. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsTrovoV1Raw(requestParameters, initOverrides) {
        if (requestParameters['siteUpdateOptionsTrovoRequest'] == null) {
            throw new runtime.RequiredError('siteUpdateOptionsTrovoRequest', 'Required parameter "siteUpdateOptionsTrovoRequest" was null or undefined when calling channelOptionsUpdateOptionsTrovoV1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/channel_settings/options/setTrovo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SiteUpdateOptionsTrovoRequestToJSON)(requestParameters['siteUpdateOptionsTrovoRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Optional settings for trovo. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsTrovoV1(requestParameters, initOverrides) {
        const response = await this.channelOptionsUpdateOptionsTrovoV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Optional settings for twitch. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsTwitchV1Raw(requestParameters, initOverrides) {
        if (requestParameters['siteUpdateOptionsTwitchRequest'] == null) {
            throw new runtime.RequiredError('siteUpdateOptionsTwitchRequest', 'Required parameter "siteUpdateOptionsTwitchRequest" was null or undefined when calling channelOptionsUpdateOptionsTwitchV1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/channel_settings/options/setTwitch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SiteUpdateOptionsTwitchRequestToJSON)(requestParameters['siteUpdateOptionsTwitchRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Optional settings for twitch. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsTwitchV1(requestParameters, initOverrides) {
        const response = await this.channelOptionsUpdateOptionsTwitchV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Optional settings for vk. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsVkV1Raw(requestParameters, initOverrides) {
        if (requestParameters['siteUpdateOptionsVkRequest'] == null) {
            throw new runtime.RequiredError('siteUpdateOptionsVkRequest', 'Required parameter "siteUpdateOptionsVkRequest" was null or undefined when calling channelOptionsUpdateOptionsVkV1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/channel_settings/options/setVk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SiteUpdateOptionsVkRequestToJSON)(requestParameters['siteUpdateOptionsVkRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Optional settings for vk. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsVkV1(requestParameters, initOverrides) {
        const response = await this.channelOptionsUpdateOptionsVkV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Optional settings for vk video live. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsVkVideoLiveV1Raw(requestParameters, initOverrides) {
        if (requestParameters['siteUpdateOptionsVkVideoLiveRequest'] == null) {
            throw new runtime.RequiredError('siteUpdateOptionsVkVideoLiveRequest', 'Required parameter "siteUpdateOptionsVkVideoLiveRequest" was null or undefined when calling channelOptionsUpdateOptionsVkVideoLiveV1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/channel_settings/options/setVkVideoLive`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SiteUpdateOptionsVkVideoLiveRequestToJSON)(requestParameters['siteUpdateOptionsVkVideoLiveRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Optional settings for vk video live. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters, initOverrides) {
        const response = await this.channelOptionsUpdateOptionsVkVideoLiveV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Optional settings for youtube. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsYoutubeV1Raw(requestParameters, initOverrides) {
        if (requestParameters['siteUpdateOptionsYoutubeRequest'] == null) {
            throw new runtime.RequiredError('siteUpdateOptionsYoutubeRequest', 'Required parameter "siteUpdateOptionsYoutubeRequest" was null or undefined when calling channelOptionsUpdateOptionsYoutubeV1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/channel_settings/options/setYoutube`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SiteUpdateOptionsYoutubeRequestToJSON)(requestParameters['siteUpdateOptionsYoutubeRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Optional settings for youtube. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsYoutubeV1(requestParameters, initOverrides) {
        const response = await this.channelOptionsUpdateOptionsYoutubeV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Set planned id. Depends on the tariff.
     */
    async channelOptionsUpdatePlannedV1Raw(requestParameters, initOverrides) {
        if (requestParameters['siteSetPlannedRequest'] == null) {
            throw new runtime.RequiredError('siteSetPlannedRequest', 'Required parameter "siteSetPlannedRequest" was null or undefined when calling channelOptionsUpdatePlannedV1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/channel_settings/options/setPlanned`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SiteSetPlannedRequestToJSON)(requestParameters['siteSetPlannedRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SitePlannedResponseFromJSON)(jsonValue));
    }
    /**
     * Set planned id. Depends on the tariff.
     */
    async channelOptionsUpdatePlannedV1(requestParameters, initOverrides) {
        const response = await this.channelOptionsUpdatePlannedV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get status platform
     */
    async channelSettingGetStatusV1Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_settings/getStatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SiteChannelStatusResponseFromJSON)(jsonValue));
    }
    /**
     * Get status platform
     */
    async channelSettingGetStatusV1(initOverrides) {
        const response = await this.channelSettingGetStatusV1Raw(initOverrides);
        return await response.value();
    }
    /**
     * Set name from custom channel. Global settings.
     */
    async channelSettingSetNameV1Raw(requestParameters, initOverrides) {
        if (requestParameters['siteSetNameRequest'] == null) {
            throw new runtime.RequiredError('siteSetNameRequest', 'Required parameter "siteSetNameRequest" was null or undefined when calling channelSettingSetNameV1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/channel_settings/setName`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SiteSetNameRequestToJSON)(requestParameters['siteSetNameRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Set name from custom channel. Global settings.
     */
    async channelSettingSetNameV1(requestParameters, initOverrides) {
        const response = await this.channelSettingSetNameV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Set rtmp url from channel. Global settings.
     */
    async channelSettingUpdateRtmpV1Raw(requestParameters, initOverrides) {
        if (requestParameters['siteSetUrlRequest'] == null) {
            throw new runtime.RequiredError('siteSetUrlRequest', 'Required parameter "siteSetUrlRequest" was null or undefined when calling channelSettingUpdateRtmpV1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/channel_settings/setRtmp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SiteSetUrlRequestToJSON)(requestParameters['siteSetUrlRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Set rtmp url from channel. Global settings.
     */
    async channelSettingUpdateRtmpV1(requestParameters, initOverrides) {
        const response = await this.channelSettingUpdateRtmpV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get status platform
     */
    async channelSettingUpdateTokenV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling channelSettingUpdateTokenV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling channelSettingUpdateTokenV1().');
        }
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError('channelId', 'Required parameter "channelId" was null or undefined when calling channelSettingUpdateTokenV1().');
        }
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling channelSettingUpdateTokenV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['channelId'] != null) {
            queryParameters['channel_id'] = requestParameters['channelId'];
        }
        if (requestParameters['role'] != null) {
            queryParameters['role'] = requestParameters['role'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_settings/update-token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Get status platform
     */
    async channelSettingUpdateTokenV1(requestParameters, initOverrides) {
        await this.channelSettingUpdateTokenV1Raw(requestParameters, initOverrides);
    }
    /**
     * Set transcoder from channel. Personal settings.
     */
    async channelSettingUpdateTranscoderV1Raw(requestParameters, initOverrides) {
        if (requestParameters['siteSetTranscoderRequest'] == null) {
            throw new runtime.RequiredError('siteSetTranscoderRequest', 'Required parameter "siteSetTranscoderRequest" was null or undefined when calling channelSettingUpdateTranscoderV1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/channel_settings/setTranscoder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SiteSetTranscoderRequestToJSON)(requestParameters['siteSetTranscoderRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Set transcoder from channel. Personal settings.
     */
    async channelSettingUpdateTranscoderV1(requestParameters, initOverrides) {
        const response = await this.channelSettingUpdateTranscoderV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get telegram post by filter
     */
    async telegramGetPostByFilterV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling telegramGetPostByFilterV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling telegramGetPostByFilterV1().');
        }
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError('channelId', 'Required parameter "channelId" was null or undefined when calling telegramGetPostByFilterV1().');
        }
        if (requestParameters['filterMode'] == null) {
            throw new runtime.RequiredError('filterMode', 'Required parameter "filterMode" was null or undefined when calling telegramGetPostByFilterV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['channelId'] != null) {
            queryParameters['channel_id'] = requestParameters['channelId'];
        }
        if (requestParameters['filterMode'] != null) {
            queryParameters['filter_mode'] = requestParameters['filterMode'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_settings/chat/telegram/posts/get-by-filter`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TelegramChatPostsItemFromJSON)(jsonValue));
    }
    /**
     * Get telegram post by filter
     */
    async telegramGetPostByFilterV1(requestParameters, initOverrides) {
        const response = await this.telegramGetPostByFilterV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.ChannelSettingsApi = ChannelSettingsApi;
/**
 * @export
 */
exports.ChannelChatGetTelegramSettingV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelChatGetTelegramSettingV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ChannelChatInitTelegramChatConnectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelChatInitTelegramChatConnectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ChannelChatRemoveTelegramChatV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelChatRemoveTelegramChatV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ChannelChatSetTelegramSettingV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelChatSetTelegramSettingV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ChannelChatTelegramPostsV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelChatTelegramPostsV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ChannelOptionsGetPlannedV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelOptionsGetPlannedV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ChannelOptionsGetPlayListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelOptionsGetPlayListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ChannelSettingUpdateTokenV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelSettingUpdateTokenV1RoleEnum = {
    Account: 'account',
    Group: 'group'
};
/**
 * @export
 */
exports.ChannelSettingUpdateTokenV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.TelegramGetPostByFilterV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.TelegramGetPostByFilterV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
