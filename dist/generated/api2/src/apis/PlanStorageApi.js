"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlanStorageTariffV1VEnum = exports.PlanStorageTariffV1LanguageEnum = exports.PlanStorageListV1VEnum = exports.PlanStorageListV1LanguageEnum = exports.PlanStorageGetDiscountV1VEnum = exports.PlanStorageGetDiscountV1LanguageEnum = exports.PlanStorageCheckV1VEnum = exports.PlanStorageCheckV1LanguageEnum = exports.PlanStorageCancelV1VEnum = exports.PlanStorageCancelV1LanguageEnum = exports.PlanStorageBuyV1VEnum = exports.PlanStorageBuyV1PeriodEnum = exports.PlanStorageBuyV1LanguageEnum = exports.PlanStorageApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class PlanStorageApi extends runtime.BaseAPI {
    /**
     * Buy storage tariff
     */
    async planStorageBuyV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling planStorageBuyV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling planStorageBuyV1().');
        }
        if (requestParameters['period'] == null) {
            throw new runtime.RequiredError('period', 'Required parameter "period" was null or undefined when calling planStorageBuyV1().');
        }
        if (requestParameters['planStorageId'] == null) {
            throw new runtime.RequiredError('planStorageId', 'Required parameter "planStorageId" was null or undefined when calling planStorageBuyV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }
        if (requestParameters['planStorageId'] != null) {
            queryParameters['plan_storage_id'] = requestParameters['planStorageId'];
        }
        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/plan_storage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Buy storage tariff
     */
    async planStorageBuyV1(requestParameters, initOverrides) {
        const response = await this.planStorageBuyV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Remove next tariff
     */
    async planStorageCancelV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling planStorageCancelV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling planStorageCancelV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/plan_storage`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Remove next tariff
     */
    async planStorageCancelV1(requestParameters, initOverrides) {
        const response = await this.planStorageCancelV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Check storage tariff before buy
     */
    async planStorageCheckV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling planStorageCheckV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling planStorageCheckV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/plan_storage/check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PlanStorageCheckResponseFromJSON)(jsonValue));
    }
    /**
     * Check storage tariff before buy
     */
    async planStorageCheckV1(requestParameters, initOverrides) {
        const response = await this.planStorageCheckV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get discount of storage
     */
    async planStorageGetDiscountV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling planStorageGetDiscountV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/plan_storage/get_discount`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PlanStorageDiscountResponseFromJSON)(jsonValue));
    }
    /**
     * Get discount of storage
     */
    async planStorageGetDiscountV1(requestParameters, initOverrides) {
        const response = await this.planStorageGetDiscountV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get info for storage tariff
     */
    async planStorageListV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling planStorageListV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/plan_storage/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PlanStorageResponseDtoFromJSON)(jsonValue));
    }
    /**
     * Get info for storage tariff
     */
    async planStorageListV1(requestParameters, initOverrides) {
        const response = await this.planStorageListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get tariff for project
     */
    async planStorageTariffV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling planStorageTariffV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling planStorageTariffV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/plan_storage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PlanStorageForProjectFromJSON)(jsonValue));
    }
    /**
     * Get tariff for project
     */
    async planStorageTariffV1(requestParameters, initOverrides) {
        const response = await this.planStorageTariffV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.PlanStorageApi = PlanStorageApi;
/**
 * @export
 */
exports.PlanStorageBuyV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanStorageBuyV1PeriodEnum = {
    Month: 'month',
    Year: 'year'
};
/**
 * @export
 */
exports.PlanStorageBuyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanStorageCancelV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanStorageCancelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanStorageCheckV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanStorageCheckV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanStorageGetDiscountV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanStorageGetDiscountV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanStorageListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanStorageListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanStorageTariffV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanStorageTariffV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
