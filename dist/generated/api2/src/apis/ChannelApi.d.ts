/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { MethodSetStatusChannelRequest, SiteGetShortChannelResponse, SiteSearchChannelResponse, SuccessResponse } from '../models/index';
export interface ChannelShortChannelListV1Request {
    language: ChannelShortChannelListV1LanguageEnum;
    projectId: number;
    v?: ChannelShortChannelListV1VEnum;
}
export interface MethodSearchV1Request {
    language: MethodSearchV1LanguageEnum;
    projectId: number;
    v?: MethodSearchV1VEnum;
    type?: MethodSearchV1TypeEnum;
    platform?: string;
    name?: string;
    limit?: number;
    offset?: number;
}
export interface MethodSetStatusV1Request {
    methodSetStatusChannelRequest: MethodSetStatusChannelRequest;
}
/**
 * ChannelApi - interface
 *
 * @export
 * @interface ChannelApiInterface
 */
export interface ChannelApiInterface {
    /**
     *
     * @summary Minimal channel list
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} projectId Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     */
    channelShortChannelListV1Raw(requestParameters: ChannelShortChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteGetShortChannelResponse>>;
    /**
     * Minimal channel list
     */
    channelShortChannelListV1(requestParameters: ChannelShortChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteGetShortChannelResponse>;
    /**
     *
     * @summary Search channel list
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} projectId Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {'all' | 'my' | 'available' | 'active'} [type]
     * @param {string} [platform] platform type
     * @param {string} [name] name
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     */
    methodSearchV1Raw(requestParameters: MethodSearchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteSearchChannelResponse>>;
    /**
     * Search channel list
     */
    methodSearchV1(requestParameters: MethodSearchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteSearchChannelResponse>;
    /**
     *
     * @summary Get live status
     * @param {MethodSetStatusChannelRequest} methodSetStatusChannelRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     */
    methodSetStatusV1Raw(requestParameters: MethodSetStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Get live status
     */
    methodSetStatusV1(requestParameters: MethodSetStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
}
/**
 *
 */
export declare class ChannelApi extends runtime.BaseAPI implements ChannelApiInterface {
    /**
     * Minimal channel list
     */
    channelShortChannelListV1Raw(requestParameters: ChannelShortChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteGetShortChannelResponse>>;
    /**
     * Minimal channel list
     */
    channelShortChannelListV1(requestParameters: ChannelShortChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteGetShortChannelResponse>;
    /**
     * Search channel list
     */
    methodSearchV1Raw(requestParameters: MethodSearchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteSearchChannelResponse>>;
    /**
     * Search channel list
     */
    methodSearchV1(requestParameters: MethodSearchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteSearchChannelResponse>;
    /**
     * Get live status
     */
    methodSetStatusV1Raw(requestParameters: MethodSetStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Get live status
     */
    methodSetStatusV1(requestParameters: MethodSetStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
}
/**
 * @export
 */
export declare const ChannelShortChannelListV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type ChannelShortChannelListV1LanguageEnum = typeof ChannelShortChannelListV1LanguageEnum[keyof typeof ChannelShortChannelListV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelShortChannelListV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelShortChannelListV1VEnum = typeof ChannelShortChannelListV1VEnum[keyof typeof ChannelShortChannelListV1VEnum];
/**
 * @export
 */
export declare const MethodSearchV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type MethodSearchV1LanguageEnum = typeof MethodSearchV1LanguageEnum[keyof typeof MethodSearchV1LanguageEnum];
/**
 * @export
 */
export declare const MethodSearchV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type MethodSearchV1VEnum = typeof MethodSearchV1VEnum[keyof typeof MethodSearchV1VEnum];
/**
 * @export
 */
export declare const MethodSearchV1TypeEnum: {
    readonly All: "all";
    readonly My: "my";
    readonly Available: "available";
    readonly Active: "active";
};
export type MethodSearchV1TypeEnum = typeof MethodSearchV1TypeEnum[keyof typeof MethodSearchV1TypeEnum];
//# sourceMappingURL=ChannelApi.d.ts.map