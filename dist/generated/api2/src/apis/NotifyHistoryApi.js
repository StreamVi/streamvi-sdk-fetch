"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotifyHistoryRunActionV1VEnum = exports.NotifyHistoryMarkOfReadV1VEnum = exports.NotifyHistoryMarkOfReadV1LanguageEnum = exports.NotifyHistoryGetV1VEnum = exports.NotifyHistoryGetStatusMyV1VEnum = exports.NotifyHistoryGetStatusMyV1LanguageEnum = exports.NotifyHistoryGetListMyV1StatusReadEnum = exports.NotifyHistoryGetListMyV1ChannelEnum = exports.NotifyHistoryGetListMyV1NameEnum = exports.NotifyHistoryGetListMyV1VEnum = exports.NotifyHistoryGetListMyV1LanguageEnum = exports.NotifyHistoryApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class NotifyHistoryApi extends runtime.BaseAPI {
    /**
     * Get list of my notifications
     */
    async notifyHistoryGetListMyV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling notifyHistoryGetListMyV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }
        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }
        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }
        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }
        if (requestParameters['channel'] != null) {
            queryParameters['channel'] = requestParameters['channel'];
        }
        if (requestParameters['date_from'] != null) {
            queryParameters['date_from'] = requestParameters['date_from'].toISOString();
        }
        if (requestParameters['date_to'] != null) {
            queryParameters['date_to'] = requestParameters['date_to'].toISOString();
        }
        if (requestParameters['status_read'] != null) {
            queryParameters['status_read'] = requestParameters['status_read'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/notify_history/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PaginatedResponseOfNotifyHistorySiteResponseFromJSON)(jsonValue));
    }
    /**
     * Get list of my notifications
     */
    async notifyHistoryGetListMyV1(requestParameters, initOverrides) {
        const response = await this.notifyHistoryGetListMyV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get my status unread message for user
     */
    async notifyHistoryGetStatusMyV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling notifyHistoryGetStatusMyV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/notify_history/get_status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.NotifyHistoryStatusUserResponseFromJSON)(jsonValue));
    }
    /**
     * Get my status unread message for user
     */
    async notifyHistoryGetStatusMyV1(requestParameters, initOverrides) {
        const response = await this.notifyHistoryGetStatusMyV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get my NotifyHistory item by id
     */
    async notifyHistoryGetV1Raw(requestParameters, initOverrides) {
        if (requestParameters['_id'] == null) {
            throw new runtime.RequiredError('_id', 'Required parameter "_id" was null or undefined when calling notifyHistoryGetV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['_id'] != null) {
            queryParameters['_id'] = requestParameters['_id'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/notify_history/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.NotifyHistorySiteResponseFromJSON)(jsonValue));
    }
    /**
     * Get my NotifyHistory item by id
     */
    async notifyHistoryGetV1(requestParameters, initOverrides) {
        const response = await this.notifyHistoryGetV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Set notification in cabinet as read
     */
    async notifyHistoryMarkOfReadV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling notifyHistoryMarkOfReadV1().');
        }
        if (requestParameters['SiteMarkReadHistoryRequest'] == null) {
            throw new runtime.RequiredError('SiteMarkReadHistoryRequest', 'Required parameter "SiteMarkReadHistoryRequest" was null or undefined when calling notifyHistoryMarkOfReadV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/notify_history/read`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SiteMarkReadHistoryRequestToJSON)(requestParameters['SiteMarkReadHistoryRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SiteMarkReadHistoryResponseFromJSON)(jsonValue));
    }
    /**
     * Set notification in cabinet as read
     */
    async notifyHistoryMarkOfReadV1(requestParameters, initOverrides) {
        const response = await this.notifyHistoryMarkOfReadV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Run action in my notify item
     */
    async notifyHistoryRunActionV1Raw(requestParameters, initOverrides) {
        if (requestParameters['notify_history_id'] == null) {
            throw new runtime.RequiredError('notify_history_id', 'Required parameter "notify_history_id" was null or undefined when calling notifyHistoryRunActionV1().');
        }
        if (requestParameters['action_name'] == null) {
            throw new runtime.RequiredError('action_name', 'Required parameter "action_name" was null or undefined when calling notifyHistoryRunActionV1().');
        }
        if (requestParameters['group_id'] == null) {
            throw new runtime.RequiredError('group_id', 'Required parameter "group_id" was null or undefined when calling notifyHistoryRunActionV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['notify_history_id'] != null) {
            queryParameters['notify_history_id'] = requestParameters['notify_history_id'];
        }
        if (requestParameters['action_name'] != null) {
            queryParameters['action_name'] = requestParameters['action_name'];
        }
        if (requestParameters['group_id'] != null) {
            queryParameters['group_id'] = requestParameters['group_id'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/notify_history/run_action`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.NotifyHistorySiteResponseFromJSON)(jsonValue));
    }
    /**
     * Run action in my notify item
     */
    async notifyHistoryRunActionV1(requestParameters, initOverrides) {
        const response = await this.notifyHistoryRunActionV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Set all notification in cabinet as read
     */
    async notifyHistorySetAllCabinetReadV1Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/method/notify_history/set_all_cabinet_read`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Set all notification in cabinet as read
     */
    async notifyHistorySetAllCabinetReadV1(initOverrides) {
        const response = await this.notifyHistorySetAllCabinetReadV1Raw(initOverrides);
        return await response.value();
    }
}
exports.NotifyHistoryApi = NotifyHistoryApi;
/**
 * @export
 */
exports.NotifyHistoryGetListMyV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.NotifyHistoryGetListMyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.NotifyHistoryGetListMyV1NameEnum = {
    high_bitrate: 'high_bitrate',
    request_access_channel: 'request_access_channel',
    request_access_project: 'request_access_project',
    promocode_test: 'promocode_test',
    stream_test: 'stream_test',
    plan_restream_expires: 'plan_restream_expires',
    plan_restream_expired: 'plan_restream_expired',
    plan_restream_renewed: 'plan_restream_renewed',
    plan_transcoder_expires: 'plan_transcoder_expires',
    plan_transcoder_expired: 'plan_transcoder_expired',
    plan_transcoder_renewed: 'plan_transcoder_renewed',
    plan_storage_expires: 'plan_storage_expires',
    plan_storage_expired: 'plan_storage_expired',
    plan_storage_renewed: 'plan_storage_renewed',
    broadcast_unsupported_codec: 'broadcast_unsupported_codec',
    broadcast_unsupported_codec_screen: 'broadcast_unsupported_codec_screen',
    broadcast_bitrate_exceeded_screen: 'broadcast_bitrate_exceeded_screen',
    rtmp_connect_old_server_screen: 'rtmp_connect_old_server_screen',
    broadcast_not_audio: 'broadcast_not_audio',
    broadcast_bitrate_exceeded: 'broadcast_bitrate_exceeded',
    broadcast_started: 'broadcast_started',
    broadcast_stopped: 'broadcast_stopped',
    restream_check_twitch_bitrate_1: 'restream_check_twitch_bitrate_1',
    api_pause_start: 'api_pause_start',
    api_pause_end: 'api_pause_end',
    api_wait_edit: 'api_wait_edit',
    api_restream_start: 'api_restream_start',
    api_restream_stop: 'api_restream_stop',
    api_drop_broadcast: 'api_drop_broadcast',
    api_drop_broadcast_remove_company: 'api_drop_broadcast_remove_company',
    api_drop_broadcast_update_key: 'api_drop_broadcast_update_key',
    publisher_disconnected: 'publisher_disconnected',
    publisher_connected: 'publisher_connected',
    publisher_initializing: 'publisher_initializing',
    publisher_close: 'publisher_close',
    broadcast_connected_start: 'broadcast_connected_start',
    broadcast_connected_end: 'broadcast_connected_end',
    broadcast_connecting_stream: 'broadcast_connecting_stream',
    broadcast_started_new_stream: 'broadcast_started_new_stream',
    broadcast_connecting_lost: 'broadcast_connecting_lost',
    broadcast_video_lost_start: 'broadcast_video_lost_start',
    broadcast_video_lost_end: 'broadcast_video_lost_end',
    broadcast_video_pause_start: 'broadcast_video_pause_start',
    broadcast_video_pause_end: 'broadcast_video_pause_end',
    broadcast_init_restream: 'broadcast_init_restream',
    start_stream: 'start_stream',
    create_reader: 'create_reader',
    start_channel: 'start_channel',
    stop_channel: 'stop_channel',
    stop_stream_video_timeout: 'stop_stream_video_timeout',
    stop_stream_no_start_video: 'stop_stream_no_start_video',
    stop_stream: 'stop_stream',
    delete_reader: 'delete_reader',
    transcoder_start: 'transcoder_start',
    transcoder_stop: 'transcoder_stop',
    start_channel_failed: 'start_channel_failed',
    start_channel_success: 'start_channel_success',
    api_channel_initializing_start: 'api_channel_initializing_start',
    api_channel_initializing_failed: 'api_channel_initializing_failed',
    api_channel_initializing_success: 'api_channel_initializing_success',
    channel_api_update_settings_success: 'channel_api_update_settings_success',
    channel_api_update_settings_error: 'channel_api_update_settings_error',
    channel_api_update_playlist_success: 'channel_api_update_playlist_success',
    channel_api_update_playlist_error: 'channel_api_update_playlist_error',
    channel_api_update_chat_error: 'channel_api_update_chat_error',
    channel_api_stream_key_success: 'channel_api_stream_key_success',
    channel_api_stream_key_error: 'channel_api_stream_key_error',
    channel_api_auto_stop_disable_success: 'channel_api_auto_stop_disable_success',
    channel_api_auto_stop_disable_error: 'channel_api_auto_stop_disable_error',
    channel_api_unbinding_stream_key_error: 'channel_api_unbinding_stream_key_error',
    channel_api_create_broadcast_success: 'channel_api_create_broadcast_success',
    channel_api_create_broadcast_error: 'channel_api_create_broadcast_error',
    channel_api_set_planned_success: 'channel_api_set_planned_success',
    channel_api_set_planned_error: 'channel_api_set_planned_error',
    channel_api_set_thumbnail_success: 'channel_api_set_thumbnail_success',
    channel_api_set_thumbnail_error: 'channel_api_set_thumbnail_error',
    channel_token_error: 'channel_token_error',
    channel_api_group_failed: 'channel_api_group_failed',
    no_audio_reader: 'no_audio_reader',
    restream_check_twitch_bitrate_2: 'restream_check_twitch_bitrate_2',
    transcoder_support_error_screen: 'transcoder_support_error_screen',
    transcoder_tariff_end_screen: 'transcoder_tariff_end_screen',
    transcoder_count_flow_screen: 'transcoder_count_flow_screen',
    transcoder_resolution_screen: 'transcoder_resolution_screen',
    stream_key_banned: 'stream_key_banned',
    broadcast_change_codec: 'broadcast_change_codec',
    broadcast_change_region: 'broadcast_change_region',
    video_upload_error: 'video_upload_error',
    stop_channel_error: 'stop_channel_error',
    broadcast_user_action_stop: 'broadcast_user_action_stop'
};
/**
 * @export
 */
exports.NotifyHistoryGetListMyV1ChannelEnum = {
    telegram: 'telegram',
    cabinet: 'cabinet',
    mobile: 'mobile'
};
/**
 * @export
 */
exports.NotifyHistoryGetListMyV1StatusReadEnum = {
    unread: 'unread',
    read: 'read'
};
/**
 * @export
 */
exports.NotifyHistoryGetStatusMyV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.NotifyHistoryGetStatusMyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.NotifyHistoryGetV1VEnum = {
    _1: '1'
};
/**
 * @export
 */
exports.NotifyHistoryMarkOfReadV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.NotifyHistoryMarkOfReadV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.NotifyHistoryRunActionV1VEnum = {
    _1: '1'
};
