"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotifyHistoryRunActionV1VEnum = exports.NotifyHistoryMarkOfReadV1VEnum = exports.NotifyHistoryMarkOfReadV1LanguageEnum = exports.NotifyHistoryGetV1VEnum = exports.NotifyHistoryGetStatusMyV1VEnum = exports.NotifyHistoryGetStatusMyV1LanguageEnum = exports.NotifyHistoryGetListMyV1StatusReadEnum = exports.NotifyHistoryGetListMyV1ChannelEnum = exports.NotifyHistoryGetListMyV1NameEnum = exports.NotifyHistoryGetListMyV1VEnum = exports.NotifyHistoryGetListMyV1LanguageEnum = exports.NotifyHistoryApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class NotifyHistoryApi extends runtime.BaseAPI {
    /**
     * Get list of my notifications
     */
    async notifyHistoryGetListMyV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling notifyHistoryGetListMyV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }
        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }
        if (requestParameters['channel'] != null) {
            queryParameters['channel'] = requestParameters['channel'];
        }
        if (requestParameters['dateFrom'] != null) {
            queryParameters['date_from'] = requestParameters['dateFrom'].toISOString();
        }
        if (requestParameters['dateTo'] != null) {
            queryParameters['date_to'] = requestParameters['dateTo'].toISOString();
        }
        if (requestParameters['statusRead'] != null) {
            queryParameters['status_read'] = requestParameters['statusRead'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/notify_history/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PaginatedResponseOfNotifyHistorySiteResponseFromJSON)(jsonValue));
    }
    /**
     * Get list of my notifications
     */
    async notifyHistoryGetListMyV1(requestParameters, initOverrides) {
        const response = await this.notifyHistoryGetListMyV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get my status unread message for user
     */
    async notifyHistoryGetStatusMyV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling notifyHistoryGetStatusMyV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/notify_history/get_status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.NotifyHistoryStatusUserResponseFromJSON)(jsonValue));
    }
    /**
     * Get my status unread message for user
     */
    async notifyHistoryGetStatusMyV1(requestParameters, initOverrides) {
        const response = await this.notifyHistoryGetStatusMyV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get my NotifyHistory item by id
     */
    async notifyHistoryGetV1Raw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling notifyHistoryGetV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['id'] != null) {
            queryParameters['_id'] = requestParameters['id'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/notify_history/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.NotifyHistorySiteResponseFromJSON)(jsonValue));
    }
    /**
     * Get my NotifyHistory item by id
     */
    async notifyHistoryGetV1(requestParameters, initOverrides) {
        const response = await this.notifyHistoryGetV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Set notification in cabinet as read
     */
    async notifyHistoryMarkOfReadV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling notifyHistoryMarkOfReadV1().');
        }
        if (requestParameters['siteMarkReadHistoryRequest'] == null) {
            throw new runtime.RequiredError('siteMarkReadHistoryRequest', 'Required parameter "siteMarkReadHistoryRequest" was null or undefined when calling notifyHistoryMarkOfReadV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/notify_history/read`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SiteMarkReadHistoryRequestToJSON)(requestParameters['siteMarkReadHistoryRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SiteMarkReadHistoryResponseFromJSON)(jsonValue));
    }
    /**
     * Set notification in cabinet as read
     */
    async notifyHistoryMarkOfReadV1(requestParameters, initOverrides) {
        const response = await this.notifyHistoryMarkOfReadV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Run action in my notify item
     */
    async notifyHistoryRunActionV1Raw(requestParameters, initOverrides) {
        if (requestParameters['notifyHistoryId'] == null) {
            throw new runtime.RequiredError('notifyHistoryId', 'Required parameter "notifyHistoryId" was null or undefined when calling notifyHistoryRunActionV1().');
        }
        if (requestParameters['actionName'] == null) {
            throw new runtime.RequiredError('actionName', 'Required parameter "actionName" was null or undefined when calling notifyHistoryRunActionV1().');
        }
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError('groupId', 'Required parameter "groupId" was null or undefined when calling notifyHistoryRunActionV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['notifyHistoryId'] != null) {
            queryParameters['notify_history_id'] = requestParameters['notifyHistoryId'];
        }
        if (requestParameters['actionName'] != null) {
            queryParameters['action_name'] = requestParameters['actionName'];
        }
        if (requestParameters['groupId'] != null) {
            queryParameters['group_id'] = requestParameters['groupId'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/notify_history/run_action`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.NotifyHistorySiteResponseFromJSON)(jsonValue));
    }
    /**
     * Run action in my notify item
     */
    async notifyHistoryRunActionV1(requestParameters, initOverrides) {
        const response = await this.notifyHistoryRunActionV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Set all notification in cabinet as read
     */
    async notifyHistorySetAllCabinetReadV1Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/method/notify_history/set_all_cabinet_read`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Set all notification in cabinet as read
     */
    async notifyHistorySetAllCabinetReadV1(initOverrides) {
        const response = await this.notifyHistorySetAllCabinetReadV1Raw(initOverrides);
        return await response.value();
    }
}
exports.NotifyHistoryApi = NotifyHistoryApi;
/**
 * @export
 */
exports.NotifyHistoryGetListMyV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.NotifyHistoryGetListMyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.NotifyHistoryGetListMyV1NameEnum = {
    HighBitrate: 'high_bitrate',
    RequestAccessChannel: 'request_access_channel',
    RequestAccessProject: 'request_access_project',
    PromocodeTest: 'promocode_test',
    StreamTest: 'stream_test',
    PlanRestreamExpires: 'plan_restream_expires',
    PlanRestreamExpired: 'plan_restream_expired',
    PlanRestreamRenewed: 'plan_restream_renewed',
    PlanTranscoderExpires: 'plan_transcoder_expires',
    PlanTranscoderExpired: 'plan_transcoder_expired',
    PlanTranscoderRenewed: 'plan_transcoder_renewed',
    PlanStorageExpires: 'plan_storage_expires',
    PlanStorageExpired: 'plan_storage_expired',
    PlanStorageRenewed: 'plan_storage_renewed',
    BroadcastUnsupportedCodec: 'broadcast_unsupported_codec',
    BroadcastUnsupportedCodecScreen: 'broadcast_unsupported_codec_screen',
    BroadcastBitrateExceededScreen: 'broadcast_bitrate_exceeded_screen',
    RtmpConnectOldServerScreen: 'rtmp_connect_old_server_screen',
    BroadcastNotAudio: 'broadcast_not_audio',
    BroadcastBitrateExceeded: 'broadcast_bitrate_exceeded',
    BroadcastStarted: 'broadcast_started',
    BroadcastStopped: 'broadcast_stopped',
    RestreamCheckTwitchBitrate1: 'restream_check_twitch_bitrate_1',
    ApiPauseStart: 'api_pause_start',
    ApiPauseEnd: 'api_pause_end',
    ApiWaitEdit: 'api_wait_edit',
    ApiRestreamStart: 'api_restream_start',
    ApiRestreamStop: 'api_restream_stop',
    ApiDropBroadcast: 'api_drop_broadcast',
    ApiDropBroadcastRemoveCompany: 'api_drop_broadcast_remove_company',
    ApiDropBroadcastUpdateKey: 'api_drop_broadcast_update_key',
    PublisherDisconnected: 'publisher_disconnected',
    PublisherConnected: 'publisher_connected',
    PublisherInitializing: 'publisher_initializing',
    PublisherClose: 'publisher_close',
    BroadcastConnectedStart: 'broadcast_connected_start',
    BroadcastConnectedEnd: 'broadcast_connected_end',
    BroadcastConnectingStream: 'broadcast_connecting_stream',
    BroadcastStartedNewStream: 'broadcast_started_new_stream',
    BroadcastConnectingLost: 'broadcast_connecting_lost',
    BroadcastVideoLostStart: 'broadcast_video_lost_start',
    BroadcastVideoLostEnd: 'broadcast_video_lost_end',
    BroadcastVideoPauseStart: 'broadcast_video_pause_start',
    BroadcastVideoPauseEnd: 'broadcast_video_pause_end',
    BroadcastInitRestream: 'broadcast_init_restream',
    StartStream: 'start_stream',
    CreateReader: 'create_reader',
    StartChannel: 'start_channel',
    StopChannel: 'stop_channel',
    StopStreamVideoTimeout: 'stop_stream_video_timeout',
    StopStreamNoStartVideo: 'stop_stream_no_start_video',
    StopStream: 'stop_stream',
    DeleteReader: 'delete_reader',
    TranscoderStart: 'transcoder_start',
    TranscoderStop: 'transcoder_stop',
    StartChannelFailed: 'start_channel_failed',
    StartChannelSuccess: 'start_channel_success',
    ApiChannelInitializingStart: 'api_channel_initializing_start',
    ApiChannelInitializingFailed: 'api_channel_initializing_failed',
    ApiChannelInitializingSuccess: 'api_channel_initializing_success',
    ChannelApiUpdateSettingsSuccess: 'channel_api_update_settings_success',
    ChannelApiUpdateSettingsError: 'channel_api_update_settings_error',
    ChannelApiUpdatePlaylistSuccess: 'channel_api_update_playlist_success',
    ChannelApiUpdatePlaylistError: 'channel_api_update_playlist_error',
    ChannelApiUpdateChatError: 'channel_api_update_chat_error',
    ChannelApiStreamKeySuccess: 'channel_api_stream_key_success',
    ChannelApiStreamKeyError: 'channel_api_stream_key_error',
    ChannelApiAutoStopDisableSuccess: 'channel_api_auto_stop_disable_success',
    ChannelApiAutoStopDisableError: 'channel_api_auto_stop_disable_error',
    ChannelApiUnbindingStreamKeyError: 'channel_api_unbinding_stream_key_error',
    ChannelApiCreateBroadcastSuccess: 'channel_api_create_broadcast_success',
    ChannelApiCreateBroadcastError: 'channel_api_create_broadcast_error',
    ChannelApiSetPlannedSuccess: 'channel_api_set_planned_success',
    ChannelApiSetPlannedError: 'channel_api_set_planned_error',
    ChannelApiSetThumbnailSuccess: 'channel_api_set_thumbnail_success',
    ChannelApiSetThumbnailError: 'channel_api_set_thumbnail_error',
    ChannelTokenError: 'channel_token_error',
    ChannelApiGroupFailed: 'channel_api_group_failed',
    NoAudioReader: 'no_audio_reader',
    RestreamCheckTwitchBitrate2: 'restream_check_twitch_bitrate_2',
    TranscoderSupportErrorScreen: 'transcoder_support_error_screen',
    TranscoderTariffEndScreen: 'transcoder_tariff_end_screen',
    TranscoderCountFlowScreen: 'transcoder_count_flow_screen',
    TranscoderResolutionScreen: 'transcoder_resolution_screen',
    StreamKeyBanned: 'stream_key_banned',
    BroadcastChangeCodec: 'broadcast_change_codec',
    BroadcastChangeRegion: 'broadcast_change_region',
    VideoUploadError: 'video_upload_error',
    StopChannelError: 'stop_channel_error',
    BroadcastUserActionStop: 'broadcast_user_action_stop'
};
/**
 * @export
 */
exports.NotifyHistoryGetListMyV1ChannelEnum = {
    Telegram: 'telegram',
    Cabinet: 'cabinet',
    Mobile: 'mobile'
};
/**
 * @export
 */
exports.NotifyHistoryGetListMyV1StatusReadEnum = {
    Unread: 'unread',
    Read: 'read'
};
/**
 * @export
 */
exports.NotifyHistoryGetStatusMyV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.NotifyHistoryGetStatusMyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.NotifyHistoryGetV1VEnum = {
    _1: '1'
};
/**
 * @export
 */
exports.NotifyHistoryMarkOfReadV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.NotifyHistoryMarkOfReadV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.NotifyHistoryRunActionV1VEnum = {
    _1: '1'
};
