"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamPullKeysSiteRemoveV1VEnum = exports.StreamPullKeysSiteRemoveV1LanguageEnum = exports.StreamPullKeysSiteGetV1VEnum = exports.StreamPullKeysSiteGetV1LanguageEnum = exports.StreamPullKeysSiteCheckV1VEnum = exports.StreamPullKeysSiteCheckV1LanguageEnum = exports.StreamPullKeysApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class StreamPullKeysApi extends runtime.BaseAPI {
    /**
     * Check key
     */
    async streamPullKeysSiteCheckV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling streamPullKeysSiteCheckV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling streamPullKeysSiteCheckV1().');
        }
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling streamPullKeysSiteCheckV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/stream-pull-keys/check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CheckPullKeyResponseFromJSON)(jsonValue));
    }
    /**
     * Check key
     */
    async streamPullKeysSiteCheckV1(requestParameters, initOverrides) {
        const response = await this.streamPullKeysSiteCheckV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Create key
     */
    async streamPullKeysSiteCreateV1Raw(requestParameters, initOverrides) {
        if (requestParameters['createPullKeyRequest'] == null) {
            throw new runtime.RequiredError('createPullKeyRequest', 'Required parameter "createPullKeyRequest" was null or undefined when calling streamPullKeysSiteCreateV1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/stream-pull-keys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.CreatePullKeyRequestToJSON)(requestParameters['createPullKeyRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CreatePullKeyResponseFromJSON)(jsonValue));
    }
    /**
     * Create key
     */
    async streamPullKeysSiteCreateV1(requestParameters, initOverrides) {
        const response = await this.streamPullKeysSiteCreateV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * List keys
     */
    async streamPullKeysSiteGetV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling streamPullKeysSiteGetV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling streamPullKeysSiteGetV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/stream-pull-keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PullKeyListResponseFromJSON)(jsonValue));
    }
    /**
     * List keys
     */
    async streamPullKeysSiteGetV1(requestParameters, initOverrides) {
        const response = await this.streamPullKeysSiteGetV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Delete key
     */
    async streamPullKeysSiteRemoveV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling streamPullKeysSiteRemoveV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling streamPullKeysSiteRemoveV1().');
        }
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling streamPullKeysSiteRemoveV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/stream-pull-keys`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Delete key
     */
    async streamPullKeysSiteRemoveV1(requestParameters, initOverrides) {
        const response = await this.streamPullKeysSiteRemoveV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update key
     */
    async streamPullKeysSiteUpdateV1Raw(requestParameters, initOverrides) {
        if (requestParameters['updatePullKeyRequest'] == null) {
            throw new runtime.RequiredError('updatePullKeyRequest', 'Required parameter "updatePullKeyRequest" was null or undefined when calling streamPullKeysSiteUpdateV1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/stream-pull-keys`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.UpdatePullKeyRequestToJSON)(requestParameters['updatePullKeyRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Update key
     */
    async streamPullKeysSiteUpdateV1(requestParameters, initOverrides) {
        const response = await this.streamPullKeysSiteUpdateV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.StreamPullKeysApi = StreamPullKeysApi;
/**
 * @export
 */
exports.StreamPullKeysSiteCheckV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.StreamPullKeysSiteCheckV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.StreamPullKeysSiteGetV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.StreamPullKeysSiteGetV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.StreamPullKeysSiteRemoveV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.StreamPullKeysSiteRemoveV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
