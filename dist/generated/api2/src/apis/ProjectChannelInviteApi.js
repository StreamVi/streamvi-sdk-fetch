"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectChannelInviteListV1VEnum = exports.ProjectChannelInviteListV1LanguageEnum = exports.ProjectChannelInviteGetV1VEnum = exports.ProjectChannelInviteGetV1LanguageEnum = exports.ProjectChannelInviteGetForSecretV1VEnum = exports.ProjectChannelInviteGetForSecretV1LanguageEnum = exports.ProjectChannelInviteGetForProjectV1VEnum = exports.ProjectChannelInviteGetForProjectV1LanguageEnum = exports.ProjectChannelInviteDelV1VEnum = exports.ProjectChannelInviteDelV1LanguageEnum = exports.ProjectChannelInviteDeclineForSecretV1VEnum = exports.ProjectChannelInviteDeclineForSecretV1LanguageEnum = exports.ProjectChannelInviteDeclineForProjectV1VEnum = exports.ProjectChannelInviteDeclineForProjectV1LanguageEnum = exports.ProjectChannelInviteAddByIdV1VEnum = exports.ProjectChannelInviteAddByIdV1AccessTypeEnum = exports.ProjectChannelInviteAddByIdV1LanguageEnum = exports.ProjectChannelInviteAddByEmailV1VEnum = exports.ProjectChannelInviteAddByEmailV1AccessTypeEnum = exports.ProjectChannelInviteAddByEmailV1LanguageEnum = exports.ProjectChannelInviteAcceptForSecretV1VEnum = exports.ProjectChannelInviteAcceptForSecretV1LanguageEnum = exports.ProjectChannelInviteAcceptForProjectV1VEnum = exports.ProjectChannelInviteAcceptForProjectV1LanguageEnum = exports.ProjectChannelInviteApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class ProjectChannelInviteApi extends runtime.BaseAPI {
    /**
     * Accept channel invitation for selected project
     */
    async projectChannelInviteAcceptForProjectV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling projectChannelInviteAcceptForProjectV1().');
        }
        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError('project_id', 'Required parameter "project_id" was null or undefined when calling projectChannelInviteAcceptForProjectV1().');
        }
        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError('channel_id', 'Required parameter "channel_id" was null or undefined when calling projectChannelInviteAcceptForProjectV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }
        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_invite/accept_for_project`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Accept channel invitation for selected project
     */
    async projectChannelInviteAcceptForProjectV1(requestParameters, initOverrides) {
        const response = await this.projectChannelInviteAcceptForProjectV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Accept channel invitation using a secret link
     */
    async projectChannelInviteAcceptForSecretV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling projectChannelInviteAcceptForSecretV1().');
        }
        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError('project_id', 'Required parameter "project_id" was null or undefined when calling projectChannelInviteAcceptForSecretV1().');
        }
        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError('channel_id', 'Required parameter "channel_id" was null or undefined when calling projectChannelInviteAcceptForSecretV1().');
        }
        if (requestParameters['secret'] == null) {
            throw new runtime.RequiredError('secret', 'Required parameter "secret" was null or undefined when calling projectChannelInviteAcceptForSecretV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }
        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }
        if (requestParameters['secret'] != null) {
            queryParameters['secret'] = requestParameters['secret'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_invite/accept_for_secret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Accept channel invitation using a secret link
     */
    async projectChannelInviteAcceptForSecretV1(requestParameters, initOverrides) {
        const response = await this.projectChannelInviteAcceptForSecretV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Add channel invite item for another user by email
     */
    async projectChannelInviteAddByEmailV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling projectChannelInviteAddByEmailV1().');
        }
        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError('project_id', 'Required parameter "project_id" was null or undefined when calling projectChannelInviteAddByEmailV1().');
        }
        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError('channel_id', 'Required parameter "channel_id" was null or undefined when calling projectChannelInviteAddByEmailV1().');
        }
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError('email', 'Required parameter "email" was null or undefined when calling projectChannelInviteAddByEmailV1().');
        }
        if (requestParameters['access_type'] == null) {
            throw new runtime.RequiredError('access_type', 'Required parameter "access_type" was null or undefined when calling projectChannelInviteAddByEmailV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }
        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }
        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }
        if (requestParameters['access_type'] != null) {
            queryParameters['access_type'] = requestParameters['access_type'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_invite/add_by_email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProjectChannelInviteResponseFromJSON)(jsonValue));
    }
    /**
     * Add channel invite item for another user by email
     */
    async projectChannelInviteAddByEmailV1(requestParameters, initOverrides) {
        const response = await this.projectChannelInviteAddByEmailV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Add channel invite item for another user by id
     */
    async projectChannelInviteAddByIdV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling projectChannelInviteAddByIdV1().');
        }
        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError('project_id', 'Required parameter "project_id" was null or undefined when calling projectChannelInviteAddByIdV1().');
        }
        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError('channel_id', 'Required parameter "channel_id" was null or undefined when calling projectChannelInviteAddByIdV1().');
        }
        if (requestParameters['access_type'] == null) {
            throw new runtime.RequiredError('access_type', 'Required parameter "access_type" was null or undefined when calling projectChannelInviteAddByIdV1().');
        }
        if (requestParameters['to_project_external_id'] == null) {
            throw new runtime.RequiredError('to_project_external_id', 'Required parameter "to_project_external_id" was null or undefined when calling projectChannelInviteAddByIdV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }
        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }
        if (requestParameters['access_type'] != null) {
            queryParameters['access_type'] = requestParameters['access_type'];
        }
        if (requestParameters['to_project_external_id'] != null) {
            queryParameters['to_project_external_id'] = requestParameters['to_project_external_id'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_invite/add_by_id`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProjectChannelInviteResponseFromJSON)(jsonValue));
    }
    /**
     * Add channel invite item for another user by id
     */
    async projectChannelInviteAddByIdV1(requestParameters, initOverrides) {
        const response = await this.projectChannelInviteAddByIdV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Decline channel invitation for selected project
     */
    async projectChannelInviteDeclineForProjectV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling projectChannelInviteDeclineForProjectV1().');
        }
        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError('project_id', 'Required parameter "project_id" was null or undefined when calling projectChannelInviteDeclineForProjectV1().');
        }
        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError('channel_id', 'Required parameter "channel_id" was null or undefined when calling projectChannelInviteDeclineForProjectV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }
        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_invite/decline_for_project`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Decline channel invitation for selected project
     */
    async projectChannelInviteDeclineForProjectV1(requestParameters, initOverrides) {
        const response = await this.projectChannelInviteDeclineForProjectV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Decline channel invitation using a secret link
     */
    async projectChannelInviteDeclineForSecretV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling projectChannelInviteDeclineForSecretV1().');
        }
        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError('project_id', 'Required parameter "project_id" was null or undefined when calling projectChannelInviteDeclineForSecretV1().');
        }
        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError('channel_id', 'Required parameter "channel_id" was null or undefined when calling projectChannelInviteDeclineForSecretV1().');
        }
        if (requestParameters['secret'] == null) {
            throw new runtime.RequiredError('secret', 'Required parameter "secret" was null or undefined when calling projectChannelInviteDeclineForSecretV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }
        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }
        if (requestParameters['secret'] != null) {
            queryParameters['secret'] = requestParameters['secret'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_invite/decline_for_secret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Decline channel invitation using a secret link
     */
    async projectChannelInviteDeclineForSecretV1(requestParameters, initOverrides) {
        const response = await this.projectChannelInviteDeclineForSecretV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Del channel invite item for my channel for another user
     */
    async projectChannelInviteDelV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling projectChannelInviteDelV1().');
        }
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling projectChannelInviteDelV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_invite/del`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Del channel invite item for my channel for another user
     */
    async projectChannelInviteDelV1(requestParameters, initOverrides) {
        const response = await this.projectChannelInviteDelV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get invitation for channel
     */
    async projectChannelInviteGetForProjectV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling projectChannelInviteGetForProjectV1().');
        }
        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError('project_id', 'Required parameter "project_id" was null or undefined when calling projectChannelInviteGetForProjectV1().');
        }
        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError('channel_id', 'Required parameter "channel_id" was null or undefined when calling projectChannelInviteGetForProjectV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }
        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_invite/get_for_project`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProjectChannelInviteLinkResponseFromJSON)(jsonValue));
    }
    /**
     * Get invitation for channel
     */
    async projectChannelInviteGetForProjectV1(requestParameters, initOverrides) {
        const response = await this.projectChannelInviteGetForProjectV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get channel invitation using a secret link
     */
    async projectChannelInviteGetForSecretV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling projectChannelInviteGetForSecretV1().');
        }
        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError('channel_id', 'Required parameter "channel_id" was null or undefined when calling projectChannelInviteGetForSecretV1().');
        }
        if (requestParameters['secret'] == null) {
            throw new runtime.RequiredError('secret', 'Required parameter "secret" was null or undefined when calling projectChannelInviteGetForSecretV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }
        if (requestParameters['secret'] != null) {
            queryParameters['secret'] = requestParameters['secret'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_invite/get_for_secret`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProjectChannelInviteLinkResponseFromJSON)(jsonValue));
    }
    /**
     * Get channel invitation using a secret link
     */
    async projectChannelInviteGetForSecretV1(requestParameters, initOverrides) {
        const response = await this.projectChannelInviteGetForSecretV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get channel invite item for my channel for another user
     */
    async projectChannelInviteGetV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling projectChannelInviteGetV1().');
        }
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling projectChannelInviteGetV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_invite/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Get channel invite item for my channel for another user
     */
    async projectChannelInviteGetV1(requestParameters, initOverrides) {
        const response = await this.projectChannelInviteGetV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * List of invites for channel in project
     */
    async projectChannelInviteListV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling projectChannelInviteListV1().');
        }
        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError('project_id', 'Required parameter "project_id" was null or undefined when calling projectChannelInviteListV1().');
        }
        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError('channel_id', 'Required parameter "channel_id" was null or undefined when calling projectChannelInviteListV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }
        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/channel_invite/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ListOfProjectChannelInviteResponseFromJSON)(jsonValue));
    }
    /**
     * List of invites for channel in project
     */
    async projectChannelInviteListV1(requestParameters, initOverrides) {
        const response = await this.projectChannelInviteListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.ProjectChannelInviteApi = ProjectChannelInviteApi;
/**
 * @export
 */
exports.ProjectChannelInviteAcceptForProjectV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteAcceptForProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteAcceptForSecretV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteAcceptForSecretV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteAddByEmailV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteAddByEmailV1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_12: 1,
    NUMBER_2: 2
};
/**
 * @export
 */
exports.ProjectChannelInviteAddByEmailV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteAddByIdV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteAddByIdV1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_12: 1,
    NUMBER_2: 2
};
/**
 * @export
 */
exports.ProjectChannelInviteAddByIdV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteDeclineForProjectV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteDeclineForProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteDeclineForSecretV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteDeclineForSecretV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteDelV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteDelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteGetForProjectV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteGetForProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteGetForSecretV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteGetForSecretV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteGetV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteGetV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteListV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
