/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ListOfProjectChannelResponse, SuccessResponse } from '../models/index';
export interface ProjectChannelChangeAccessV1Request {
    language: ProjectChannelChangeAccessV1LanguageEnum;
    project_id: number;
    channel_id: number;
    to_project_id: number;
    access_type: ProjectChannelChangeAccessV1AccessTypeEnum;
    v?: ProjectChannelChangeAccessV1VEnum;
}
export interface ProjectChannelDelV1Request {
    language: ProjectChannelDelV1LanguageEnum;
    project_id: number;
    channel_id: number;
    target_project_id: number;
    v?: ProjectChannelDelV1VEnum;
}
export interface ProjectChannelListV1Request {
    language: ProjectChannelListV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ProjectChannelListV1VEnum;
}
export interface ProjectChannelTransferOwnerV1Request {
    language: ProjectChannelTransferOwnerV1LanguageEnum;
    project_id: number;
    channel_id: number;
    to_project_id: number;
    v?: ProjectChannelTransferOwnerV1VEnum;
}
/**
 * ProjectChannelApi - interface
 *
 * @export
 * @interface ProjectChannelApiInterface
 */
export interface ProjectChannelApiInterface {
    /**
     *
     * @summary Change access for project in channel
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {number} to_project_id Target project id
     * @param {0 | 1 | 1 | 2} access_type Access type
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelChangeAccessV1Raw(requestParameters: ProjectChannelChangeAccessV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Change access for project in channel
     */
    projectChannelChangeAccessV1(requestParameters: ProjectChannelChangeAccessV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Remove access for project in channel
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {number} target_project_id Target project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelDelV1Raw(requestParameters: ProjectChannelDelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Remove access for project in channel
     */
    projectChannelDelV1(requestParameters: ProjectChannelDelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Project channel list
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelListV1Raw(requestParameters: ProjectChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfProjectChannelResponse>>;
    /**
     * Project channel list
     */
    projectChannelListV1(requestParameters: ProjectChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfProjectChannelResponse>;
    /**
     *
     * @summary Transfer owner for project in channel
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {number} to_project_id Target project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelTransferOwnerV1Raw(requestParameters: ProjectChannelTransferOwnerV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Transfer owner for project in channel
     */
    projectChannelTransferOwnerV1(requestParameters: ProjectChannelTransferOwnerV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
}
/**
 *
 */
export declare class ProjectChannelApi extends runtime.BaseAPI implements ProjectChannelApiInterface {
    /**
     * Change access for project in channel
     */
    projectChannelChangeAccessV1Raw(requestParameters: ProjectChannelChangeAccessV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Change access for project in channel
     */
    projectChannelChangeAccessV1(requestParameters: ProjectChannelChangeAccessV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Remove access for project in channel
     */
    projectChannelDelV1Raw(requestParameters: ProjectChannelDelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Remove access for project in channel
     */
    projectChannelDelV1(requestParameters: ProjectChannelDelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Project channel list
     */
    projectChannelListV1Raw(requestParameters: ProjectChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfProjectChannelResponse>>;
    /**
     * Project channel list
     */
    projectChannelListV1(requestParameters: ProjectChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfProjectChannelResponse>;
    /**
     * Transfer owner for project in channel
     */
    projectChannelTransferOwnerV1Raw(requestParameters: ProjectChannelTransferOwnerV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Transfer owner for project in channel
     */
    projectChannelTransferOwnerV1(requestParameters: ProjectChannelTransferOwnerV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
}
/**
 * @export
 */
export declare const ProjectChannelChangeAccessV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type ProjectChannelChangeAccessV1LanguageEnum = typeof ProjectChannelChangeAccessV1LanguageEnum[keyof typeof ProjectChannelChangeAccessV1LanguageEnum];
/**
 * @export
 */
export declare const ProjectChannelChangeAccessV1AccessTypeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_12: 1;
    readonly NUMBER_2: 2;
};
export type ProjectChannelChangeAccessV1AccessTypeEnum = typeof ProjectChannelChangeAccessV1AccessTypeEnum[keyof typeof ProjectChannelChangeAccessV1AccessTypeEnum];
/**
 * @export
 */
export declare const ProjectChannelChangeAccessV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ProjectChannelChangeAccessV1VEnum = typeof ProjectChannelChangeAccessV1VEnum[keyof typeof ProjectChannelChangeAccessV1VEnum];
/**
 * @export
 */
export declare const ProjectChannelDelV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type ProjectChannelDelV1LanguageEnum = typeof ProjectChannelDelV1LanguageEnum[keyof typeof ProjectChannelDelV1LanguageEnum];
/**
 * @export
 */
export declare const ProjectChannelDelV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ProjectChannelDelV1VEnum = typeof ProjectChannelDelV1VEnum[keyof typeof ProjectChannelDelV1VEnum];
/**
 * @export
 */
export declare const ProjectChannelListV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type ProjectChannelListV1LanguageEnum = typeof ProjectChannelListV1LanguageEnum[keyof typeof ProjectChannelListV1LanguageEnum];
/**
 * @export
 */
export declare const ProjectChannelListV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ProjectChannelListV1VEnum = typeof ProjectChannelListV1VEnum[keyof typeof ProjectChannelListV1VEnum];
/**
 * @export
 */
export declare const ProjectChannelTransferOwnerV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type ProjectChannelTransferOwnerV1LanguageEnum = typeof ProjectChannelTransferOwnerV1LanguageEnum[keyof typeof ProjectChannelTransferOwnerV1LanguageEnum];
/**
 * @export
 */
export declare const ProjectChannelTransferOwnerV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ProjectChannelTransferOwnerV1VEnum = typeof ProjectChannelTransferOwnerV1VEnum[keyof typeof ProjectChannelTransferOwnerV1VEnum];
//# sourceMappingURL=ProjectChannelApi.d.ts.map