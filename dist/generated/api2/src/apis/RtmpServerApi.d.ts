/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ListOfRtmpServerLocationResponse, RtmpServerGraphResponse, RtmpServerListV2Response, RtmpServerStateResponse } from '../models/index';
export interface MethodRtmpServerListLocationsUnauthorizedV1Request {
    language: MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum;
    v?: MethodRtmpServerListLocationsUnauthorizedV1VEnum;
}
export interface RtmpServerGraphV1Request {
    language: RtmpServerGraphV1LanguageEnum;
    interval: RtmpServerGraphV1IntervalEnum;
    type: RtmpServerGraphV1TypeEnum;
    v?: RtmpServerGraphV1VEnum;
}
export interface RtmpServerListV2Request {
    language: RtmpServerListV2LanguageEnum;
    project_id: number;
    interval: RtmpServerListV2IntervalEnum;
    v?: RtmpServerListV2VEnum;
}
export interface RtmpServerStateV1Request {
    language: RtmpServerStateV1LanguageEnum;
    interval: RtmpServerStateV1IntervalEnum;
    v?: RtmpServerStateV1VEnum;
}
/**
 * RtmpServerApi - interface
 *
 * @export
 * @interface RtmpServerApiInterface
 */
export interface RtmpServerApiInterface {
    /**
     *
     * @summary Rtmp locations server list example for unauthorized
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApiInterface
     */
    methodRtmpServerListLocationsUnauthorizedV1Raw(requestParameters: MethodRtmpServerListLocationsUnauthorizedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfRtmpServerLocationResponse>>;
    /**
     * Rtmp locations server list example for unauthorized
     */
    methodRtmpServerListLocationsUnauthorizedV1(requestParameters: MethodRtmpServerListLocationsUnauthorizedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfRtmpServerLocationResponse>;
    /**
     *
     * @summary Graph of rtmp servers
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {1 | 3 | 6 | 12 | 24} interval Interval state in hours
     * @param {'performance' | 'network' | 'cpu' | 'ram' | 'deliveredPackages'} type Type graph
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApiInterface
     */
    rtmpServerGraphV1Raw(requestParameters: RtmpServerGraphV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RtmpServerGraphResponse>>;
    /**
     * Graph of rtmp servers
     */
    rtmpServerGraphV1(requestParameters: RtmpServerGraphV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RtmpServerGraphResponse>;
    /**
     *
     * @summary List rtmp servers
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {1 | 3 | 6 | 12 | 24} interval Interval state in hours
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 2 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApiInterface
     */
    rtmpServerListV2Raw(requestParameters: RtmpServerListV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RtmpServerListV2Response>>;
    /**
     * List rtmp servers
     */
    rtmpServerListV2(requestParameters: RtmpServerListV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RtmpServerListV2Response>;
    /**
     *
     * @summary State of rtmp servers
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {1 | 3 | 6 | 12 | 24} interval Interval state in hours
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApiInterface
     */
    rtmpServerStateV1Raw(requestParameters: RtmpServerStateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RtmpServerStateResponse>>;
    /**
     * State of rtmp servers
     */
    rtmpServerStateV1(requestParameters: RtmpServerStateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RtmpServerStateResponse>;
    /**
     *
     * @summary State of rtmp servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApiInterface
     */
    rtmpServerUpV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * State of rtmp servers
     */
    rtmpServerUpV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
}
/**
 *
 */
export declare class RtmpServerApi extends runtime.BaseAPI implements RtmpServerApiInterface {
    /**
     * Rtmp locations server list example for unauthorized
     */
    methodRtmpServerListLocationsUnauthorizedV1Raw(requestParameters: MethodRtmpServerListLocationsUnauthorizedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfRtmpServerLocationResponse>>;
    /**
     * Rtmp locations server list example for unauthorized
     */
    methodRtmpServerListLocationsUnauthorizedV1(requestParameters: MethodRtmpServerListLocationsUnauthorizedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfRtmpServerLocationResponse>;
    /**
     * Graph of rtmp servers
     */
    rtmpServerGraphV1Raw(requestParameters: RtmpServerGraphV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RtmpServerGraphResponse>>;
    /**
     * Graph of rtmp servers
     */
    rtmpServerGraphV1(requestParameters: RtmpServerGraphV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RtmpServerGraphResponse>;
    /**
     * List rtmp servers
     */
    rtmpServerListV2Raw(requestParameters: RtmpServerListV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RtmpServerListV2Response>>;
    /**
     * List rtmp servers
     */
    rtmpServerListV2(requestParameters: RtmpServerListV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RtmpServerListV2Response>;
    /**
     * State of rtmp servers
     */
    rtmpServerStateV1Raw(requestParameters: RtmpServerStateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RtmpServerStateResponse>>;
    /**
     * State of rtmp servers
     */
    rtmpServerStateV1(requestParameters: RtmpServerStateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RtmpServerStateResponse>;
    /**
     * State of rtmp servers
     */
    rtmpServerUpV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * State of rtmp servers
     */
    rtmpServerUpV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
}
/**
 * @export
 */
export declare const MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum = typeof MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum[keyof typeof MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum];
/**
 * @export
 */
export declare const MethodRtmpServerListLocationsUnauthorizedV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type MethodRtmpServerListLocationsUnauthorizedV1VEnum = typeof MethodRtmpServerListLocationsUnauthorizedV1VEnum[keyof typeof MethodRtmpServerListLocationsUnauthorizedV1VEnum];
/**
 * @export
 */
export declare const RtmpServerGraphV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type RtmpServerGraphV1LanguageEnum = typeof RtmpServerGraphV1LanguageEnum[keyof typeof RtmpServerGraphV1LanguageEnum];
/**
 * @export
 */
export declare const RtmpServerGraphV1IntervalEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_3: 3;
    readonly NUMBER_6: 6;
    readonly NUMBER_12: 12;
    readonly NUMBER_24: 24;
};
export type RtmpServerGraphV1IntervalEnum = typeof RtmpServerGraphV1IntervalEnum[keyof typeof RtmpServerGraphV1IntervalEnum];
/**
 * @export
 */
export declare const RtmpServerGraphV1TypeEnum: {
    readonly performance: "performance";
    readonly network: "network";
    readonly cpu: "cpu";
    readonly ram: "ram";
    readonly deliveredPackages: "deliveredPackages";
};
export type RtmpServerGraphV1TypeEnum = typeof RtmpServerGraphV1TypeEnum[keyof typeof RtmpServerGraphV1TypeEnum];
/**
 * @export
 */
export declare const RtmpServerGraphV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type RtmpServerGraphV1VEnum = typeof RtmpServerGraphV1VEnum[keyof typeof RtmpServerGraphV1VEnum];
/**
 * @export
 */
export declare const RtmpServerListV2LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type RtmpServerListV2LanguageEnum = typeof RtmpServerListV2LanguageEnum[keyof typeof RtmpServerListV2LanguageEnum];
/**
 * @export
 */
export declare const RtmpServerListV2IntervalEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_3: 3;
    readonly NUMBER_6: 6;
    readonly NUMBER_12: 12;
    readonly NUMBER_24: 24;
};
export type RtmpServerListV2IntervalEnum = typeof RtmpServerListV2IntervalEnum[keyof typeof RtmpServerListV2IntervalEnum];
/**
 * @export
 */
export declare const RtmpServerListV2VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type RtmpServerListV2VEnum = typeof RtmpServerListV2VEnum[keyof typeof RtmpServerListV2VEnum];
/**
 * @export
 */
export declare const RtmpServerStateV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type RtmpServerStateV1LanguageEnum = typeof RtmpServerStateV1LanguageEnum[keyof typeof RtmpServerStateV1LanguageEnum];
/**
 * @export
 */
export declare const RtmpServerStateV1IntervalEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_3: 3;
    readonly NUMBER_6: 6;
    readonly NUMBER_12: 12;
    readonly NUMBER_24: 24;
};
export type RtmpServerStateV1IntervalEnum = typeof RtmpServerStateV1IntervalEnum[keyof typeof RtmpServerStateV1IntervalEnum];
/**
 * @export
 */
export declare const RtmpServerStateV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type RtmpServerStateV1VEnum = typeof RtmpServerStateV1VEnum[keyof typeof RtmpServerStateV1VEnum];
//# sourceMappingURL=RtmpServerApi.d.ts.map