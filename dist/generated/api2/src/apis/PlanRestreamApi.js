"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlanRestreamTariffV1VEnum = exports.PlanRestreamTariffV1LanguageEnum = exports.PlanRestreamRemoveV1VEnum = exports.PlanRestreamRemoveV1LanguageEnum = exports.PlanRestreamListV1VEnum = exports.PlanRestreamListV1LanguageEnum = exports.PlanRestreamListProjectV1VEnum = exports.PlanRestreamListProjectV1LanguageEnum = exports.PlanRestreamGetDiscountV1VEnum = exports.PlanRestreamGetDiscountV1LanguageEnum = exports.PlanRestreamCheck2V1VEnum = exports.PlanRestreamCheck2V1PeriodEnum = exports.PlanRestreamCheck2V1LanguageEnum = exports.PlanRestreamBuyV1VEnum = exports.PlanRestreamBuyV1PeriodEnum = exports.PlanRestreamBuyV1LanguageEnum = exports.PlanRestreamApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class PlanRestreamApi extends runtime.BaseAPI {
    /**
     * Buy restream tariff
     */
    async planRestreamBuyV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling planRestreamBuyV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling planRestreamBuyV1().');
        }
        if (requestParameters['period'] == null) {
            throw new runtime.RequiredError('period', 'Required parameter "period" was null or undefined when calling planRestreamBuyV1().');
        }
        if (requestParameters['planRestreamId'] == null) {
            throw new runtime.RequiredError('planRestreamId', 'Required parameter "planRestreamId" was null or undefined when calling planRestreamBuyV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }
        if (requestParameters['planRestreamId'] != null) {
            queryParameters['plan_restream_id'] = requestParameters['planRestreamId'];
        }
        if (requestParameters['countChannel'] != null) {
            queryParameters['count_channel'] = requestParameters['countChannel'];
        }
        if (requestParameters['bitrate'] != null) {
            queryParameters['bitrate'] = requestParameters['bitrate'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/plan_restream`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Buy restream tariff
     */
    async planRestreamBuyV1(requestParameters, initOverrides) {
        const response = await this.planRestreamBuyV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Load data for show card the tariffs v2
     */
    async planRestreamCheck2V1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling planRestreamCheck2V1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling planRestreamCheck2V1().');
        }
        if (requestParameters['period'] == null) {
            throw new runtime.RequiredError('period', 'Required parameter "period" was null or undefined when calling planRestreamCheck2V1().');
        }
        if (requestParameters['planRestreamId'] == null) {
            throw new runtime.RequiredError('planRestreamId', 'Required parameter "planRestreamId" was null or undefined when calling planRestreamCheck2V1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }
        if (requestParameters['planRestreamId'] != null) {
            queryParameters['plan_restream_id'] = requestParameters['planRestreamId'];
        }
        if (requestParameters['useBalance'] != null) {
            queryParameters['use_balance'] = requestParameters['useBalance'];
        }
        if (requestParameters['channels'] != null) {
            queryParameters['channels'] = requestParameters['channels'];
        }
        if (requestParameters['bitrate'] != null) {
            queryParameters['bitrate'] = requestParameters['bitrate'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/plan_restream/check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PlanRestreamCheckV2ResponseFromJSON)(jsonValue));
    }
    /**
     * Load data for show card the tariffs v2
     */
    async planRestreamCheck2V1(requestParameters, initOverrides) {
        const response = await this.planRestreamCheck2V1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get discount restream
     */
    async planRestreamGetDiscountV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling planRestreamGetDiscountV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/plan_restream/get_discount`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PlanRestreamDiscountResponseFromJSON)(jsonValue));
    }
    /**
     * Get discount restream
     */
    async planRestreamGetDiscountV1(requestParameters, initOverrides) {
        const response = await this.planRestreamGetDiscountV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get list of restream tariffs for project
     */
    async planRestreamListProjectV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling planRestreamListProjectV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling planRestreamListProjectV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/plan_restream/list/project`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PlanRestreamProjectResponseDtoFromJSON)(jsonValue));
    }
    /**
     * Get list of restream tariffs for project
     */
    async planRestreamListProjectV1(requestParameters, initOverrides) {
        const response = await this.planRestreamListProjectV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get list of restream tariffs
     */
    async planRestreamListV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling planRestreamListV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/plan_restream/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PlanRestreamResponseDtoFromJSON)(jsonValue));
    }
    /**
     * Get list of restream tariffs
     */
    async planRestreamListV1(requestParameters, initOverrides) {
        const response = await this.planRestreamListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Remove after tariff
     */
    async planRestreamRemoveV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling planRestreamRemoveV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling planRestreamRemoveV1().');
        }
        if (requestParameters['planRestreamId'] == null) {
            throw new runtime.RequiredError('planRestreamId', 'Required parameter "planRestreamId" was null or undefined when calling planRestreamRemoveV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        if (requestParameters['planRestreamId'] != null) {
            queryParameters['plan_restream_id'] = requestParameters['planRestreamId'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/plan_restream`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Remove after tariff
     */
    async planRestreamRemoveV1(requestParameters, initOverrides) {
        const response = await this.planRestreamRemoveV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get tariff for project
     */
    async planRestreamTariffV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling planRestreamTariffV1().');
        }
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling planRestreamTariffV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/plan_restream`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PlanRestreamForProjectFromJSON)(jsonValue));
    }
    /**
     * Get tariff for project
     */
    async planRestreamTariffV1(requestParameters, initOverrides) {
        const response = await this.planRestreamTariffV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.PlanRestreamApi = PlanRestreamApi;
/**
 * @export
 */
exports.PlanRestreamBuyV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanRestreamBuyV1PeriodEnum = {
    Month: 'month',
    Year: 'year'
};
/**
 * @export
 */
exports.PlanRestreamBuyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanRestreamCheck2V1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanRestreamCheck2V1PeriodEnum = {
    Month: 'month',
    Year: 'year'
};
/**
 * @export
 */
exports.PlanRestreamCheck2V1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanRestreamGetDiscountV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanRestreamGetDiscountV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanRestreamListProjectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanRestreamListProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanRestreamListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanRestreamListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanRestreamRemoveV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanRestreamRemoveV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanRestreamTariffV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanRestreamTariffV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
