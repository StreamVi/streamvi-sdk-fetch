/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { PlanStorageCheckResponse, PlanStorageDiscountResponse, PlanStorageForProject, PlanStorageResponseDto, SuccessResponse } from '../models/index';
export interface PlanStorageBuyV1Request {
    language: PlanStorageBuyV1LanguageEnum;
    project_id: number;
    period: PlanStorageBuyV1PeriodEnum;
    plan_storage_id: number;
    v?: PlanStorageBuyV1VEnum;
    size?: number;
}
export interface PlanStorageCancelV1Request {
    language: PlanStorageCancelV1LanguageEnum;
    project_id: number;
    v?: PlanStorageCancelV1VEnum;
}
export interface PlanStorageCheckV1Request {
    language: PlanStorageCheckV1LanguageEnum;
    project_id: number;
    v?: PlanStorageCheckV1VEnum;
}
export interface PlanStorageGetDiscountV1Request {
    language: PlanStorageGetDiscountV1LanguageEnum;
    v?: PlanStorageGetDiscountV1VEnum;
}
export interface PlanStorageListV1Request {
    language: PlanStorageListV1LanguageEnum;
    v?: PlanStorageListV1VEnum;
}
export interface PlanStorageTariffV1Request {
    language: PlanStorageTariffV1LanguageEnum;
    project_id: number;
    v?: PlanStorageTariffV1VEnum;
}
/**
 * PlanStorageApi - interface
 *
 * @export
 * @interface PlanStorageApiInterface
 */
export interface PlanStorageApiInterface {
    /**
     *
     * @summary Buy storage tariff
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'month' | 'year'} period Period
     * @param {number} plan_storage_id Storage plan id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [size] Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageBuyV1Raw(requestParameters: PlanStorageBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Buy storage tariff
     */
    planStorageBuyV1(requestParameters: PlanStorageBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Remove next tariff
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageCancelV1Raw(requestParameters: PlanStorageCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Remove next tariff
     */
    planStorageCancelV1(requestParameters: PlanStorageCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Check storage tariff before buy
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageCheckV1Raw(requestParameters: PlanStorageCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageCheckResponse>>;
    /**
     * Check storage tariff before buy
     */
    planStorageCheckV1(requestParameters: PlanStorageCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageCheckResponse>;
    /**
     *
     * @summary Get discount of storage
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageGetDiscountV1Raw(requestParameters: PlanStorageGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageDiscountResponse>>;
    /**
     * Get discount of storage
     */
    planStorageGetDiscountV1(requestParameters: PlanStorageGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageDiscountResponse>;
    /**
     *
     * @summary Get info for storage tariff
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageListV1Raw(requestParameters: PlanStorageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageResponseDto>>;
    /**
     * Get info for storage tariff
     */
    planStorageListV1(requestParameters: PlanStorageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageResponseDto>;
    /**
     *
     * @summary Get tariff for project
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageTariffV1Raw(requestParameters: PlanStorageTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageForProject>>;
    /**
     * Get tariff for project
     */
    planStorageTariffV1(requestParameters: PlanStorageTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageForProject>;
}
/**
 *
 */
export declare class PlanStorageApi extends runtime.BaseAPI implements PlanStorageApiInterface {
    /**
     * Buy storage tariff
     */
    planStorageBuyV1Raw(requestParameters: PlanStorageBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Buy storage tariff
     */
    planStorageBuyV1(requestParameters: PlanStorageBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Remove next tariff
     */
    planStorageCancelV1Raw(requestParameters: PlanStorageCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Remove next tariff
     */
    planStorageCancelV1(requestParameters: PlanStorageCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Check storage tariff before buy
     */
    planStorageCheckV1Raw(requestParameters: PlanStorageCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageCheckResponse>>;
    /**
     * Check storage tariff before buy
     */
    planStorageCheckV1(requestParameters: PlanStorageCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageCheckResponse>;
    /**
     * Get discount of storage
     */
    planStorageGetDiscountV1Raw(requestParameters: PlanStorageGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageDiscountResponse>>;
    /**
     * Get discount of storage
     */
    planStorageGetDiscountV1(requestParameters: PlanStorageGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageDiscountResponse>;
    /**
     * Get info for storage tariff
     */
    planStorageListV1Raw(requestParameters: PlanStorageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageResponseDto>>;
    /**
     * Get info for storage tariff
     */
    planStorageListV1(requestParameters: PlanStorageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageResponseDto>;
    /**
     * Get tariff for project
     */
    planStorageTariffV1Raw(requestParameters: PlanStorageTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageForProject>>;
    /**
     * Get tariff for project
     */
    planStorageTariffV1(requestParameters: PlanStorageTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageForProject>;
}
/**
 * @export
 */
export declare const PlanStorageBuyV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type PlanStorageBuyV1LanguageEnum = typeof PlanStorageBuyV1LanguageEnum[keyof typeof PlanStorageBuyV1LanguageEnum];
/**
 * @export
 */
export declare const PlanStorageBuyV1PeriodEnum: {
    readonly month: "month";
    readonly year: "year";
};
export type PlanStorageBuyV1PeriodEnum = typeof PlanStorageBuyV1PeriodEnum[keyof typeof PlanStorageBuyV1PeriodEnum];
/**
 * @export
 */
export declare const PlanStorageBuyV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanStorageBuyV1VEnum = typeof PlanStorageBuyV1VEnum[keyof typeof PlanStorageBuyV1VEnum];
/**
 * @export
 */
export declare const PlanStorageCancelV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type PlanStorageCancelV1LanguageEnum = typeof PlanStorageCancelV1LanguageEnum[keyof typeof PlanStorageCancelV1LanguageEnum];
/**
 * @export
 */
export declare const PlanStorageCancelV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanStorageCancelV1VEnum = typeof PlanStorageCancelV1VEnum[keyof typeof PlanStorageCancelV1VEnum];
/**
 * @export
 */
export declare const PlanStorageCheckV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type PlanStorageCheckV1LanguageEnum = typeof PlanStorageCheckV1LanguageEnum[keyof typeof PlanStorageCheckV1LanguageEnum];
/**
 * @export
 */
export declare const PlanStorageCheckV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanStorageCheckV1VEnum = typeof PlanStorageCheckV1VEnum[keyof typeof PlanStorageCheckV1VEnum];
/**
 * @export
 */
export declare const PlanStorageGetDiscountV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type PlanStorageGetDiscountV1LanguageEnum = typeof PlanStorageGetDiscountV1LanguageEnum[keyof typeof PlanStorageGetDiscountV1LanguageEnum];
/**
 * @export
 */
export declare const PlanStorageGetDiscountV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanStorageGetDiscountV1VEnum = typeof PlanStorageGetDiscountV1VEnum[keyof typeof PlanStorageGetDiscountV1VEnum];
/**
 * @export
 */
export declare const PlanStorageListV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type PlanStorageListV1LanguageEnum = typeof PlanStorageListV1LanguageEnum[keyof typeof PlanStorageListV1LanguageEnum];
/**
 * @export
 */
export declare const PlanStorageListV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanStorageListV1VEnum = typeof PlanStorageListV1VEnum[keyof typeof PlanStorageListV1VEnum];
/**
 * @export
 */
export declare const PlanStorageTariffV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type PlanStorageTariffV1LanguageEnum = typeof PlanStorageTariffV1LanguageEnum[keyof typeof PlanStorageTariffV1LanguageEnum];
/**
 * @export
 */
export declare const PlanStorageTariffV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanStorageTariffV1VEnum = typeof PlanStorageTariffV1VEnum[keyof typeof PlanStorageTariffV1VEnum];
//# sourceMappingURL=PlanStorageApi.d.ts.map