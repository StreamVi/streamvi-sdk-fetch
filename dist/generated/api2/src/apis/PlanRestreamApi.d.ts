/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { PlanRestreamCheckV2Response, PlanRestreamDiscountResponse, PlanRestreamForProject, PlanRestreamProjectResponseDto, PlanRestreamResponseDto, SuccessResponse } from '../models/index';
export interface PlanRestreamBuyV1Request {
    language: PlanRestreamBuyV1LanguageEnum;
    projectId: number;
    period: PlanRestreamBuyV1PeriodEnum;
    planRestreamId: number;
    v?: PlanRestreamBuyV1VEnum;
    countChannel?: number;
    bitrate?: number;
}
export interface PlanRestreamCheck2V1Request {
    language: PlanRestreamCheck2V1LanguageEnum;
    projectId: number;
    period: PlanRestreamCheck2V1PeriodEnum;
    planRestreamId: number;
    v?: PlanRestreamCheck2V1VEnum;
    useBalance?: number;
    channels?: number;
    bitrate?: number;
}
export interface PlanRestreamGetDiscountV1Request {
    language: PlanRestreamGetDiscountV1LanguageEnum;
    v?: PlanRestreamGetDiscountV1VEnum;
}
export interface PlanRestreamListProjectV1Request {
    language: PlanRestreamListProjectV1LanguageEnum;
    projectId: number;
    v?: PlanRestreamListProjectV1VEnum;
}
export interface PlanRestreamListV1Request {
    language: PlanRestreamListV1LanguageEnum;
    v?: PlanRestreamListV1VEnum;
}
export interface PlanRestreamRemoveV1Request {
    language: PlanRestreamRemoveV1LanguageEnum;
    projectId: number;
    planRestreamId: number;
    v?: PlanRestreamRemoveV1VEnum;
}
export interface PlanRestreamTariffV1Request {
    language: PlanRestreamTariffV1LanguageEnum;
    projectId: number;
    v?: PlanRestreamTariffV1VEnum;
}
/**
 * PlanRestreamApi - interface
 *
 * @export
 * @interface PlanRestreamApiInterface
 */
export interface PlanRestreamApiInterface {
    /**
     *
     * @summary Buy restream tariff
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} projectId Project id
     * @param {'month' | 'year'} period Period
     * @param {number} planRestreamId Restream plan id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [countChannel] Channel count
     * @param {number} [bitrate] Bitrate, kbps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamBuyV1Raw(requestParameters: PlanRestreamBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Buy restream tariff
     */
    planRestreamBuyV1(requestParameters: PlanRestreamBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Load data for show card the tariffs v2
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} projectId Project id
     * @param {'month' | 'year'} period Period
     * @param {number} planRestreamId Restream plan id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [useBalance] Is select balance
     * @param {number} [channels] Channels count
     * @param {number} [bitrate] Bitrate, kbps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamCheck2V1Raw(requestParameters: PlanRestreamCheck2V1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamCheckV2Response>>;
    /**
     * Load data for show card the tariffs v2
     */
    planRestreamCheck2V1(requestParameters: PlanRestreamCheck2V1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamCheckV2Response>;
    /**
     *
     * @summary Get discount restream
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamGetDiscountV1Raw(requestParameters: PlanRestreamGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamDiscountResponse>>;
    /**
     * Get discount restream
     */
    planRestreamGetDiscountV1(requestParameters: PlanRestreamGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamDiscountResponse>;
    /**
     *
     * @summary Get list of restream tariffs for project
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} projectId Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamListProjectV1Raw(requestParameters: PlanRestreamListProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamProjectResponseDto>>;
    /**
     * Get list of restream tariffs for project
     */
    planRestreamListProjectV1(requestParameters: PlanRestreamListProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamProjectResponseDto>;
    /**
     *
     * @summary Get list of restream tariffs
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamListV1Raw(requestParameters: PlanRestreamListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamResponseDto>>;
    /**
     * Get list of restream tariffs
     */
    planRestreamListV1(requestParameters: PlanRestreamListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamResponseDto>;
    /**
     *
     * @summary Remove after tariff
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} projectId Project id
     * @param {number} planRestreamId Restream plan id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamRemoveV1Raw(requestParameters: PlanRestreamRemoveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Remove after tariff
     */
    planRestreamRemoveV1(requestParameters: PlanRestreamRemoveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Get tariff for project
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} projectId Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamTariffV1Raw(requestParameters: PlanRestreamTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamForProject>>;
    /**
     * Get tariff for project
     */
    planRestreamTariffV1(requestParameters: PlanRestreamTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamForProject>;
}
/**
 *
 */
export declare class PlanRestreamApi extends runtime.BaseAPI implements PlanRestreamApiInterface {
    /**
     * Buy restream tariff
     */
    planRestreamBuyV1Raw(requestParameters: PlanRestreamBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Buy restream tariff
     */
    planRestreamBuyV1(requestParameters: PlanRestreamBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Load data for show card the tariffs v2
     */
    planRestreamCheck2V1Raw(requestParameters: PlanRestreamCheck2V1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamCheckV2Response>>;
    /**
     * Load data for show card the tariffs v2
     */
    planRestreamCheck2V1(requestParameters: PlanRestreamCheck2V1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamCheckV2Response>;
    /**
     * Get discount restream
     */
    planRestreamGetDiscountV1Raw(requestParameters: PlanRestreamGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamDiscountResponse>>;
    /**
     * Get discount restream
     */
    planRestreamGetDiscountV1(requestParameters: PlanRestreamGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamDiscountResponse>;
    /**
     * Get list of restream tariffs for project
     */
    planRestreamListProjectV1Raw(requestParameters: PlanRestreamListProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamProjectResponseDto>>;
    /**
     * Get list of restream tariffs for project
     */
    planRestreamListProjectV1(requestParameters: PlanRestreamListProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamProjectResponseDto>;
    /**
     * Get list of restream tariffs
     */
    planRestreamListV1Raw(requestParameters: PlanRestreamListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamResponseDto>>;
    /**
     * Get list of restream tariffs
     */
    planRestreamListV1(requestParameters: PlanRestreamListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamResponseDto>;
    /**
     * Remove after tariff
     */
    planRestreamRemoveV1Raw(requestParameters: PlanRestreamRemoveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Remove after tariff
     */
    planRestreamRemoveV1(requestParameters: PlanRestreamRemoveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Get tariff for project
     */
    planRestreamTariffV1Raw(requestParameters: PlanRestreamTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamForProject>>;
    /**
     * Get tariff for project
     */
    planRestreamTariffV1(requestParameters: PlanRestreamTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamForProject>;
}
/**
 * @export
 */
export declare const PlanRestreamBuyV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanRestreamBuyV1LanguageEnum = typeof PlanRestreamBuyV1LanguageEnum[keyof typeof PlanRestreamBuyV1LanguageEnum];
/**
 * @export
 */
export declare const PlanRestreamBuyV1PeriodEnum: {
    readonly Month: "month";
    readonly Year: "year";
};
export type PlanRestreamBuyV1PeriodEnum = typeof PlanRestreamBuyV1PeriodEnum[keyof typeof PlanRestreamBuyV1PeriodEnum];
/**
 * @export
 */
export declare const PlanRestreamBuyV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanRestreamBuyV1VEnum = typeof PlanRestreamBuyV1VEnum[keyof typeof PlanRestreamBuyV1VEnum];
/**
 * @export
 */
export declare const PlanRestreamCheck2V1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanRestreamCheck2V1LanguageEnum = typeof PlanRestreamCheck2V1LanguageEnum[keyof typeof PlanRestreamCheck2V1LanguageEnum];
/**
 * @export
 */
export declare const PlanRestreamCheck2V1PeriodEnum: {
    readonly Month: "month";
    readonly Year: "year";
};
export type PlanRestreamCheck2V1PeriodEnum = typeof PlanRestreamCheck2V1PeriodEnum[keyof typeof PlanRestreamCheck2V1PeriodEnum];
/**
 * @export
 */
export declare const PlanRestreamCheck2V1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanRestreamCheck2V1VEnum = typeof PlanRestreamCheck2V1VEnum[keyof typeof PlanRestreamCheck2V1VEnum];
/**
 * @export
 */
export declare const PlanRestreamGetDiscountV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanRestreamGetDiscountV1LanguageEnum = typeof PlanRestreamGetDiscountV1LanguageEnum[keyof typeof PlanRestreamGetDiscountV1LanguageEnum];
/**
 * @export
 */
export declare const PlanRestreamGetDiscountV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanRestreamGetDiscountV1VEnum = typeof PlanRestreamGetDiscountV1VEnum[keyof typeof PlanRestreamGetDiscountV1VEnum];
/**
 * @export
 */
export declare const PlanRestreamListProjectV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanRestreamListProjectV1LanguageEnum = typeof PlanRestreamListProjectV1LanguageEnum[keyof typeof PlanRestreamListProjectV1LanguageEnum];
/**
 * @export
 */
export declare const PlanRestreamListProjectV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanRestreamListProjectV1VEnum = typeof PlanRestreamListProjectV1VEnum[keyof typeof PlanRestreamListProjectV1VEnum];
/**
 * @export
 */
export declare const PlanRestreamListV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanRestreamListV1LanguageEnum = typeof PlanRestreamListV1LanguageEnum[keyof typeof PlanRestreamListV1LanguageEnum];
/**
 * @export
 */
export declare const PlanRestreamListV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanRestreamListV1VEnum = typeof PlanRestreamListV1VEnum[keyof typeof PlanRestreamListV1VEnum];
/**
 * @export
 */
export declare const PlanRestreamRemoveV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanRestreamRemoveV1LanguageEnum = typeof PlanRestreamRemoveV1LanguageEnum[keyof typeof PlanRestreamRemoveV1LanguageEnum];
/**
 * @export
 */
export declare const PlanRestreamRemoveV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanRestreamRemoveV1VEnum = typeof PlanRestreamRemoveV1VEnum[keyof typeof PlanRestreamRemoveV1VEnum];
/**
 * @export
 */
export declare const PlanRestreamTariffV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanRestreamTariffV1LanguageEnum = typeof PlanRestreamTariffV1LanguageEnum[keyof typeof PlanRestreamTariffV1LanguageEnum];
/**
 * @export
 */
export declare const PlanRestreamTariffV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanRestreamTariffV1VEnum = typeof PlanRestreamTariffV1VEnum[keyof typeof PlanRestreamTariffV1VEnum];
//# sourceMappingURL=PlanRestreamApi.d.ts.map