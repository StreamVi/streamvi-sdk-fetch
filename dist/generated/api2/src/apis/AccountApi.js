"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountUpdateProfileV1LanguageEnum = exports.AccountUpdateProfileV1VEnum = exports.AccountGetProfileV1VEnum = exports.AccountGetProfileV1LanguageEnum = exports.AccountApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class AccountApi extends runtime.BaseAPI {
    /**
     * Get account profile
     */
    async accountGetProfileV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling accountGetProfileV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/account/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UserProfileResponseFromJSON)(jsonValue));
    }
    /**
     * Get account profile
     */
    async accountGetProfileV1(requestParameters, initOverrides) {
        const response = await this.accountGetProfileV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update account profile
     */
    async accountUpdateProfileV1Raw(requestParameters, initOverrides) {
        if (requestParameters['v'] == null) {
            throw new runtime.RequiredError('v', 'Required parameter "v" was null or undefined when calling accountUpdateProfileV1().');
        }
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling accountUpdateProfileV1().');
        }
        if (requestParameters['first_name'] == null) {
            throw new runtime.RequiredError('first_name', 'Required parameter "first_name" was null or undefined when calling accountUpdateProfileV1().');
        }
        if (requestParameters['last_name'] == null) {
            throw new runtime.RequiredError('last_name', 'Required parameter "last_name" was null or undefined when calling accountUpdateProfileV1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const consumes = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new URLSearchParams();
        }
        if (requestParameters['v'] != null) {
            formParams.append('v', requestParameters['v']);
        }
        else {
            formParams.append('v', '1');
        }
        if (requestParameters['language'] != null) {
            formParams.append('language', requestParameters['language']);
        }
        if (requestParameters['first_name'] != null) {
            formParams.append('first_name', requestParameters['first_name']);
        }
        if (requestParameters['last_name'] != null) {
            formParams.append('last_name', requestParameters['last_name']);
        }
        if (requestParameters['avatar'] != null) {
            formParams.append('avatar', requestParameters['avatar']);
        }
        const response = await this.request({
            path: `/method/account/profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Update account profile
     */
    async accountUpdateProfileV1(requestParameters, initOverrides) {
        const response = await this.accountUpdateProfileV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.AccountApi = AccountApi;
/**
 * @export
 */
exports.AccountGetProfileV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.AccountGetProfileV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AccountUpdateProfileV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AccountUpdateProfileV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
