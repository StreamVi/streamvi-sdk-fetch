"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthGetAuthUrlV1AppEnum = exports.AuthGetAuthUrlV1VEnum = exports.AuthGetAuthUrlV1ProviderEnum = exports.AuthGetAuthUrlV1LanguageEnum = exports.AuthDisconnectV1VEnum = exports.AuthDisconnectV1LanguageEnum = exports.AuthConnectV1AppEnum = exports.AuthConnectV1VEnum = exports.AuthConnectV1ProviderEnum = exports.AuthConnectV1LanguageEnum = exports.AuthConnectTelegramV1VEnum = exports.AuthConnectTelegramV1LanguageEnum = exports.AuthConnectResultV1VEnum = exports.AuthConnectResultV1LanguageEnum = exports.AuthCodeV1VEnum = exports.AuthCodeV1AppEnum = exports.AuthCodeV1LanguageEnum = exports.AuthApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class AuthApi extends runtime.BaseAPI {
    /**
     * Internal request of auth google
     */
    async authCallbackGoogleV1Raw(requestParameters, initOverrides) {
        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError('state', 'Required parameter "state" was null or undefined when calling authCallbackGoogleV1().');
        }
        const queryParameters = {};
        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/auth/callback/google`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Internal request of auth google
     */
    async authCallbackGoogleV1(requestParameters, initOverrides) {
        await this.authCallbackGoogleV1Raw(requestParameters, initOverrides);
    }
    /**
     * Internal request of auth new vk
     */
    async authCallbackVkIdV1Raw(requestParameters, initOverrides) {
        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError('state', 'Required parameter "state" was null or undefined when calling authCallbackVkIdV1().');
        }
        const queryParameters = {};
        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/auth/callback/vk-id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Internal request of auth new vk
     */
    async authCallbackVkIdV1(requestParameters, initOverrides) {
        await this.authCallbackVkIdV1Raw(requestParameters, initOverrides);
    }
    /**
     * Internal request of auth old vk
     */
    async authCallbackVkV1Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/method/auth/callback/vk`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Internal request of auth old vk
     */
    async authCallbackVkV1(initOverrides) {
        await this.authCallbackVkV1Raw(initOverrides);
    }
    /**
     * Get code for auth
     */
    async authCodeV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling authCodeV1().');
        }
        if (requestParameters['app'] == null) {
            throw new runtime.RequiredError('app', 'Required parameter "app" was null or undefined when calling authCodeV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['app'] != null) {
            queryParameters['app'] = requestParameters['app'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/auth/app/code`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CodeAppAuthResponseFromJSON)(jsonValue));
    }
    /**
     * Get code for auth
     */
    async authCodeV1(requestParameters, initOverrides) {
        const response = await this.authCodeV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * CallBack for connect social
     */
    async authConnectResultV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling authConnectResultV1().');
        }
        if (requestParameters['message'] == null) {
            throw new runtime.RequiredError('message', 'Required parameter "message" was null or undefined when calling authConnectResultV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['message'] != null) {
            queryParameters['message'] = requestParameters['message'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/auth/connect/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * CallBack for connect social
     */
    async authConnectResultV1(requestParameters, initOverrides) {
        await this.authConnectResultV1Raw(requestParameters, initOverrides);
    }
    /**
     * Connect telegram in account
     */
    async authConnectTelegramV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling authConnectTelegramV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/auth/connect-telegram`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Connect telegram in account
     */
    async authConnectTelegramV1(requestParameters, initOverrides) {
        const response = await this.authConnectTelegramV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Connected social account
     */
    async authConnectV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling authConnectV1().');
        }
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError('provider', 'Required parameter "provider" was null or undefined when calling authConnectV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['provider'] != null) {
            queryParameters['provider'] = requestParameters['provider'];
        }
        if (requestParameters['app'] != null) {
            queryParameters['app'] = requestParameters['app'];
        }
        if (requestParameters['redirect'] != null) {
            queryParameters['redirect'] = requestParameters['redirect'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/auth/connect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Connected social account
     */
    async authConnectV1(requestParameters, initOverrides) {
        await this.authConnectV1Raw(requestParameters, initOverrides);
    }
    /**
     * Disconnected social account
     */
    async authDisconnectV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling authDisconnectV1().');
        }
        if (requestParameters['social_id'] == null) {
            throw new runtime.RequiredError('social_id', 'Required parameter "social_id" was null or undefined when calling authDisconnectV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['social_id'] != null) {
            queryParameters['social_id'] = requestParameters['social_id'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/auth/disconnect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Disconnected social account
     */
    async authDisconnectV1(requestParameters, initOverrides) {
        const response = await this.authDisconnectV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Code exchange
     */
    async authExchangeV1Raw(requestParameters, initOverrides) {
        if (requestParameters['SiteAuthExchangeRequest'] == null) {
            throw new runtime.RequiredError('SiteAuthExchangeRequest', 'Required parameter "SiteAuthExchangeRequest" was null or undefined when calling authExchangeV1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/method/auth/app/exchange`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SiteAuthExchangeRequestToJSON)(requestParameters['SiteAuthExchangeRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RefreshAuthResponseFromJSON)(jsonValue));
    }
    /**
     * Code exchange
     */
    async authExchangeV1(requestParameters, initOverrides) {
        const response = await this.authExchangeV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get url for start oauth
     */
    async authGetAuthUrlV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling authGetAuthUrlV1().');
        }
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError('provider', 'Required parameter "provider" was null or undefined when calling authGetAuthUrlV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['provider'] != null) {
            queryParameters['provider'] = requestParameters['provider'];
        }
        if (requestParameters['app'] != null) {
            queryParameters['app'] = requestParameters['app'];
        }
        if (requestParameters['redirect'] != null) {
            queryParameters['redirect'] = requestParameters['redirect'];
        }
        if (requestParameters['refId'] != null) {
            queryParameters['refId'] = requestParameters['refId'];
        }
        if (requestParameters['country'] != null) {
            queryParameters['country'] = requestParameters['country'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/auth/redirect-url`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Get url for start oauth
     */
    async authGetAuthUrlV1(requestParameters, initOverrides) {
        await this.authGetAuthUrlV1Raw(requestParameters, initOverrides);
    }
}
exports.AuthApi = AuthApi;
/**
 * @export
 */
exports.AuthCodeV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.AuthCodeV1AppEnum = {
    site: 'site',
    admin: 'admin',
    mobile: 'mobile',
    desktop: 'desktop'
};
/**
 * @export
 */
exports.AuthCodeV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AuthConnectResultV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.AuthConnectResultV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AuthConnectTelegramV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.AuthConnectTelegramV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AuthConnectV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.AuthConnectV1ProviderEnum = {
    google: 'google',
    vk: 'vk',
    vk_id: 'vk-id',
    telegram: 'telegram'
};
/**
 * @export
 */
exports.AuthConnectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AuthConnectV1AppEnum = {
    site: 'site',
    admin: 'admin',
    mobile: 'mobile',
    desktop: 'desktop'
};
/**
 * @export
 */
exports.AuthDisconnectV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.AuthDisconnectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AuthGetAuthUrlV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.AuthGetAuthUrlV1ProviderEnum = {
    google: 'google',
    vk: 'vk',
    vk_id: 'vk-id',
    telegram: 'telegram'
};
/**
 * @export
 */
exports.AuthGetAuthUrlV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AuthGetAuthUrlV1AppEnum = {
    site: 'site',
    admin: 'admin',
    mobile: 'mobile',
    desktop: 'desktop'
};
