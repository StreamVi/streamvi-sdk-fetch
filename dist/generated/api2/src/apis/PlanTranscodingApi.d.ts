/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { PlanTranscodingCheckResponse, PlanTranscodingDiscountResponse, PlanTranscodingForProject, PlanTranscodingResponseDto, SuccessResponse } from '../models/index';
export interface PlanTranscodingBuyV1Request {
    language: PlanTranscodingBuyV1LanguageEnum;
    projectId: number;
    period: PlanTranscodingBuyV1PeriodEnum;
    planTranscodingId: number;
    v?: PlanTranscodingBuyV1VEnum;
    count?: number;
}
export interface PlanTranscodingCancelV1Request {
    language: PlanTranscodingCancelV1LanguageEnum;
    projectId: number;
    v?: PlanTranscodingCancelV1VEnum;
}
export interface PlanTranscodingCheckV1Request {
    language: PlanTranscodingCheckV1LanguageEnum;
    projectId: number;
    v?: PlanTranscodingCheckV1VEnum;
}
export interface PlanTranscodingGetDiscountV1Request {
    language: PlanTranscodingGetDiscountV1LanguageEnum;
    v?: PlanTranscodingGetDiscountV1VEnum;
}
export interface PlanTranscodingListV1Request {
    language: PlanTranscodingListV1LanguageEnum;
    v?: PlanTranscodingListV1VEnum;
}
export interface PlanTranscodingTariffV1Request {
    language: PlanTranscodingTariffV1LanguageEnum;
    projectId: number;
    v?: PlanTranscodingTariffV1VEnum;
}
/**
 * PlanTranscodingApi - interface
 *
 * @export
 * @interface PlanTranscodingApiInterface
 */
export interface PlanTranscodingApiInterface {
    /**
     *
     * @summary Buy transcoder tariff
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} projectId Project id
     * @param {'month' | 'year'} period Period
     * @param {number} planTranscodingId Transcoding plan id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [count] Count flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingBuyV1Raw(requestParameters: PlanTranscodingBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Buy transcoder tariff
     */
    planTranscodingBuyV1(requestParameters: PlanTranscodingBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Remove after tariff
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} projectId Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingCancelV1Raw(requestParameters: PlanTranscodingCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Remove after tariff
     */
    planTranscodingCancelV1(requestParameters: PlanTranscodingCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Check transcoding tariff before buy
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} projectId Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingCheckV1Raw(requestParameters: PlanTranscodingCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingCheckResponse>>;
    /**
     * Check transcoding tariff before buy
     */
    planTranscodingCheckV1(requestParameters: PlanTranscodingCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingCheckResponse>;
    /**
     *
     * @summary Get discount transcoding
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingGetDiscountV1Raw(requestParameters: PlanTranscodingGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingDiscountResponse>>;
    /**
     * Get discount transcoding
     */
    planTranscodingGetDiscountV1(requestParameters: PlanTranscodingGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingDiscountResponse>;
    /**
     *
     * @summary Get list of transcoding tariffs
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingListV1Raw(requestParameters: PlanTranscodingListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingResponseDto>>;
    /**
     * Get list of transcoding tariffs
     */
    planTranscodingListV1(requestParameters: PlanTranscodingListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingResponseDto>;
    /**
     *
     * @summary Get tariff for project
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} projectId Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingTariffV1Raw(requestParameters: PlanTranscodingTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingForProject>>;
    /**
     * Get tariff for project
     */
    planTranscodingTariffV1(requestParameters: PlanTranscodingTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingForProject>;
}
/**
 *
 */
export declare class PlanTranscodingApi extends runtime.BaseAPI implements PlanTranscodingApiInterface {
    /**
     * Buy transcoder tariff
     */
    planTranscodingBuyV1Raw(requestParameters: PlanTranscodingBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Buy transcoder tariff
     */
    planTranscodingBuyV1(requestParameters: PlanTranscodingBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Remove after tariff
     */
    planTranscodingCancelV1Raw(requestParameters: PlanTranscodingCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Remove after tariff
     */
    planTranscodingCancelV1(requestParameters: PlanTranscodingCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Check transcoding tariff before buy
     */
    planTranscodingCheckV1Raw(requestParameters: PlanTranscodingCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingCheckResponse>>;
    /**
     * Check transcoding tariff before buy
     */
    planTranscodingCheckV1(requestParameters: PlanTranscodingCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingCheckResponse>;
    /**
     * Get discount transcoding
     */
    planTranscodingGetDiscountV1Raw(requestParameters: PlanTranscodingGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingDiscountResponse>>;
    /**
     * Get discount transcoding
     */
    planTranscodingGetDiscountV1(requestParameters: PlanTranscodingGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingDiscountResponse>;
    /**
     * Get list of transcoding tariffs
     */
    planTranscodingListV1Raw(requestParameters: PlanTranscodingListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingResponseDto>>;
    /**
     * Get list of transcoding tariffs
     */
    planTranscodingListV1(requestParameters: PlanTranscodingListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingResponseDto>;
    /**
     * Get tariff for project
     */
    planTranscodingTariffV1Raw(requestParameters: PlanTranscodingTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingForProject>>;
    /**
     * Get tariff for project
     */
    planTranscodingTariffV1(requestParameters: PlanTranscodingTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingForProject>;
}
/**
 * @export
 */
export declare const PlanTranscodingBuyV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanTranscodingBuyV1LanguageEnum = typeof PlanTranscodingBuyV1LanguageEnum[keyof typeof PlanTranscodingBuyV1LanguageEnum];
/**
 * @export
 */
export declare const PlanTranscodingBuyV1PeriodEnum: {
    readonly Month: "month";
    readonly Year: "year";
};
export type PlanTranscodingBuyV1PeriodEnum = typeof PlanTranscodingBuyV1PeriodEnum[keyof typeof PlanTranscodingBuyV1PeriodEnum];
/**
 * @export
 */
export declare const PlanTranscodingBuyV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanTranscodingBuyV1VEnum = typeof PlanTranscodingBuyV1VEnum[keyof typeof PlanTranscodingBuyV1VEnum];
/**
 * @export
 */
export declare const PlanTranscodingCancelV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanTranscodingCancelV1LanguageEnum = typeof PlanTranscodingCancelV1LanguageEnum[keyof typeof PlanTranscodingCancelV1LanguageEnum];
/**
 * @export
 */
export declare const PlanTranscodingCancelV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanTranscodingCancelV1VEnum = typeof PlanTranscodingCancelV1VEnum[keyof typeof PlanTranscodingCancelV1VEnum];
/**
 * @export
 */
export declare const PlanTranscodingCheckV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanTranscodingCheckV1LanguageEnum = typeof PlanTranscodingCheckV1LanguageEnum[keyof typeof PlanTranscodingCheckV1LanguageEnum];
/**
 * @export
 */
export declare const PlanTranscodingCheckV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanTranscodingCheckV1VEnum = typeof PlanTranscodingCheckV1VEnum[keyof typeof PlanTranscodingCheckV1VEnum];
/**
 * @export
 */
export declare const PlanTranscodingGetDiscountV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanTranscodingGetDiscountV1LanguageEnum = typeof PlanTranscodingGetDiscountV1LanguageEnum[keyof typeof PlanTranscodingGetDiscountV1LanguageEnum];
/**
 * @export
 */
export declare const PlanTranscodingGetDiscountV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanTranscodingGetDiscountV1VEnum = typeof PlanTranscodingGetDiscountV1VEnum[keyof typeof PlanTranscodingGetDiscountV1VEnum];
/**
 * @export
 */
export declare const PlanTranscodingListV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanTranscodingListV1LanguageEnum = typeof PlanTranscodingListV1LanguageEnum[keyof typeof PlanTranscodingListV1LanguageEnum];
/**
 * @export
 */
export declare const PlanTranscodingListV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanTranscodingListV1VEnum = typeof PlanTranscodingListV1VEnum[keyof typeof PlanTranscodingListV1VEnum];
/**
 * @export
 */
export declare const PlanTranscodingTariffV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanTranscodingTariffV1LanguageEnum = typeof PlanTranscodingTariffV1LanguageEnum[keyof typeof PlanTranscodingTariffV1LanguageEnum];
/**
 * @export
 */
export declare const PlanTranscodingTariffV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanTranscodingTariffV1VEnum = typeof PlanTranscodingTariffV1VEnum[keyof typeof PlanTranscodingTariffV1VEnum];
//# sourceMappingURL=PlanTranscodingApi.d.ts.map