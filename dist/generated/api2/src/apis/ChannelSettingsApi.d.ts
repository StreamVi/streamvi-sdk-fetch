/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ListOfPlaylistItemResponse, ListOfSitePlannedResponse, SiteChannelStatusResponse, SitePlannedResponse, SiteSetNameRequest, SiteSetPlannedRequest, SiteSetTranscoderRequest, SiteSetUrlRequest, SiteUpdateChatTelegramRequest, SiteUpdateOptionsOkRequest, SiteUpdateOptionsTrovoRequest, SiteUpdateOptionsTwitchRequest, SiteUpdateOptionsVkRequest, SiteUpdateOptionsVkVideoLiveRequest, SiteUpdateOptionsYoutubeRequest, SuccessResponse, TelegramChatPostsItem, TelegramChatPostsResponseDto, TelegramInitConnectResponseDto, TelegramSetSettingsRequestDto, TelegramSettingsResponseDto } from '../models/index';
export interface ChannelChatGetTelegramSettingV1Request {
    language: ChannelChatGetTelegramSettingV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ChannelChatGetTelegramSettingV1VEnum;
}
export interface ChannelChatInitTelegramChatConnectV1Request {
    language: ChannelChatInitTelegramChatConnectV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ChannelChatInitTelegramChatConnectV1VEnum;
}
export interface ChannelChatRemoveTelegramChatV1Request {
    language: ChannelChatRemoveTelegramChatV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ChannelChatRemoveTelegramChatV1VEnum;
}
export interface ChannelChatSetTelegramSettingV1Request {
    language: ChannelChatSetTelegramSettingV1LanguageEnum;
    project_id: number;
    channel_id: number;
    TelegramSetSettingsRequestDto: TelegramSetSettingsRequestDto;
    v?: ChannelChatSetTelegramSettingV1VEnum;
}
export interface ChannelChatTelegramPostsV1Request {
    language: ChannelChatTelegramPostsV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ChannelChatTelegramPostsV1VEnum;
}
export interface ChannelChatUpdateOptionsTelegramV1Request {
    SiteUpdateChatTelegramRequest: SiteUpdateChatTelegramRequest;
}
export interface ChannelOptionsGetPlannedV1Request {
    language: ChannelOptionsGetPlannedV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ChannelOptionsGetPlannedV1VEnum;
}
export interface ChannelOptionsGetPlayListV1Request {
    language: ChannelOptionsGetPlayListV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ChannelOptionsGetPlayListV1VEnum;
}
export interface ChannelOptionsUpdateOptionsOkV1Request {
    SiteUpdateOptionsOkRequest: SiteUpdateOptionsOkRequest;
}
export interface ChannelOptionsUpdateOptionsTrovoV1Request {
    SiteUpdateOptionsTrovoRequest: SiteUpdateOptionsTrovoRequest;
}
export interface ChannelOptionsUpdateOptionsTwitchV1Request {
    SiteUpdateOptionsTwitchRequest: SiteUpdateOptionsTwitchRequest;
}
export interface ChannelOptionsUpdateOptionsVkV1Request {
    SiteUpdateOptionsVkRequest: SiteUpdateOptionsVkRequest;
}
export interface ChannelOptionsUpdateOptionsVkVideoLiveV1Request {
    SiteUpdateOptionsVkVideoLiveRequest: SiteUpdateOptionsVkVideoLiveRequest;
}
export interface ChannelOptionsUpdateOptionsYoutubeV1Request {
    SiteUpdateOptionsYoutubeRequest: SiteUpdateOptionsYoutubeRequest;
}
export interface ChannelOptionsUpdatePlannedV1Request {
    SiteSetPlannedRequest: SiteSetPlannedRequest;
}
export interface ChannelSettingSetNameV1Request {
    SiteSetNameRequest: SiteSetNameRequest;
}
export interface ChannelSettingUpdateRtmpV1Request {
    SiteSetUrlRequest: SiteSetUrlRequest;
}
export interface ChannelSettingUpdateTokenV1Request {
    language: ChannelSettingUpdateTokenV1LanguageEnum;
    project_id: number;
    channel_id: number;
    role: ChannelSettingUpdateTokenV1RoleEnum;
    v?: ChannelSettingUpdateTokenV1VEnum;
}
export interface ChannelSettingUpdateTranscoderV1Request {
    SiteSetTranscoderRequest: SiteSetTranscoderRequest;
}
export interface TelegramGetPostByFilterV1Request {
    language: TelegramGetPostByFilterV1LanguageEnum;
    project_id: number;
    channel_id: number;
    filter_mode: number;
    v?: TelegramGetPostByFilterV1VEnum;
}
/**
 * ChannelSettingsApi - interface
 *
 * @export
 * @interface ChannelSettingsApiInterface
 */
export interface ChannelSettingsApiInterface {
    /**
     *
     * @summary Get telegram settings
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatGetTelegramSettingV1Raw(requestParameters: ChannelChatGetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramSettingsResponseDto>>;
    /**
     * Get telegram settings
     */
    channelChatGetTelegramSettingV1(requestParameters: ChannelChatGetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramSettingsResponseDto>;
    /**
     *
     * @summary Get code for connected chat
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatInitTelegramChatConnectV1Raw(requestParameters: ChannelChatInitTelegramChatConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramInitConnectResponseDto>>;
    /**
     * Get code for connected chat
     */
    channelChatInitTelegramChatConnectV1(requestParameters: ChannelChatInitTelegramChatConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramInitConnectResponseDto>;
    /**
     *
     * @summary Disconnect telegram chat
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatRemoveTelegramChatV1Raw(requestParameters: ChannelChatRemoveTelegramChatV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Disconnect telegram chat
     */
    channelChatRemoveTelegramChatV1(requestParameters: ChannelChatRemoveTelegramChatV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Set telegram settings
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {TelegramSetSettingsRequestDto} TelegramSetSettingsRequestDto
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatSetTelegramSettingV1Raw(requestParameters: ChannelChatSetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Set telegram settings
     */
    channelChatSetTelegramSettingV1(requestParameters: ChannelChatSetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Get telegram post list
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatTelegramPostsV1Raw(requestParameters: ChannelChatTelegramPostsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramChatPostsResponseDto>>;
    /**
     * Get telegram post list
     */
    channelChatTelegramPostsV1(requestParameters: ChannelChatTelegramPostsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramChatPostsResponseDto>;
    /**
     *
     * @summary Optional settings for telegram
     * @param {SiteUpdateChatTelegramRequest} SiteUpdateChatTelegramRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatUpdateOptionsTelegramV1Raw(requestParameters: ChannelChatUpdateOptionsTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Optional settings for telegram
     */
    channelChatUpdateOptionsTelegramV1(requestParameters: ChannelChatUpdateOptionsTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Get planned list
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsGetPlannedV1Raw(requestParameters: ChannelOptionsGetPlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfSitePlannedResponse>>;
    /**
     * Get planned list
     */
    channelOptionsGetPlannedV1(requestParameters: ChannelOptionsGetPlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfSitePlannedResponse>;
    /**
     *
     * @summary Get playlists from the platform
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsGetPlayListV1Raw(requestParameters: ChannelOptionsGetPlayListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfPlaylistItemResponse>>;
    /**
     * Get playlists from the platform
     */
    channelOptionsGetPlayListV1(requestParameters: ChannelOptionsGetPlayListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfPlaylistItemResponse>;
    /**
     *
     * @summary Optional settings for ok. Depends on the tariff.
     * @param {SiteUpdateOptionsOkRequest} SiteUpdateOptionsOkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsOkV1Raw(requestParameters: ChannelOptionsUpdateOptionsOkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Optional settings for ok. Depends on the tariff.
     */
    channelOptionsUpdateOptionsOkV1(requestParameters: ChannelOptionsUpdateOptionsOkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for trovo. Depends on the tariff.
     * @param {SiteUpdateOptionsTrovoRequest} SiteUpdateOptionsTrovoRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsTrovoV1Raw(requestParameters: ChannelOptionsUpdateOptionsTrovoV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Optional settings for trovo. Depends on the tariff.
     */
    channelOptionsUpdateOptionsTrovoV1(requestParameters: ChannelOptionsUpdateOptionsTrovoV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for twitch. Depends on the tariff.
     * @param {SiteUpdateOptionsTwitchRequest} SiteUpdateOptionsTwitchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsTwitchV1Raw(requestParameters: ChannelOptionsUpdateOptionsTwitchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Optional settings for twitch. Depends on the tariff.
     */
    channelOptionsUpdateOptionsTwitchV1(requestParameters: ChannelOptionsUpdateOptionsTwitchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for vk. Depends on the tariff.
     * @param {SiteUpdateOptionsVkRequest} SiteUpdateOptionsVkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsVkV1Raw(requestParameters: ChannelOptionsUpdateOptionsVkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Optional settings for vk. Depends on the tariff.
     */
    channelOptionsUpdateOptionsVkV1(requestParameters: ChannelOptionsUpdateOptionsVkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for vk video live. Depends on the tariff.
     * @param {SiteUpdateOptionsVkVideoLiveRequest} SiteUpdateOptionsVkVideoLiveRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsVkVideoLiveV1Raw(requestParameters: ChannelOptionsUpdateOptionsVkVideoLiveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Optional settings for vk video live. Depends on the tariff.
     */
    channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters: ChannelOptionsUpdateOptionsVkVideoLiveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for youtube. Depends on the tariff.
     * @param {SiteUpdateOptionsYoutubeRequest} SiteUpdateOptionsYoutubeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsYoutubeV1Raw(requestParameters: ChannelOptionsUpdateOptionsYoutubeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Optional settings for youtube. Depends on the tariff.
     */
    channelOptionsUpdateOptionsYoutubeV1(requestParameters: ChannelOptionsUpdateOptionsYoutubeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Set planned id. Depends on the tariff.
     * @param {SiteSetPlannedRequest} SiteSetPlannedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdatePlannedV1Raw(requestParameters: ChannelOptionsUpdatePlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SitePlannedResponse>>;
    /**
     * Set planned id. Depends on the tariff.
     */
    channelOptionsUpdatePlannedV1(requestParameters: ChannelOptionsUpdatePlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SitePlannedResponse>;
    /**
     *
     * @summary Get status platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingGetStatusV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteChannelStatusResponse>>;
    /**
     * Get status platform
     */
    channelSettingGetStatusV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteChannelStatusResponse>;
    /**
     *
     * @summary Set name from custom channel. Global settings.
     * @param {SiteSetNameRequest} SiteSetNameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingSetNameV1Raw(requestParameters: ChannelSettingSetNameV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Set name from custom channel. Global settings.
     */
    channelSettingSetNameV1(requestParameters: ChannelSettingSetNameV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Set rtmp url from channel. Global settings.
     * @param {SiteSetUrlRequest} SiteSetUrlRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingUpdateRtmpV1Raw(requestParameters: ChannelSettingUpdateRtmpV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Set rtmp url from channel. Global settings.
     */
    channelSettingUpdateRtmpV1(requestParameters: ChannelSettingUpdateRtmpV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Get status platform
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'account' | 'group'} role Token role
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingUpdateTokenV1Raw(requestParameters: ChannelSettingUpdateTokenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Get status platform
     */
    channelSettingUpdateTokenV1(requestParameters: ChannelSettingUpdateTokenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     *
     * @summary Set transcoder from channel. Personal settings.
     * @param {SiteSetTranscoderRequest} SiteSetTranscoderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingUpdateTranscoderV1Raw(requestParameters: ChannelSettingUpdateTranscoderV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Set transcoder from channel. Personal settings.
     */
    channelSettingUpdateTranscoderV1(requestParameters: ChannelSettingUpdateTranscoderV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Get telegram post by filter
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {number} filter_mode
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    telegramGetPostByFilterV1Raw(requestParameters: TelegramGetPostByFilterV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramChatPostsItem>>;
    /**
     * Get telegram post by filter
     */
    telegramGetPostByFilterV1(requestParameters: TelegramGetPostByFilterV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramChatPostsItem>;
}
/**
 *
 */
export declare class ChannelSettingsApi extends runtime.BaseAPI implements ChannelSettingsApiInterface {
    /**
     * Get telegram settings
     */
    channelChatGetTelegramSettingV1Raw(requestParameters: ChannelChatGetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramSettingsResponseDto>>;
    /**
     * Get telegram settings
     */
    channelChatGetTelegramSettingV1(requestParameters: ChannelChatGetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramSettingsResponseDto>;
    /**
     * Get code for connected chat
     */
    channelChatInitTelegramChatConnectV1Raw(requestParameters: ChannelChatInitTelegramChatConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramInitConnectResponseDto>>;
    /**
     * Get code for connected chat
     */
    channelChatInitTelegramChatConnectV1(requestParameters: ChannelChatInitTelegramChatConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramInitConnectResponseDto>;
    /**
     * Disconnect telegram chat
     */
    channelChatRemoveTelegramChatV1Raw(requestParameters: ChannelChatRemoveTelegramChatV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Disconnect telegram chat
     */
    channelChatRemoveTelegramChatV1(requestParameters: ChannelChatRemoveTelegramChatV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Set telegram settings
     */
    channelChatSetTelegramSettingV1Raw(requestParameters: ChannelChatSetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Set telegram settings
     */
    channelChatSetTelegramSettingV1(requestParameters: ChannelChatSetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Get telegram post list
     */
    channelChatTelegramPostsV1Raw(requestParameters: ChannelChatTelegramPostsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramChatPostsResponseDto>>;
    /**
     * Get telegram post list
     */
    channelChatTelegramPostsV1(requestParameters: ChannelChatTelegramPostsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramChatPostsResponseDto>;
    /**
     * Optional settings for telegram
     */
    channelChatUpdateOptionsTelegramV1Raw(requestParameters: ChannelChatUpdateOptionsTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Optional settings for telegram
     */
    channelChatUpdateOptionsTelegramV1(requestParameters: ChannelChatUpdateOptionsTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Get planned list
     */
    channelOptionsGetPlannedV1Raw(requestParameters: ChannelOptionsGetPlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfSitePlannedResponse>>;
    /**
     * Get planned list
     */
    channelOptionsGetPlannedV1(requestParameters: ChannelOptionsGetPlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfSitePlannedResponse>;
    /**
     * Get playlists from the platform
     */
    channelOptionsGetPlayListV1Raw(requestParameters: ChannelOptionsGetPlayListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfPlaylistItemResponse>>;
    /**
     * Get playlists from the platform
     */
    channelOptionsGetPlayListV1(requestParameters: ChannelOptionsGetPlayListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfPlaylistItemResponse>;
    /**
     * Optional settings for ok. Depends on the tariff.
     */
    channelOptionsUpdateOptionsOkV1Raw(requestParameters: ChannelOptionsUpdateOptionsOkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Optional settings for ok. Depends on the tariff.
     */
    channelOptionsUpdateOptionsOkV1(requestParameters: ChannelOptionsUpdateOptionsOkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Optional settings for trovo. Depends on the tariff.
     */
    channelOptionsUpdateOptionsTrovoV1Raw(requestParameters: ChannelOptionsUpdateOptionsTrovoV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Optional settings for trovo. Depends on the tariff.
     */
    channelOptionsUpdateOptionsTrovoV1(requestParameters: ChannelOptionsUpdateOptionsTrovoV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Optional settings for twitch. Depends on the tariff.
     */
    channelOptionsUpdateOptionsTwitchV1Raw(requestParameters: ChannelOptionsUpdateOptionsTwitchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Optional settings for twitch. Depends on the tariff.
     */
    channelOptionsUpdateOptionsTwitchV1(requestParameters: ChannelOptionsUpdateOptionsTwitchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Optional settings for vk. Depends on the tariff.
     */
    channelOptionsUpdateOptionsVkV1Raw(requestParameters: ChannelOptionsUpdateOptionsVkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Optional settings for vk. Depends on the tariff.
     */
    channelOptionsUpdateOptionsVkV1(requestParameters: ChannelOptionsUpdateOptionsVkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Optional settings for vk video live. Depends on the tariff.
     */
    channelOptionsUpdateOptionsVkVideoLiveV1Raw(requestParameters: ChannelOptionsUpdateOptionsVkVideoLiveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Optional settings for vk video live. Depends on the tariff.
     */
    channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters: ChannelOptionsUpdateOptionsVkVideoLiveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Optional settings for youtube. Depends on the tariff.
     */
    channelOptionsUpdateOptionsYoutubeV1Raw(requestParameters: ChannelOptionsUpdateOptionsYoutubeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Optional settings for youtube. Depends on the tariff.
     */
    channelOptionsUpdateOptionsYoutubeV1(requestParameters: ChannelOptionsUpdateOptionsYoutubeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Set planned id. Depends on the tariff.
     */
    channelOptionsUpdatePlannedV1Raw(requestParameters: ChannelOptionsUpdatePlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SitePlannedResponse>>;
    /**
     * Set planned id. Depends on the tariff.
     */
    channelOptionsUpdatePlannedV1(requestParameters: ChannelOptionsUpdatePlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SitePlannedResponse>;
    /**
     * Get status platform
     */
    channelSettingGetStatusV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteChannelStatusResponse>>;
    /**
     * Get status platform
     */
    channelSettingGetStatusV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteChannelStatusResponse>;
    /**
     * Set name from custom channel. Global settings.
     */
    channelSettingSetNameV1Raw(requestParameters: ChannelSettingSetNameV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Set name from custom channel. Global settings.
     */
    channelSettingSetNameV1(requestParameters: ChannelSettingSetNameV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Set rtmp url from channel. Global settings.
     */
    channelSettingUpdateRtmpV1Raw(requestParameters: ChannelSettingUpdateRtmpV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Set rtmp url from channel. Global settings.
     */
    channelSettingUpdateRtmpV1(requestParameters: ChannelSettingUpdateRtmpV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Get status platform
     */
    channelSettingUpdateTokenV1Raw(requestParameters: ChannelSettingUpdateTokenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Get status platform
     */
    channelSettingUpdateTokenV1(requestParameters: ChannelSettingUpdateTokenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Set transcoder from channel. Personal settings.
     */
    channelSettingUpdateTranscoderV1Raw(requestParameters: ChannelSettingUpdateTranscoderV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Set transcoder from channel. Personal settings.
     */
    channelSettingUpdateTranscoderV1(requestParameters: ChannelSettingUpdateTranscoderV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Get telegram post by filter
     */
    telegramGetPostByFilterV1Raw(requestParameters: TelegramGetPostByFilterV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramChatPostsItem>>;
    /**
     * Get telegram post by filter
     */
    telegramGetPostByFilterV1(requestParameters: TelegramGetPostByFilterV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramChatPostsItem>;
}
/**
 * @export
 */
export declare const ChannelChatGetTelegramSettingV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type ChannelChatGetTelegramSettingV1LanguageEnum = typeof ChannelChatGetTelegramSettingV1LanguageEnum[keyof typeof ChannelChatGetTelegramSettingV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelChatGetTelegramSettingV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelChatGetTelegramSettingV1VEnum = typeof ChannelChatGetTelegramSettingV1VEnum[keyof typeof ChannelChatGetTelegramSettingV1VEnum];
/**
 * @export
 */
export declare const ChannelChatInitTelegramChatConnectV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type ChannelChatInitTelegramChatConnectV1LanguageEnum = typeof ChannelChatInitTelegramChatConnectV1LanguageEnum[keyof typeof ChannelChatInitTelegramChatConnectV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelChatInitTelegramChatConnectV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelChatInitTelegramChatConnectV1VEnum = typeof ChannelChatInitTelegramChatConnectV1VEnum[keyof typeof ChannelChatInitTelegramChatConnectV1VEnum];
/**
 * @export
 */
export declare const ChannelChatRemoveTelegramChatV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type ChannelChatRemoveTelegramChatV1LanguageEnum = typeof ChannelChatRemoveTelegramChatV1LanguageEnum[keyof typeof ChannelChatRemoveTelegramChatV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelChatRemoveTelegramChatV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelChatRemoveTelegramChatV1VEnum = typeof ChannelChatRemoveTelegramChatV1VEnum[keyof typeof ChannelChatRemoveTelegramChatV1VEnum];
/**
 * @export
 */
export declare const ChannelChatSetTelegramSettingV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type ChannelChatSetTelegramSettingV1LanguageEnum = typeof ChannelChatSetTelegramSettingV1LanguageEnum[keyof typeof ChannelChatSetTelegramSettingV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelChatSetTelegramSettingV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelChatSetTelegramSettingV1VEnum = typeof ChannelChatSetTelegramSettingV1VEnum[keyof typeof ChannelChatSetTelegramSettingV1VEnum];
/**
 * @export
 */
export declare const ChannelChatTelegramPostsV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type ChannelChatTelegramPostsV1LanguageEnum = typeof ChannelChatTelegramPostsV1LanguageEnum[keyof typeof ChannelChatTelegramPostsV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelChatTelegramPostsV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelChatTelegramPostsV1VEnum = typeof ChannelChatTelegramPostsV1VEnum[keyof typeof ChannelChatTelegramPostsV1VEnum];
/**
 * @export
 */
export declare const ChannelOptionsGetPlannedV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type ChannelOptionsGetPlannedV1LanguageEnum = typeof ChannelOptionsGetPlannedV1LanguageEnum[keyof typeof ChannelOptionsGetPlannedV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelOptionsGetPlannedV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelOptionsGetPlannedV1VEnum = typeof ChannelOptionsGetPlannedV1VEnum[keyof typeof ChannelOptionsGetPlannedV1VEnum];
/**
 * @export
 */
export declare const ChannelOptionsGetPlayListV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type ChannelOptionsGetPlayListV1LanguageEnum = typeof ChannelOptionsGetPlayListV1LanguageEnum[keyof typeof ChannelOptionsGetPlayListV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelOptionsGetPlayListV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelOptionsGetPlayListV1VEnum = typeof ChannelOptionsGetPlayListV1VEnum[keyof typeof ChannelOptionsGetPlayListV1VEnum];
/**
 * @export
 */
export declare const ChannelSettingUpdateTokenV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type ChannelSettingUpdateTokenV1LanguageEnum = typeof ChannelSettingUpdateTokenV1LanguageEnum[keyof typeof ChannelSettingUpdateTokenV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelSettingUpdateTokenV1RoleEnum: {
    readonly account: "account";
    readonly group: "group";
};
export type ChannelSettingUpdateTokenV1RoleEnum = typeof ChannelSettingUpdateTokenV1RoleEnum[keyof typeof ChannelSettingUpdateTokenV1RoleEnum];
/**
 * @export
 */
export declare const ChannelSettingUpdateTokenV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelSettingUpdateTokenV1VEnum = typeof ChannelSettingUpdateTokenV1VEnum[keyof typeof ChannelSettingUpdateTokenV1VEnum];
/**
 * @export
 */
export declare const TelegramGetPostByFilterV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type TelegramGetPostByFilterV1LanguageEnum = typeof TelegramGetPostByFilterV1LanguageEnum[keyof typeof TelegramGetPostByFilterV1LanguageEnum];
/**
 * @export
 */
export declare const TelegramGetPostByFilterV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type TelegramGetPostByFilterV1VEnum = typeof TelegramGetPostByFilterV1VEnum[keyof typeof TelegramGetPostByFilterV1VEnum];
//# sourceMappingURL=ChannelSettingsApi.d.ts.map