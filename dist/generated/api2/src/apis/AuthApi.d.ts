/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CodeAppAuthResponse, RefreshAuthResponse, SiteAuthExchangeRequest, SuccessResponse } from '../models/index';
export interface AuthCallbackGoogleV1Request {
    state: string;
}
export interface AuthCallbackVkIdV1Request {
    state: string;
}
export interface AuthCodeV1Request {
    language: AuthCodeV1LanguageEnum;
    app: AuthCodeV1AppEnum;
    v?: AuthCodeV1VEnum;
}
export interface AuthConnectResultV1Request {
    language: AuthConnectResultV1LanguageEnum;
    message: string;
    v?: AuthConnectResultV1VEnum;
}
export interface AuthConnectTelegramV1Request {
    language: AuthConnectTelegramV1LanguageEnum;
    v?: AuthConnectTelegramV1VEnum;
}
export interface AuthConnectV1Request {
    language: AuthConnectV1LanguageEnum;
    provider: AuthConnectV1ProviderEnum;
    v?: AuthConnectV1VEnum;
    app?: AuthConnectV1AppEnum;
    redirect?: string;
}
export interface AuthDisconnectV1Request {
    language: AuthDisconnectV1LanguageEnum;
    social_id: number;
    v?: AuthDisconnectV1VEnum;
}
export interface AuthExchangeV1Request {
    SiteAuthExchangeRequest: SiteAuthExchangeRequest;
}
export interface AuthGetAuthUrlV1Request {
    language: AuthGetAuthUrlV1LanguageEnum;
    provider: AuthGetAuthUrlV1ProviderEnum;
    v?: AuthGetAuthUrlV1VEnum;
    app?: AuthGetAuthUrlV1AppEnum;
    redirect?: string;
    refId?: string;
    country?: string;
}
/**
 * AuthApi - interface
 *
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     *
     * @summary Internal request of auth google
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCallbackGoogleV1Raw(requestParameters: AuthCallbackGoogleV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Internal request of auth google
     */
    authCallbackGoogleV1(requestParameters: AuthCallbackGoogleV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     *
     * @summary Internal request of auth new vk
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCallbackVkIdV1Raw(requestParameters: AuthCallbackVkIdV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Internal request of auth new vk
     */
    authCallbackVkIdV1(requestParameters: AuthCallbackVkIdV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     *
     * @summary Internal request of auth old vk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCallbackVkV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Internal request of auth old vk
     */
    authCallbackVkV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     *
     * @summary Get code for auth
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'site' | 'admin' | 'mobile' | 'desktop'} app Create auth code for app
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCodeV1Raw(requestParameters: AuthCodeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CodeAppAuthResponse>>;
    /**
     * Get code for auth
     */
    authCodeV1(requestParameters: AuthCodeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CodeAppAuthResponse>;
    /**
     *
     * @summary CallBack for connect social
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {string} message Result message for connect
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authConnectResultV1Raw(requestParameters: AuthConnectResultV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * CallBack for connect social
     */
    authConnectResultV1(requestParameters: AuthConnectResultV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     *
     * @summary Connect telegram in account
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authConnectTelegramV1Raw(requestParameters: AuthConnectTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Connect telegram in account
     */
    authConnectTelegramV1(requestParameters: AuthConnectTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Connected social account
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'google' | 'vk' | 'vk-id' | 'telegram'} provider Provider oauth
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {'site' | 'admin' | 'mobile' | 'desktop'} [app] App oauth
     * @param {string} [redirect] Redirect url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authConnectV1Raw(requestParameters: AuthConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Connected social account
     */
    authConnectV1(requestParameters: AuthConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     *
     * @summary Disconnected social account
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} social_id Social id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authDisconnectV1Raw(requestParameters: AuthDisconnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Disconnected social account
     */
    authDisconnectV1(requestParameters: AuthDisconnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     *
     * @summary Code exchange
     * @param {SiteAuthExchangeRequest} SiteAuthExchangeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authExchangeV1Raw(requestParameters: AuthExchangeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshAuthResponse>>;
    /**
     * Code exchange
     */
    authExchangeV1(requestParameters: AuthExchangeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshAuthResponse>;
    /**
     *
     * @summary Get url for start oauth
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'google' | 'vk' | 'vk-id' | 'telegram'} provider Provider oauth
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {'site' | 'admin' | 'mobile' | 'desktop'} [app] App oauth
     * @param {string} [redirect] Redirect url
     * @param {string} [refId] Referal id
     * @param {string} [country] Country code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authGetAuthUrlV1Raw(requestParameters: AuthGetAuthUrlV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Get url for start oauth
     */
    authGetAuthUrlV1(requestParameters: AuthGetAuthUrlV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
/**
 *
 */
export declare class AuthApi extends runtime.BaseAPI implements AuthApiInterface {
    /**
     * Internal request of auth google
     */
    authCallbackGoogleV1Raw(requestParameters: AuthCallbackGoogleV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Internal request of auth google
     */
    authCallbackGoogleV1(requestParameters: AuthCallbackGoogleV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Internal request of auth new vk
     */
    authCallbackVkIdV1Raw(requestParameters: AuthCallbackVkIdV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Internal request of auth new vk
     */
    authCallbackVkIdV1(requestParameters: AuthCallbackVkIdV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Internal request of auth old vk
     */
    authCallbackVkV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Internal request of auth old vk
     */
    authCallbackVkV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Get code for auth
     */
    authCodeV1Raw(requestParameters: AuthCodeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CodeAppAuthResponse>>;
    /**
     * Get code for auth
     */
    authCodeV1(requestParameters: AuthCodeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CodeAppAuthResponse>;
    /**
     * CallBack for connect social
     */
    authConnectResultV1Raw(requestParameters: AuthConnectResultV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * CallBack for connect social
     */
    authConnectResultV1(requestParameters: AuthConnectResultV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Connect telegram in account
     */
    authConnectTelegramV1Raw(requestParameters: AuthConnectTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Connect telegram in account
     */
    authConnectTelegramV1(requestParameters: AuthConnectTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Connected social account
     */
    authConnectV1Raw(requestParameters: AuthConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Connected social account
     */
    authConnectV1(requestParameters: AuthConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Disconnected social account
     */
    authDisconnectV1Raw(requestParameters: AuthDisconnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Disconnected social account
     */
    authDisconnectV1(requestParameters: AuthDisconnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Code exchange
     */
    authExchangeV1Raw(requestParameters: AuthExchangeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshAuthResponse>>;
    /**
     * Code exchange
     */
    authExchangeV1(requestParameters: AuthExchangeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshAuthResponse>;
    /**
     * Get url for start oauth
     */
    authGetAuthUrlV1Raw(requestParameters: AuthGetAuthUrlV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Get url for start oauth
     */
    authGetAuthUrlV1(requestParameters: AuthGetAuthUrlV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
/**
 * @export
 */
export declare const AuthCodeV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type AuthCodeV1LanguageEnum = typeof AuthCodeV1LanguageEnum[keyof typeof AuthCodeV1LanguageEnum];
/**
 * @export
 */
export declare const AuthCodeV1AppEnum: {
    readonly site: "site";
    readonly admin: "admin";
    readonly mobile: "mobile";
    readonly desktop: "desktop";
};
export type AuthCodeV1AppEnum = typeof AuthCodeV1AppEnum[keyof typeof AuthCodeV1AppEnum];
/**
 * @export
 */
export declare const AuthCodeV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type AuthCodeV1VEnum = typeof AuthCodeV1VEnum[keyof typeof AuthCodeV1VEnum];
/**
 * @export
 */
export declare const AuthConnectResultV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type AuthConnectResultV1LanguageEnum = typeof AuthConnectResultV1LanguageEnum[keyof typeof AuthConnectResultV1LanguageEnum];
/**
 * @export
 */
export declare const AuthConnectResultV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type AuthConnectResultV1VEnum = typeof AuthConnectResultV1VEnum[keyof typeof AuthConnectResultV1VEnum];
/**
 * @export
 */
export declare const AuthConnectTelegramV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type AuthConnectTelegramV1LanguageEnum = typeof AuthConnectTelegramV1LanguageEnum[keyof typeof AuthConnectTelegramV1LanguageEnum];
/**
 * @export
 */
export declare const AuthConnectTelegramV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type AuthConnectTelegramV1VEnum = typeof AuthConnectTelegramV1VEnum[keyof typeof AuthConnectTelegramV1VEnum];
/**
 * @export
 */
export declare const AuthConnectV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type AuthConnectV1LanguageEnum = typeof AuthConnectV1LanguageEnum[keyof typeof AuthConnectV1LanguageEnum];
/**
 * @export
 */
export declare const AuthConnectV1ProviderEnum: {
    readonly google: "google";
    readonly vk: "vk";
    readonly vk_id: "vk-id";
    readonly telegram: "telegram";
};
export type AuthConnectV1ProviderEnum = typeof AuthConnectV1ProviderEnum[keyof typeof AuthConnectV1ProviderEnum];
/**
 * @export
 */
export declare const AuthConnectV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type AuthConnectV1VEnum = typeof AuthConnectV1VEnum[keyof typeof AuthConnectV1VEnum];
/**
 * @export
 */
export declare const AuthConnectV1AppEnum: {
    readonly site: "site";
    readonly admin: "admin";
    readonly mobile: "mobile";
    readonly desktop: "desktop";
};
export type AuthConnectV1AppEnum = typeof AuthConnectV1AppEnum[keyof typeof AuthConnectV1AppEnum];
/**
 * @export
 */
export declare const AuthDisconnectV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type AuthDisconnectV1LanguageEnum = typeof AuthDisconnectV1LanguageEnum[keyof typeof AuthDisconnectV1LanguageEnum];
/**
 * @export
 */
export declare const AuthDisconnectV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type AuthDisconnectV1VEnum = typeof AuthDisconnectV1VEnum[keyof typeof AuthDisconnectV1VEnum];
/**
 * @export
 */
export declare const AuthGetAuthUrlV1LanguageEnum: {
    readonly ru: "ru";
    readonly en: "en";
    readonly cn: "cn";
};
export type AuthGetAuthUrlV1LanguageEnum = typeof AuthGetAuthUrlV1LanguageEnum[keyof typeof AuthGetAuthUrlV1LanguageEnum];
/**
 * @export
 */
export declare const AuthGetAuthUrlV1ProviderEnum: {
    readonly google: "google";
    readonly vk: "vk";
    readonly vk_id: "vk-id";
    readonly telegram: "telegram";
};
export type AuthGetAuthUrlV1ProviderEnum = typeof AuthGetAuthUrlV1ProviderEnum[keyof typeof AuthGetAuthUrlV1ProviderEnum];
/**
 * @export
 */
export declare const AuthGetAuthUrlV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type AuthGetAuthUrlV1VEnum = typeof AuthGetAuthUrlV1VEnum[keyof typeof AuthGetAuthUrlV1VEnum];
/**
 * @export
 */
export declare const AuthGetAuthUrlV1AppEnum: {
    readonly site: "site";
    readonly admin: "admin";
    readonly mobile: "mobile";
    readonly desktop: "desktop";
};
export type AuthGetAuthUrlV1AppEnum = typeof AuthGetAuthUrlV1AppEnum[keyof typeof AuthGetAuthUrlV1AppEnum];
//# sourceMappingURL=AuthApi.d.ts.map