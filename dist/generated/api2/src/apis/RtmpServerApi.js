"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RtmpServerStateV1VEnum = exports.RtmpServerStateV1IntervalEnum = exports.RtmpServerStateV1LanguageEnum = exports.RtmpServerListV1VEnum = exports.RtmpServerListV1IntervalEnum = exports.RtmpServerListV1LanguageEnum = exports.RtmpServerGraphV1VEnum = exports.RtmpServerGraphV1TypeEnum = exports.RtmpServerGraphV1IntervalEnum = exports.RtmpServerGraphV1LanguageEnum = exports.MethodRtmpServerListLocationsUnauthorizedV1VEnum = exports.MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum = exports.RtmpServerApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class RtmpServerApi extends runtime.BaseAPI {
    /**
     * Rtmp locations server list example for unauthorized
     */
    async methodRtmpServerListLocationsUnauthorizedV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling methodRtmpServerListLocationsUnauthorizedV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/rtmp_server/list_locations_unauthorized`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ListOfRtmpServerLocationResponseFromJSON)(jsonValue));
    }
    /**
     * Rtmp locations server list example for unauthorized
     */
    async methodRtmpServerListLocationsUnauthorizedV1(requestParameters, initOverrides) {
        const response = await this.methodRtmpServerListLocationsUnauthorizedV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Graph of rtmp servers
     */
    async rtmpServerGraphV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling rtmpServerGraphV1().');
        }
        if (requestParameters['interval'] == null) {
            throw new runtime.RequiredError('interval', 'Required parameter "interval" was null or undefined when calling rtmpServerGraphV1().');
        }
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling rtmpServerGraphV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }
        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/rtmp_server/graph`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RtmpServerGraphResponseFromJSON)(jsonValue));
    }
    /**
     * Graph of rtmp servers
     */
    async rtmpServerGraphV1(requestParameters, initOverrides) {
        const response = await this.rtmpServerGraphV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * List rtmp servers
     */
    async rtmpServerListV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling rtmpServerListV1().');
        }
        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError('project_id', 'Required parameter "project_id" was null or undefined when calling rtmpServerListV1().');
        }
        if (requestParameters['interval'] == null) {
            throw new runtime.RequiredError('interval', 'Required parameter "interval" was null or undefined when calling rtmpServerListV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }
        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/rtmp_server/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RtmpServerListResponseFromJSON)(jsonValue));
    }
    /**
     * List rtmp servers
     */
    async rtmpServerListV1(requestParameters, initOverrides) {
        const response = await this.rtmpServerListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * State of rtmp servers
     */
    async rtmpServerStateV1Raw(requestParameters, initOverrides) {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError('language', 'Required parameter "language" was null or undefined when calling rtmpServerStateV1().');
        }
        if (requestParameters['interval'] == null) {
            throw new runtime.RequiredError('interval', 'Required parameter "interval" was null or undefined when calling rtmpServerStateV1().');
        }
        const queryParameters = {};
        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }
        else {
            queryParameters['v'] = '1';
        }
        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }
        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/method/rtmp_server/state`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RtmpServerStateResponseFromJSON)(jsonValue));
    }
    /**
     * State of rtmp servers
     */
    async rtmpServerStateV1(requestParameters, initOverrides) {
        const response = await this.rtmpServerStateV1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * State of rtmp servers
     */
    async rtmpServerUpV1Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/method/rtmp_server/up`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * State of rtmp servers
     */
    async rtmpServerUpV1(initOverrides) {
        const response = await this.rtmpServerUpV1Raw(initOverrides);
        return await response.value();
    }
}
exports.RtmpServerApi = RtmpServerApi;
/**
 * @export
 */
exports.MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.MethodRtmpServerListLocationsUnauthorizedV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.RtmpServerGraphV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.RtmpServerGraphV1IntervalEnum = {
    NUMBER_1: 1,
    NUMBER_3: 3,
    NUMBER_6: 6,
    NUMBER_12: 12,
    NUMBER_24: 24
};
/**
 * @export
 */
exports.RtmpServerGraphV1TypeEnum = {
    performance: 'performance',
    network: 'network',
    cpu: 'cpu',
    ram: 'ram',
    deliveredPackages: 'deliveredPackages'
};
/**
 * @export
 */
exports.RtmpServerGraphV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.RtmpServerListV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.RtmpServerListV1IntervalEnum = {
    NUMBER_1: 1,
    NUMBER_3: 3,
    NUMBER_6: 6,
    NUMBER_12: 12,
    NUMBER_24: 24
};
/**
 * @export
 */
exports.RtmpServerListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.RtmpServerStateV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
};
/**
 * @export
 */
exports.RtmpServerStateV1IntervalEnum = {
    NUMBER_1: 1,
    NUMBER_3: 3,
    NUMBER_6: 6,
    NUMBER_12: 12,
    NUMBER_24: 24
};
/**
 * @export
 */
exports.RtmpServerStateV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
