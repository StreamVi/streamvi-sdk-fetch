/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ListOfProjectChannelResponse,
  SuccessResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ListOfProjectChannelResponseFromJSON,
    ListOfProjectChannelResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface ProjectChannelChangeAccessV1Request {
    language: ProjectChannelChangeAccessV1LanguageEnum;
    project_id: number;
    channel_id: number;
    to_project_id: number;
    access_type: ProjectChannelChangeAccessV1AccessTypeEnum;
    v?: ProjectChannelChangeAccessV1VEnum;
}

export interface ProjectChannelDelV1Request {
    language: ProjectChannelDelV1LanguageEnum;
    project_id: number;
    channel_id: number;
    target_project_id: number;
    v?: ProjectChannelDelV1VEnum;
}

export interface ProjectChannelListV1Request {
    language: ProjectChannelListV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ProjectChannelListV1VEnum;
}

export interface ProjectChannelTransferOwnerV1Request {
    language: ProjectChannelTransferOwnerV1LanguageEnum;
    project_id: number;
    channel_id: number;
    to_project_id: number;
    v?: ProjectChannelTransferOwnerV1VEnum;
}

/**
 * ProjectChannelApi - interface
 * 
 * @export
 * @interface ProjectChannelApiInterface
 */
export interface ProjectChannelApiInterface {
    /**
     * 
     * @summary Change access for project in channel
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {number} to_project_id Target project id
     * @param {0 | 1 | 1 | 2} access_type Access type
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelChangeAccessV1Raw(requestParameters: ProjectChannelChangeAccessV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Change access for project in channel
     */
    projectChannelChangeAccessV1(requestParameters: ProjectChannelChangeAccessV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Remove access for project in channel
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {number} target_project_id Target project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelDelV1Raw(requestParameters: ProjectChannelDelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Remove access for project in channel
     */
    projectChannelDelV1(requestParameters: ProjectChannelDelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Project channel list
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelListV1Raw(requestParameters: ProjectChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfProjectChannelResponse>>;

    /**
     * Project channel list
     */
    projectChannelListV1(requestParameters: ProjectChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfProjectChannelResponse>;

    /**
     * 
     * @summary Transfer owner for project in channel
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {number} to_project_id Target project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelTransferOwnerV1Raw(requestParameters: ProjectChannelTransferOwnerV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Transfer owner for project in channel
     */
    projectChannelTransferOwnerV1(requestParameters: ProjectChannelTransferOwnerV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

}

/**
 * 
 */
export class ProjectChannelApi extends runtime.BaseAPI implements ProjectChannelApiInterface {

    /**
     * Change access for project in channel
     */
    async projectChannelChangeAccessV1Raw(requestParameters: ProjectChannelChangeAccessV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling projectChannelChangeAccessV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling projectChannelChangeAccessV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling projectChannelChangeAccessV1().'
            );
        }

        if (requestParameters['to_project_id'] == null) {
            throw new runtime.RequiredError(
                'to_project_id',
                'Required parameter "to_project_id" was null or undefined when calling projectChannelChangeAccessV1().'
            );
        }

        if (requestParameters['access_type'] == null) {
            throw new runtime.RequiredError(
                'access_type',
                'Required parameter "access_type" was null or undefined when calling projectChannelChangeAccessV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        if (requestParameters['to_project_id'] != null) {
            queryParameters['to_project_id'] = requestParameters['to_project_id'];
        }

        if (requestParameters['access_type'] != null) {
            queryParameters['access_type'] = requestParameters['access_type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel/access/change`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Change access for project in channel
     */
    async projectChannelChangeAccessV1(requestParameters: ProjectChannelChangeAccessV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.projectChannelChangeAccessV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove access for project in channel
     */
    async projectChannelDelV1Raw(requestParameters: ProjectChannelDelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling projectChannelDelV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling projectChannelDelV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling projectChannelDelV1().'
            );
        }

        if (requestParameters['target_project_id'] == null) {
            throw new runtime.RequiredError(
                'target_project_id',
                'Required parameter "target_project_id" was null or undefined when calling projectChannelDelV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        if (requestParameters['target_project_id'] != null) {
            queryParameters['target_project_id'] = requestParameters['target_project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel/access/del`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove access for project in channel
     */
    async projectChannelDelV1(requestParameters: ProjectChannelDelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.projectChannelDelV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Project channel list
     */
    async projectChannelListV1Raw(requestParameters: ProjectChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfProjectChannelResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling projectChannelListV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling projectChannelListV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling projectChannelListV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel/access/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfProjectChannelResponseFromJSON(jsonValue));
    }

    /**
     * Project channel list
     */
    async projectChannelListV1(requestParameters: ProjectChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfProjectChannelResponse> {
        const response = await this.projectChannelListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Transfer owner for project in channel
     */
    async projectChannelTransferOwnerV1Raw(requestParameters: ProjectChannelTransferOwnerV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling projectChannelTransferOwnerV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling projectChannelTransferOwnerV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling projectChannelTransferOwnerV1().'
            );
        }

        if (requestParameters['to_project_id'] == null) {
            throw new runtime.RequiredError(
                'to_project_id',
                'Required parameter "to_project_id" was null or undefined when calling projectChannelTransferOwnerV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        if (requestParameters['to_project_id'] != null) {
            queryParameters['to_project_id'] = requestParameters['to_project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel/access/transfer_owner`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Transfer owner for project in channel
     */
    async projectChannelTransferOwnerV1(requestParameters: ProjectChannelTransferOwnerV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.projectChannelTransferOwnerV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ProjectChannelChangeAccessV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ProjectChannelChangeAccessV1LanguageEnum = typeof ProjectChannelChangeAccessV1LanguageEnum[keyof typeof ProjectChannelChangeAccessV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelChangeAccessV1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_12: 1,
    NUMBER_2: 2
} as const;
export type ProjectChannelChangeAccessV1AccessTypeEnum = typeof ProjectChannelChangeAccessV1AccessTypeEnum[keyof typeof ProjectChannelChangeAccessV1AccessTypeEnum];
/**
 * @export
 */
export const ProjectChannelChangeAccessV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelChangeAccessV1VEnum = typeof ProjectChannelChangeAccessV1VEnum[keyof typeof ProjectChannelChangeAccessV1VEnum];
/**
 * @export
 */
export const ProjectChannelDelV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ProjectChannelDelV1LanguageEnum = typeof ProjectChannelDelV1LanguageEnum[keyof typeof ProjectChannelDelV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelDelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelDelV1VEnum = typeof ProjectChannelDelV1VEnum[keyof typeof ProjectChannelDelV1VEnum];
/**
 * @export
 */
export const ProjectChannelListV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ProjectChannelListV1LanguageEnum = typeof ProjectChannelListV1LanguageEnum[keyof typeof ProjectChannelListV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelListV1VEnum = typeof ProjectChannelListV1VEnum[keyof typeof ProjectChannelListV1VEnum];
/**
 * @export
 */
export const ProjectChannelTransferOwnerV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ProjectChannelTransferOwnerV1LanguageEnum = typeof ProjectChannelTransferOwnerV1LanguageEnum[keyof typeof ProjectChannelTransferOwnerV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelTransferOwnerV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelTransferOwnerV1VEnum = typeof ProjectChannelTransferOwnerV1VEnum[keyof typeof ProjectChannelTransferOwnerV1VEnum];
