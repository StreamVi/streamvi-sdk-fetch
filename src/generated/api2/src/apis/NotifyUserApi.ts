/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SiteNotifyUserResponse,
  SiteScreenNotifyUserResponse,
  SiteSetNotifyUserRequest,
  SuccessResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SiteNotifyUserResponseFromJSON,
    SiteNotifyUserResponseToJSON,
    SiteScreenNotifyUserResponseFromJSON,
    SiteScreenNotifyUserResponseToJSON,
    SiteSetNotifyUserRequestFromJSON,
    SiteSetNotifyUserRequestToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface NotifyUserDelMobileTokenV1Request {
    language: NotifyUserDelMobileTokenV1LanguageEnum;
    token: string;
    v?: NotifyUserDelMobileTokenV1VEnum;
}

export interface NotifyUserGetScreenV1Request {
    language: NotifyUserGetScreenV1LanguageEnum;
    project_id: number;
    v?: NotifyUserGetScreenV1VEnum;
}

export interface NotifyUserGetV1Request {
    project_id: number;
    v?: NotifyUserGetV1VEnum;
}

export interface NotifyUserRemoveScreenV1Request {
    project_id: number;
    v?: NotifyUserRemoveScreenV1VEnum;
}

export interface NotifyUserSetV1Request {
    SiteSetNotifyUserRequest: SiteSetNotifyUserRequest;
    v?: NotifyUserSetV1VEnum;
}

/**
 * NotifyUserApi - interface
 * 
 * @export
 * @interface NotifyUserApiInterface
 */
export interface NotifyUserApiInterface {
    /**
     * 
     * @summary Delete mobile token from user
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {string} token Token in mobile app
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApiInterface
     */
    notifyUserDelMobileTokenV1Raw(requestParameters: NotifyUserDelMobileTokenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Delete mobile token from user
     */
    notifyUserDelMobileTokenV1(requestParameters: NotifyUserDelMobileTokenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Get user screen notify
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApiInterface
     */
    notifyUserGetScreenV1Raw(requestParameters: NotifyUserGetScreenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteScreenNotifyUserResponse>>;

    /**
     * Get user screen notify
     */
    notifyUserGetScreenV1(requestParameters: NotifyUserGetScreenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteScreenNotifyUserResponse>;

    /**
     * 
     * @summary Get user notify settings
     * @param {number} project_id Project id
     * @param {'1'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApiInterface
     */
    notifyUserGetV1Raw(requestParameters: NotifyUserGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteNotifyUserResponse>>;

    /**
     * Get user notify settings
     */
    notifyUserGetV1(requestParameters: NotifyUserGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteNotifyUserResponse>;

    /**
     * 
     * @summary Remove user screen notify
     * @param {number} project_id Project id
     * @param {'1'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApiInterface
     */
    notifyUserRemoveScreenV1Raw(requestParameters: NotifyUserRemoveScreenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Remove user screen notify
     */
    notifyUserRemoveScreenV1(requestParameters: NotifyUserRemoveScreenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Set user notify settings
     * @param {SiteSetNotifyUserRequest} SiteSetNotifyUserRequest Set user notify settings
     * @param {'1'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApiInterface
     */
    notifyUserSetV1Raw(requestParameters: NotifyUserSetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Set user notify settings
     */
    notifyUserSetV1(requestParameters: NotifyUserSetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

}

/**
 * 
 */
export class NotifyUserApi extends runtime.BaseAPI implements NotifyUserApiInterface {

    /**
     * Delete mobile token from user
     */
    async notifyUserDelMobileTokenV1Raw(requestParameters: NotifyUserDelMobileTokenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling notifyUserDelMobileTokenV1().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling notifyUserDelMobileTokenV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/notify_user/del_mobile_token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete mobile token from user
     */
    async notifyUserDelMobileTokenV1(requestParameters: NotifyUserDelMobileTokenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.notifyUserDelMobileTokenV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user screen notify
     */
    async notifyUserGetScreenV1Raw(requestParameters: NotifyUserGetScreenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteScreenNotifyUserResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling notifyUserGetScreenV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling notifyUserGetScreenV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/notify_user/screen`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteScreenNotifyUserResponseFromJSON(jsonValue));
    }

    /**
     * Get user screen notify
     */
    async notifyUserGetScreenV1(requestParameters: NotifyUserGetScreenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteScreenNotifyUserResponse> {
        const response = await this.notifyUserGetScreenV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user notify settings
     */
    async notifyUserGetV1Raw(requestParameters: NotifyUserGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteNotifyUserResponse>> {
        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling notifyUserGetV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/notify_user/setting`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteNotifyUserResponseFromJSON(jsonValue));
    }

    /**
     * Get user notify settings
     */
    async notifyUserGetV1(requestParameters: NotifyUserGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteNotifyUserResponse> {
        const response = await this.notifyUserGetV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove user screen notify
     */
    async notifyUserRemoveScreenV1Raw(requestParameters: NotifyUserRemoveScreenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling notifyUserRemoveScreenV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/notify_user/screen`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove user screen notify
     */
    async notifyUserRemoveScreenV1(requestParameters: NotifyUserRemoveScreenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.notifyUserRemoveScreenV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set user notify settings
     */
    async notifyUserSetV1Raw(requestParameters: NotifyUserSetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['SiteSetNotifyUserRequest'] == null) {
            throw new runtime.RequiredError(
                'SiteSetNotifyUserRequest',
                'Required parameter "SiteSetNotifyUserRequest" was null or undefined when calling notifyUserSetV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/notify_user/setting`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteSetNotifyUserRequestToJSON(requestParameters['SiteSetNotifyUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Set user notify settings
     */
    async notifyUserSetV1(requestParameters: NotifyUserSetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.notifyUserSetV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const NotifyUserDelMobileTokenV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type NotifyUserDelMobileTokenV1LanguageEnum = typeof NotifyUserDelMobileTokenV1LanguageEnum[keyof typeof NotifyUserDelMobileTokenV1LanguageEnum];
/**
 * @export
 */
export const NotifyUserDelMobileTokenV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type NotifyUserDelMobileTokenV1VEnum = typeof NotifyUserDelMobileTokenV1VEnum[keyof typeof NotifyUserDelMobileTokenV1VEnum];
/**
 * @export
 */
export const NotifyUserGetScreenV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type NotifyUserGetScreenV1LanguageEnum = typeof NotifyUserGetScreenV1LanguageEnum[keyof typeof NotifyUserGetScreenV1LanguageEnum];
/**
 * @export
 */
export const NotifyUserGetScreenV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type NotifyUserGetScreenV1VEnum = typeof NotifyUserGetScreenV1VEnum[keyof typeof NotifyUserGetScreenV1VEnum];
/**
 * @export
 */
export const NotifyUserGetV1VEnum = {
    _1: '1'
} as const;
export type NotifyUserGetV1VEnum = typeof NotifyUserGetV1VEnum[keyof typeof NotifyUserGetV1VEnum];
/**
 * @export
 */
export const NotifyUserRemoveScreenV1VEnum = {
    _1: '1'
} as const;
export type NotifyUserRemoveScreenV1VEnum = typeof NotifyUserRemoveScreenV1VEnum[keyof typeof NotifyUserRemoveScreenV1VEnum];
/**
 * @export
 */
export const NotifyUserSetV1VEnum = {
    _1: '1'
} as const;
export type NotifyUserSetV1VEnum = typeof NotifyUserSetV1VEnum[keyof typeof NotifyUserSetV1VEnum];
