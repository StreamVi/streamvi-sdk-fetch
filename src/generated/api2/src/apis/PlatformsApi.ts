/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ListOfCategoryItemResponse,
  SitePlatformsSupportedResponse,
  SuccessResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ListOfCategoryItemResponseFromJSON,
    ListOfCategoryItemResponseToJSON,
    SitePlatformsSupportedResponseFromJSON,
    SitePlatformsSupportedResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface PlatformsAddAccountV1Request {
    language: PlatformsAddAccountV1LanguageEnum;
    project_id: number;
    platform: PlatformsAddAccountV1PlatformEnum;
    v?: PlatformsAddAccountV1VEnum;
}

export interface PlatformsGetCategoryV1Request {
    language: PlatformsGetCategoryV1LanguageEnum;
    type: PlatformsGetCategoryV1TypeEnum;
    v?: PlatformsGetCategoryV1VEnum;
    q?: string;
}

export interface PlatformsLogoutAccountV1Request {
    language: PlatformsLogoutAccountV1LanguageEnum;
    id: string;
    platform: PlatformsLogoutAccountV1PlatformEnum;
    v?: PlatformsLogoutAccountV1VEnum;
}

export interface PlatformsPlatformListV1Request {
    language: PlatformsPlatformListV1LanguageEnum;
    v?: PlatformsPlatformListV1VEnum;
}

/**
 * PlatformsApi - interface
 * 
 * @export
 * @interface PlatformsApiInterface
 */
export interface PlatformsApiInterface {
    /**
     * 
     * @summary Get url for start oauth
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'vk' | 'vk-id' | 'ok' | 'youtube' | 'trovo' | 'twitch'} platform Provider oauth
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApiInterface
     */
    platformsAddAccountV1Raw(requestParameters: PlatformsAddAccountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get url for start oauth
     */
    platformsAddAccountV1(requestParameters: PlatformsAddAccountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get category from the platform
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'vk' | 'youtube' | 'trovo' | 'twitch' | 'vkvideolive'} type Category search bar
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {string} [q] Category search bar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApiInterface
     */
    platformsGetCategoryV1Raw(requestParameters: PlatformsGetCategoryV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfCategoryItemResponse>>;

    /**
     * Get category from the platform
     */
    platformsGetCategoryV1(requestParameters: PlatformsGetCategoryV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfCategoryItemResponse>;

    /**
     * 
     * @summary Get category from the platform
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {string} id Category search bar
     * @param {'vk' | 'vk-id' | 'ok' | 'youtube' | 'trovo' | 'twitch'} platform Provider oauth
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApiInterface
     */
    platformsLogoutAccountV1Raw(requestParameters: PlatformsLogoutAccountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfCategoryItemResponse>>;

    /**
     * Get category from the platform
     */
    platformsLogoutAccountV1(requestParameters: PlatformsLogoutAccountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfCategoryItemResponse>;

    /**
     * 
     * @summary Supported platforms
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApiInterface
     */
    platformsPlatformListV1Raw(requestParameters: PlatformsPlatformListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SitePlatformsSupportedResponse>>;

    /**
     * Supported platforms
     */
    platformsPlatformListV1(requestParameters: PlatformsPlatformListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SitePlatformsSupportedResponse>;

}

/**
 * 
 */
export class PlatformsApi extends runtime.BaseAPI implements PlatformsApiInterface {

    /**
     * Get url for start oauth
     */
    async platformsAddAccountV1Raw(requestParameters: PlatformsAddAccountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling platformsAddAccountV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling platformsAddAccountV1().'
            );
        }

        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling platformsAddAccountV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/platforms/connect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get url for start oauth
     */
    async platformsAddAccountV1(requestParameters: PlatformsAddAccountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.platformsAddAccountV1Raw(requestParameters, initOverrides);
    }

    /**
     * Get category from the platform
     */
    async platformsGetCategoryV1Raw(requestParameters: PlatformsGetCategoryV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfCategoryItemResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling platformsGetCategoryV1().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling platformsGetCategoryV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/platforms/category`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfCategoryItemResponseFromJSON(jsonValue));
    }

    /**
     * Get category from the platform
     */
    async platformsGetCategoryV1(requestParameters: PlatformsGetCategoryV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfCategoryItemResponse> {
        const response = await this.platformsGetCategoryV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get category from the platform
     */
    async platformsLogoutAccountV1Raw(requestParameters: PlatformsLogoutAccountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfCategoryItemResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling platformsLogoutAccountV1().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling platformsLogoutAccountV1().'
            );
        }

        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling platformsLogoutAccountV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/platforms/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfCategoryItemResponseFromJSON(jsonValue));
    }

    /**
     * Get category from the platform
     */
    async platformsLogoutAccountV1(requestParameters: PlatformsLogoutAccountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfCategoryItemResponse> {
        const response = await this.platformsLogoutAccountV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Supported platforms
     */
    async platformsPlatformListV1Raw(requestParameters: PlatformsPlatformListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SitePlatformsSupportedResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling platformsPlatformListV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/platforms/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SitePlatformsSupportedResponseFromJSON(jsonValue));
    }

    /**
     * Supported platforms
     */
    async platformsPlatformListV1(requestParameters: PlatformsPlatformListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SitePlatformsSupportedResponse> {
        const response = await this.platformsPlatformListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PlatformsAddAccountV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlatformsAddAccountV1LanguageEnum = typeof PlatformsAddAccountV1LanguageEnum[keyof typeof PlatformsAddAccountV1LanguageEnum];
/**
 * @export
 */
export const PlatformsAddAccountV1PlatformEnum = {
    vk: 'vk',
    vk_id: 'vk-id',
    ok: 'ok',
    youtube: 'youtube',
    trovo: 'trovo',
    twitch: 'twitch'
} as const;
export type PlatformsAddAccountV1PlatformEnum = typeof PlatformsAddAccountV1PlatformEnum[keyof typeof PlatformsAddAccountV1PlatformEnum];
/**
 * @export
 */
export const PlatformsAddAccountV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlatformsAddAccountV1VEnum = typeof PlatformsAddAccountV1VEnum[keyof typeof PlatformsAddAccountV1VEnum];
/**
 * @export
 */
export const PlatformsGetCategoryV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlatformsGetCategoryV1LanguageEnum = typeof PlatformsGetCategoryV1LanguageEnum[keyof typeof PlatformsGetCategoryV1LanguageEnum];
/**
 * @export
 */
export const PlatformsGetCategoryV1TypeEnum = {
    vk: 'vk',
    youtube: 'youtube',
    trovo: 'trovo',
    twitch: 'twitch',
    vkvideolive: 'vkvideolive'
} as const;
export type PlatformsGetCategoryV1TypeEnum = typeof PlatformsGetCategoryV1TypeEnum[keyof typeof PlatformsGetCategoryV1TypeEnum];
/**
 * @export
 */
export const PlatformsGetCategoryV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlatformsGetCategoryV1VEnum = typeof PlatformsGetCategoryV1VEnum[keyof typeof PlatformsGetCategoryV1VEnum];
/**
 * @export
 */
export const PlatformsLogoutAccountV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlatformsLogoutAccountV1LanguageEnum = typeof PlatformsLogoutAccountV1LanguageEnum[keyof typeof PlatformsLogoutAccountV1LanguageEnum];
/**
 * @export
 */
export const PlatformsLogoutAccountV1PlatformEnum = {
    vk: 'vk',
    vk_id: 'vk-id',
    ok: 'ok',
    youtube: 'youtube',
    trovo: 'trovo',
    twitch: 'twitch'
} as const;
export type PlatformsLogoutAccountV1PlatformEnum = typeof PlatformsLogoutAccountV1PlatformEnum[keyof typeof PlatformsLogoutAccountV1PlatformEnum];
/**
 * @export
 */
export const PlatformsLogoutAccountV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlatformsLogoutAccountV1VEnum = typeof PlatformsLogoutAccountV1VEnum[keyof typeof PlatformsLogoutAccountV1VEnum];
/**
 * @export
 */
export const PlatformsPlatformListV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlatformsPlatformListV1LanguageEnum = typeof PlatformsPlatformListV1LanguageEnum[keyof typeof PlatformsPlatformListV1LanguageEnum];
/**
 * @export
 */
export const PlatformsPlatformListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlatformsPlatformListV1VEnum = typeof PlatformsPlatformListV1VEnum[keyof typeof PlatformsPlatformListV1VEnum];
