/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  MethodBroadcastRestreamsResponse,
  MethodCurrentBroadcastResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MethodBroadcastRestreamsResponseFromJSON,
    MethodBroadcastRestreamsResponseToJSON,
    MethodCurrentBroadcastResponseFromJSON,
    MethodCurrentBroadcastResponseToJSON,
} from '../models/index';

export interface MethodBroadcastRestreamsV1Request {
    language: MethodBroadcastRestreamsV1LanguageEnum;
    broadcast_id: number;
    key: string;
    v?: MethodBroadcastRestreamsV1VEnum;
}

export interface MethodBroadcastTokenChannelV1Request {
    language: MethodBroadcastTokenChannelV1LanguageEnum;
    key: string;
    v?: MethodBroadcastTokenChannelV1VEnum;
}

/**
 * BroadcastApi - interface
 * 
 * @export
 * @interface BroadcastApiInterface
 */
export interface BroadcastApiInterface {
    /**
     * 
     * @summary Get restreams
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} broadcast_id broadcast id
     * @param {string} key Chat token
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApiInterface
     */
    methodBroadcastRestreamsV1Raw(requestParameters: MethodBroadcastRestreamsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MethodBroadcastRestreamsResponse>>;

    /**
     * Get restreams
     */
    methodBroadcastRestreamsV1(requestParameters: MethodBroadcastRestreamsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MethodBroadcastRestreamsResponse>;

    /**
     * 
     * @summary Connect channel, long polling
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {string} key 
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApiInterface
     */
    methodBroadcastTokenChannelV1Raw(requestParameters: MethodBroadcastTokenChannelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MethodCurrentBroadcastResponse>>;

    /**
     * Connect channel, long polling
     */
    methodBroadcastTokenChannelV1(requestParameters: MethodBroadcastTokenChannelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MethodCurrentBroadcastResponse | null | undefined >;

}

/**
 * 
 */
export class BroadcastApi extends runtime.BaseAPI implements BroadcastApiInterface {

    /**
     * Get restreams
     */
    async methodBroadcastRestreamsV1Raw(requestParameters: MethodBroadcastRestreamsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MethodBroadcastRestreamsResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling methodBroadcastRestreamsV1().'
            );
        }

        if (requestParameters['broadcast_id'] == null) {
            throw new runtime.RequiredError(
                'broadcast_id',
                'Required parameter "broadcast_id" was null or undefined when calling methodBroadcastRestreamsV1().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling methodBroadcastRestreamsV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['broadcast_id'] != null) {
            queryParameters['broadcast_id'] = requestParameters['broadcast_id'];
        }

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/broadcast/restreams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MethodBroadcastRestreamsResponseFromJSON(jsonValue));
    }

    /**
     * Get restreams
     */
    async methodBroadcastRestreamsV1(requestParameters: MethodBroadcastRestreamsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MethodBroadcastRestreamsResponse> {
        const response = await this.methodBroadcastRestreamsV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Connect channel, long polling
     */
    async methodBroadcastTokenChannelV1Raw(requestParameters: MethodBroadcastTokenChannelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MethodCurrentBroadcastResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling methodBroadcastTokenChannelV1().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling methodBroadcastTokenChannelV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/broadcast/longpoll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MethodCurrentBroadcastResponseFromJSON(jsonValue));
    }

    /**
     * Connect channel, long polling
     */
    async methodBroadcastTokenChannelV1(requestParameters: MethodBroadcastTokenChannelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MethodCurrentBroadcastResponse | null | undefined > {
        const response = await this.methodBroadcastTokenChannelV1Raw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

}

/**
 * @export
 */
export const MethodBroadcastRestreamsV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type MethodBroadcastRestreamsV1LanguageEnum = typeof MethodBroadcastRestreamsV1LanguageEnum[keyof typeof MethodBroadcastRestreamsV1LanguageEnum];
/**
 * @export
 */
export const MethodBroadcastRestreamsV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type MethodBroadcastRestreamsV1VEnum = typeof MethodBroadcastRestreamsV1VEnum[keyof typeof MethodBroadcastRestreamsV1VEnum];
/**
 * @export
 */
export const MethodBroadcastTokenChannelV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type MethodBroadcastTokenChannelV1LanguageEnum = typeof MethodBroadcastTokenChannelV1LanguageEnum[keyof typeof MethodBroadcastTokenChannelV1LanguageEnum];
/**
 * @export
 */
export const MethodBroadcastTokenChannelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type MethodBroadcastTokenChannelV1VEnum = typeof MethodBroadcastTokenChannelV1VEnum[keyof typeof MethodBroadcastTokenChannelV1VEnum];
