/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SiteTranscoderListResponse,
  SuccessResponse,
  TranscoderCreateDto,
  TranscoderItemDto,
  TranscoderUpdateDto,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SiteTranscoderListResponseFromJSON,
    SiteTranscoderListResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    TranscoderCreateDtoFromJSON,
    TranscoderCreateDtoToJSON,
    TranscoderItemDtoFromJSON,
    TranscoderItemDtoToJSON,
    TranscoderUpdateDtoFromJSON,
    TranscoderUpdateDtoToJSON,
} from '../models/index';

export interface TranscodersAddV1Request {
    TranscoderCreateDto: TranscoderCreateDto;
}

export interface TranscodersDeleteV1Request {
    TranscoderItemDto: TranscoderItemDto;
}

export interface TranscodersListV1Request {
    language: TranscodersListV1LanguageEnum;
    project_id: number;
    v?: TranscodersListV1VEnum;
}

export interface TranscodersStopV1Request {
    TranscoderItemDto: TranscoderItemDto;
}

export interface TranscodersUpdateV1Request {
    TranscoderUpdateDto: TranscoderUpdateDto;
}

/**
 * TranscodersApi - interface
 * 
 * @export
 * @interface TranscodersApiInterface
 */
export interface TranscodersApiInterface {
    /**
     * 
     * @summary Transcoder create
     * @param {TranscoderCreateDto} TranscoderCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApiInterface
     */
    transcodersAddV1Raw(requestParameters: TranscodersAddV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>>;

    /**
     * Transcoder create
     */
    transcodersAddV1(requestParameters: TranscodersAddV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;

    /**
     * 
     * @summary Transcoder delete
     * @param {TranscoderItemDto} TranscoderItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApiInterface
     */
    transcodersDeleteV1Raw(requestParameters: TranscodersDeleteV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Transcoder delete
     */
    transcodersDeleteV1(requestParameters: TranscodersDeleteV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary List of transcoder
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApiInterface
     */
    transcodersListV1Raw(requestParameters: TranscodersListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteTranscoderListResponse>>;

    /**
     * List of transcoder
     */
    transcodersListV1(requestParameters: TranscodersListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteTranscoderListResponse>;

    /**
     * 
     * @summary Transcoder stop
     * @param {TranscoderItemDto} TranscoderItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApiInterface
     */
    transcodersStopV1Raw(requestParameters: TranscodersStopV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Transcoder stop
     */
    transcodersStopV1(requestParameters: TranscodersStopV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Transcoder update
     * @param {TranscoderUpdateDto} TranscoderUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApiInterface
     */
    transcodersUpdateV1Raw(requestParameters: TranscodersUpdateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Transcoder update
     */
    transcodersUpdateV1(requestParameters: TranscodersUpdateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

}

/**
 * 
 */
export class TranscodersApi extends runtime.BaseAPI implements TranscodersApiInterface {

    /**
     * Transcoder create
     */
    async transcodersAddV1Raw(requestParameters: TranscodersAddV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['TranscoderCreateDto'] == null) {
            throw new runtime.RequiredError(
                'TranscoderCreateDto',
                'Required parameter "TranscoderCreateDto" was null or undefined when calling transcodersAddV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/transcoder/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TranscoderCreateDtoToJSON(requestParameters['TranscoderCreateDto']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Transcoder create
     */
    async transcodersAddV1(requestParameters: TranscodersAddV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.transcodersAddV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Transcoder delete
     */
    async transcodersDeleteV1Raw(requestParameters: TranscodersDeleteV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['TranscoderItemDto'] == null) {
            throw new runtime.RequiredError(
                'TranscoderItemDto',
                'Required parameter "TranscoderItemDto" was null or undefined when calling transcodersDeleteV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/transcoder/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TranscoderItemDtoToJSON(requestParameters['TranscoderItemDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Transcoder delete
     */
    async transcodersDeleteV1(requestParameters: TranscodersDeleteV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.transcodersDeleteV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of transcoder
     */
    async transcodersListV1Raw(requestParameters: TranscodersListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteTranscoderListResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling transcodersListV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling transcodersListV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/transcoder/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteTranscoderListResponseFromJSON(jsonValue));
    }

    /**
     * List of transcoder
     */
    async transcodersListV1(requestParameters: TranscodersListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteTranscoderListResponse> {
        const response = await this.transcodersListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Transcoder stop
     */
    async transcodersStopV1Raw(requestParameters: TranscodersStopV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['TranscoderItemDto'] == null) {
            throw new runtime.RequiredError(
                'TranscoderItemDto',
                'Required parameter "TranscoderItemDto" was null or undefined when calling transcodersStopV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/transcoder/stop`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TranscoderItemDtoToJSON(requestParameters['TranscoderItemDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Transcoder stop
     */
    async transcodersStopV1(requestParameters: TranscodersStopV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.transcodersStopV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Transcoder update
     */
    async transcodersUpdateV1Raw(requestParameters: TranscodersUpdateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['TranscoderUpdateDto'] == null) {
            throw new runtime.RequiredError(
                'TranscoderUpdateDto',
                'Required parameter "TranscoderUpdateDto" was null or undefined when calling transcodersUpdateV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/transcoder/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TranscoderUpdateDtoToJSON(requestParameters['TranscoderUpdateDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Transcoder update
     */
    async transcodersUpdateV1(requestParameters: TranscodersUpdateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.transcodersUpdateV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const TranscodersListV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type TranscodersListV1LanguageEnum = typeof TranscodersListV1LanguageEnum[keyof typeof TranscodersListV1LanguageEnum];
/**
 * @export
 */
export const TranscodersListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type TranscodersListV1VEnum = typeof TranscodersListV1VEnum[keyof typeof TranscodersListV1VEnum];
