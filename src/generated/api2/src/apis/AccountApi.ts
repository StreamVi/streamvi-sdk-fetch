/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SuccessResponse,
  UserProfileResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UserProfileResponseFromJSON,
    UserProfileResponseToJSON,
} from '../models/index';

export interface AccountGetProfileV1Request {
    language: AccountGetProfileV1LanguageEnum;
    v?: AccountGetProfileV1VEnum;
    project_id?: number | null;
}

export interface AccountUpdateProfileV1Request {
    v: AccountUpdateProfileV1VEnum;
    language: AccountUpdateProfileV1LanguageEnum;
    first_name: string;
    last_name: string;
    avatar?: Blob;
}

/**
 * AccountApi - interface
 * 
 * @export
 * @interface AccountApiInterface
 */
export interface AccountApiInterface {
    /**
     * 
     * @summary Get account profile
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [project_id] Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountGetProfileV1Raw(requestParameters: AccountGetProfileV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfileResponse>>;

    /**
     * Get account profile
     */
    accountGetProfileV1(requestParameters: AccountGetProfileV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfileResponse>;

    /**
     * 
     * @summary Update account profile
     * @param {string} v Version
     * @param {string} language Current language
     * @param {string} first_name First name
     * @param {string} last_name Last name
     * @param {Blob} [avatar] File for avatar upload max size 2MB, format: jpeg, jpg, png
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountUpdateProfileV1Raw(requestParameters: AccountUpdateProfileV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Update account profile
     */
    accountUpdateProfileV1(requestParameters: AccountUpdateProfileV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI implements AccountApiInterface {

    /**
     * Get account profile
     */
    async accountGetProfileV1Raw(requestParameters: AccountGetProfileV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfileResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling accountGetProfileV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/account/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileResponseFromJSON(jsonValue));
    }

    /**
     * Get account profile
     */
    async accountGetProfileV1(requestParameters: AccountGetProfileV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfileResponse> {
        const response = await this.accountGetProfileV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update account profile
     */
    async accountUpdateProfileV1Raw(requestParameters: AccountUpdateProfileV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['v'] == null) {
            throw new runtime.RequiredError(
                'v',
                'Required parameter "v" was null or undefined when calling accountUpdateProfileV1().'
            );
        }

        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling accountUpdateProfileV1().'
            );
        }

        if (requestParameters['first_name'] == null) {
            throw new runtime.RequiredError(
                'first_name',
                'Required parameter "first_name" was null or undefined when calling accountUpdateProfileV1().'
            );
        }

        if (requestParameters['last_name'] == null) {
            throw new runtime.RequiredError(
                'last_name',
                'Required parameter "last_name" was null or undefined when calling accountUpdateProfileV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['v'] != null) {
            formParams.append('v', requestParameters['v'] as any);
        } else {
            formParams.append('v', '1' as any);
        }

        if (requestParameters['language'] != null) {
            formParams.append('language', requestParameters['language'] as any);
        }

        if (requestParameters['first_name'] != null) {
            formParams.append('first_name', requestParameters['first_name'] as any);
        }

        if (requestParameters['last_name'] != null) {
            formParams.append('last_name', requestParameters['last_name'] as any);
        }

        if (requestParameters['avatar'] != null) {
            formParams.append('avatar', requestParameters['avatar'] as any);
        }

        const response = await this.request({
            path: `/method/account/profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Update account profile
     */
    async accountUpdateProfileV1(requestParameters: AccountUpdateProfileV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.accountUpdateProfileV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AccountGetProfileV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type AccountGetProfileV1LanguageEnum = typeof AccountGetProfileV1LanguageEnum[keyof typeof AccountGetProfileV1LanguageEnum];
/**
 * @export
 */
export const AccountGetProfileV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AccountGetProfileV1VEnum = typeof AccountGetProfileV1VEnum[keyof typeof AccountGetProfileV1VEnum];
/**
 * @export
 */
export const AccountUpdateProfileV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AccountUpdateProfileV1VEnum = typeof AccountUpdateProfileV1VEnum[keyof typeof AccountUpdateProfileV1VEnum];
/**
 * @export
 */
export const AccountUpdateProfileV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type AccountUpdateProfileV1LanguageEnum = typeof AccountUpdateProfileV1LanguageEnum[keyof typeof AccountUpdateProfileV1LanguageEnum];
