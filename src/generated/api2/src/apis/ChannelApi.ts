/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  MethodSetStatusChannelRequest,
  SiteGetShortChannelResponse,
  SiteSearchChannelResponse,
  SuccessResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MethodSetStatusChannelRequestFromJSON,
    MethodSetStatusChannelRequestToJSON,
    SiteGetShortChannelResponseFromJSON,
    SiteGetShortChannelResponseToJSON,
    SiteSearchChannelResponseFromJSON,
    SiteSearchChannelResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface ChannelShortChannelListV1Request {
    language: ChannelShortChannelListV1LanguageEnum;
    project_id: number;
    v?: ChannelShortChannelListV1VEnum;
}

export interface MethodSearchV1Request {
    language: MethodSearchV1LanguageEnum;
    project_id: number;
    v?: MethodSearchV1VEnum;
    type?: MethodSearchV1TypeEnum;
    platform?: string;
    name?: string;
    limit?: number;
    offset?: number;
}

export interface MethodSetStatusV1Request {
    MethodSetStatusChannelRequest: MethodSetStatusChannelRequest;
}

/**
 * ChannelApi - interface
 * 
 * @export
 * @interface ChannelApiInterface
 */
export interface ChannelApiInterface {
    /**
     * 
     * @summary Minimal channel list
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     */
    channelShortChannelListV1Raw(requestParameters: ChannelShortChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteGetShortChannelResponse>>;

    /**
     * Minimal channel list
     */
    channelShortChannelListV1(requestParameters: ChannelShortChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteGetShortChannelResponse>;

    /**
     * 
     * @summary Search channel list
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {'all' | 'my' | 'available' | 'active'} [type] 
     * @param {string} [platform] platform type
     * @param {string} [name] name
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     */
    methodSearchV1Raw(requestParameters: MethodSearchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteSearchChannelResponse>>;

    /**
     * Search channel list
     */
    methodSearchV1(requestParameters: MethodSearchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteSearchChannelResponse>;

    /**
     * 
     * @summary Get live status
     * @param {MethodSetStatusChannelRequest} MethodSetStatusChannelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     */
    methodSetStatusV1Raw(requestParameters: MethodSetStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Get live status
     */
    methodSetStatusV1(requestParameters: MethodSetStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

}

/**
 * 
 */
export class ChannelApi extends runtime.BaseAPI implements ChannelApiInterface {

    /**
     * Minimal channel list
     */
    async channelShortChannelListV1Raw(requestParameters: ChannelShortChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteGetShortChannelResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling channelShortChannelListV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling channelShortChannelListV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel/short`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteGetShortChannelResponseFromJSON(jsonValue));
    }

    /**
     * Minimal channel list
     */
    async channelShortChannelListV1(requestParameters: ChannelShortChannelListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteGetShortChannelResponse> {
        const response = await this.channelShortChannelListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search channel list
     */
    async methodSearchV1Raw(requestParameters: MethodSearchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteSearchChannelResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling methodSearchV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling methodSearchV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // X-API-KEY authentication
        }

        const response = await this.request({
            path: `/method/channel/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteSearchChannelResponseFromJSON(jsonValue));
    }

    /**
     * Search channel list
     */
    async methodSearchV1(requestParameters: MethodSearchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteSearchChannelResponse> {
        const response = await this.methodSearchV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get live status
     */
    async methodSetStatusV1Raw(requestParameters: MethodSetStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['MethodSetStatusChannelRequest'] == null) {
            throw new runtime.RequiredError(
                'MethodSetStatusChannelRequest',
                'Required parameter "MethodSetStatusChannelRequest" was null or undefined when calling methodSetStatusV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // X-API-KEY authentication
        }

        const response = await this.request({
            path: `/method/channel/set-status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MethodSetStatusChannelRequestToJSON(requestParameters['MethodSetStatusChannelRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Get live status
     */
    async methodSetStatusV1(requestParameters: MethodSetStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.methodSetStatusV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ChannelShortChannelListV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ChannelShortChannelListV1LanguageEnum = typeof ChannelShortChannelListV1LanguageEnum[keyof typeof ChannelShortChannelListV1LanguageEnum];
/**
 * @export
 */
export const ChannelShortChannelListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelShortChannelListV1VEnum = typeof ChannelShortChannelListV1VEnum[keyof typeof ChannelShortChannelListV1VEnum];
/**
 * @export
 */
export const MethodSearchV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type MethodSearchV1LanguageEnum = typeof MethodSearchV1LanguageEnum[keyof typeof MethodSearchV1LanguageEnum];
/**
 * @export
 */
export const MethodSearchV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type MethodSearchV1VEnum = typeof MethodSearchV1VEnum[keyof typeof MethodSearchV1VEnum];
/**
 * @export
 */
export const MethodSearchV1TypeEnum = {
    all: 'all',
    my: 'my',
    available: 'available',
    active: 'active'
} as const;
export type MethodSearchV1TypeEnum = typeof MethodSearchV1TypeEnum[keyof typeof MethodSearchV1TypeEnum];
