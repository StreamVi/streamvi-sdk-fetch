/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PlanStorageCheckResponse,
  PlanStorageDiscountResponse,
  PlanStorageForProject,
  PlanStorageResponseDto,
  SuccessResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PlanStorageCheckResponseFromJSON,
    PlanStorageCheckResponseToJSON,
    PlanStorageDiscountResponseFromJSON,
    PlanStorageDiscountResponseToJSON,
    PlanStorageForProjectFromJSON,
    PlanStorageForProjectToJSON,
    PlanStorageResponseDtoFromJSON,
    PlanStorageResponseDtoToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface PlanStorageBuyV1Request {
    language: PlanStorageBuyV1LanguageEnum;
    project_id: number;
    period: PlanStorageBuyV1PeriodEnum;
    plan_storage_id: number;
    v?: PlanStorageBuyV1VEnum;
    size?: number;
}

export interface PlanStorageCancelV1Request {
    language: PlanStorageCancelV1LanguageEnum;
    project_id: number;
    v?: PlanStorageCancelV1VEnum;
}

export interface PlanStorageCheckV1Request {
    language: PlanStorageCheckV1LanguageEnum;
    project_id: number;
    v?: PlanStorageCheckV1VEnum;
}

export interface PlanStorageGetDiscountV1Request {
    language: PlanStorageGetDiscountV1LanguageEnum;
    v?: PlanStorageGetDiscountV1VEnum;
}

export interface PlanStorageListV1Request {
    language: PlanStorageListV1LanguageEnum;
    v?: PlanStorageListV1VEnum;
}

export interface PlanStorageTariffV1Request {
    language: PlanStorageTariffV1LanguageEnum;
    project_id: number;
    v?: PlanStorageTariffV1VEnum;
}

/**
 * PlanStorageApi - interface
 * 
 * @export
 * @interface PlanStorageApiInterface
 */
export interface PlanStorageApiInterface {
    /**
     * 
     * @summary Buy storage tariff
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'month' | 'year'} period Period
     * @param {number} plan_storage_id Storage plan id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [size] Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageBuyV1Raw(requestParameters: PlanStorageBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Buy storage tariff
     */
    planStorageBuyV1(requestParameters: PlanStorageBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Remove next tariff
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageCancelV1Raw(requestParameters: PlanStorageCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Remove next tariff
     */
    planStorageCancelV1(requestParameters: PlanStorageCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Check storage tariff before buy
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageCheckV1Raw(requestParameters: PlanStorageCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageCheckResponse>>;

    /**
     * Check storage tariff before buy
     */
    planStorageCheckV1(requestParameters: PlanStorageCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageCheckResponse>;

    /**
     * 
     * @summary Get discount of storage
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageGetDiscountV1Raw(requestParameters: PlanStorageGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageDiscountResponse>>;

    /**
     * Get discount of storage
     */
    planStorageGetDiscountV1(requestParameters: PlanStorageGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageDiscountResponse>;

    /**
     * 
     * @summary Get info for storage tariff
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageListV1Raw(requestParameters: PlanStorageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageResponseDto>>;

    /**
     * Get info for storage tariff
     */
    planStorageListV1(requestParameters: PlanStorageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageResponseDto>;

    /**
     * 
     * @summary Get tariff for project
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageTariffV1Raw(requestParameters: PlanStorageTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageForProject>>;

    /**
     * Get tariff for project
     */
    planStorageTariffV1(requestParameters: PlanStorageTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageForProject>;

}

/**
 * 
 */
export class PlanStorageApi extends runtime.BaseAPI implements PlanStorageApiInterface {

    /**
     * Buy storage tariff
     */
    async planStorageBuyV1Raw(requestParameters: PlanStorageBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planStorageBuyV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling planStorageBuyV1().'
            );
        }

        if (requestParameters['period'] == null) {
            throw new runtime.RequiredError(
                'period',
                'Required parameter "period" was null or undefined when calling planStorageBuyV1().'
            );
        }

        if (requestParameters['plan_storage_id'] == null) {
            throw new runtime.RequiredError(
                'plan_storage_id',
                'Required parameter "plan_storage_id" was null or undefined when calling planStorageBuyV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['plan_storage_id'] != null) {
            queryParameters['plan_storage_id'] = requestParameters['plan_storage_id'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_storage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Buy storage tariff
     */
    async planStorageBuyV1(requestParameters: PlanStorageBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.planStorageBuyV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove next tariff
     */
    async planStorageCancelV1Raw(requestParameters: PlanStorageCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planStorageCancelV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling planStorageCancelV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_storage`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove next tariff
     */
    async planStorageCancelV1(requestParameters: PlanStorageCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.planStorageCancelV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check storage tariff before buy
     */
    async planStorageCheckV1Raw(requestParameters: PlanStorageCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageCheckResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planStorageCheckV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling planStorageCheckV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_storage/check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanStorageCheckResponseFromJSON(jsonValue));
    }

    /**
     * Check storage tariff before buy
     */
    async planStorageCheckV1(requestParameters: PlanStorageCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageCheckResponse> {
        const response = await this.planStorageCheckV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get discount of storage
     */
    async planStorageGetDiscountV1Raw(requestParameters: PlanStorageGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageDiscountResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planStorageGetDiscountV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_storage/get_discount`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanStorageDiscountResponseFromJSON(jsonValue));
    }

    /**
     * Get discount of storage
     */
    async planStorageGetDiscountV1(requestParameters: PlanStorageGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageDiscountResponse> {
        const response = await this.planStorageGetDiscountV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get info for storage tariff
     */
    async planStorageListV1Raw(requestParameters: PlanStorageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageResponseDto>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planStorageListV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_storage/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanStorageResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get info for storage tariff
     */
    async planStorageListV1(requestParameters: PlanStorageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageResponseDto> {
        const response = await this.planStorageListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get tariff for project
     */
    async planStorageTariffV1Raw(requestParameters: PlanStorageTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanStorageForProject>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planStorageTariffV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling planStorageTariffV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_storage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanStorageForProjectFromJSON(jsonValue));
    }

    /**
     * Get tariff for project
     */
    async planStorageTariffV1(requestParameters: PlanStorageTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanStorageForProject> {
        const response = await this.planStorageTariffV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PlanStorageBuyV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanStorageBuyV1LanguageEnum = typeof PlanStorageBuyV1LanguageEnum[keyof typeof PlanStorageBuyV1LanguageEnum];
/**
 * @export
 */
export const PlanStorageBuyV1PeriodEnum = {
    month: 'month',
    year: 'year'
} as const;
export type PlanStorageBuyV1PeriodEnum = typeof PlanStorageBuyV1PeriodEnum[keyof typeof PlanStorageBuyV1PeriodEnum];
/**
 * @export
 */
export const PlanStorageBuyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanStorageBuyV1VEnum = typeof PlanStorageBuyV1VEnum[keyof typeof PlanStorageBuyV1VEnum];
/**
 * @export
 */
export const PlanStorageCancelV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanStorageCancelV1LanguageEnum = typeof PlanStorageCancelV1LanguageEnum[keyof typeof PlanStorageCancelV1LanguageEnum];
/**
 * @export
 */
export const PlanStorageCancelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanStorageCancelV1VEnum = typeof PlanStorageCancelV1VEnum[keyof typeof PlanStorageCancelV1VEnum];
/**
 * @export
 */
export const PlanStorageCheckV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanStorageCheckV1LanguageEnum = typeof PlanStorageCheckV1LanguageEnum[keyof typeof PlanStorageCheckV1LanguageEnum];
/**
 * @export
 */
export const PlanStorageCheckV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanStorageCheckV1VEnum = typeof PlanStorageCheckV1VEnum[keyof typeof PlanStorageCheckV1VEnum];
/**
 * @export
 */
export const PlanStorageGetDiscountV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanStorageGetDiscountV1LanguageEnum = typeof PlanStorageGetDiscountV1LanguageEnum[keyof typeof PlanStorageGetDiscountV1LanguageEnum];
/**
 * @export
 */
export const PlanStorageGetDiscountV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanStorageGetDiscountV1VEnum = typeof PlanStorageGetDiscountV1VEnum[keyof typeof PlanStorageGetDiscountV1VEnum];
/**
 * @export
 */
export const PlanStorageListV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanStorageListV1LanguageEnum = typeof PlanStorageListV1LanguageEnum[keyof typeof PlanStorageListV1LanguageEnum];
/**
 * @export
 */
export const PlanStorageListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanStorageListV1VEnum = typeof PlanStorageListV1VEnum[keyof typeof PlanStorageListV1VEnum];
/**
 * @export
 */
export const PlanStorageTariffV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanStorageTariffV1LanguageEnum = typeof PlanStorageTariffV1LanguageEnum[keyof typeof PlanStorageTariffV1LanguageEnum];
/**
 * @export
 */
export const PlanStorageTariffV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanStorageTariffV1VEnum = typeof PlanStorageTariffV1VEnum[keyof typeof PlanStorageTariffV1VEnum];
