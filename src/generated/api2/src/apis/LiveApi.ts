/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SiteLiveRestreamsInfoResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SiteLiveRestreamsInfoResponseFromJSON,
    SiteLiveRestreamsInfoResponseToJSON,
} from '../models/index';

export interface ControllersRestreamsV1Request {
    language: ControllersRestreamsV1LanguageEnum;
    project_id: number;
    broadcast_id: number;
    v?: ControllersRestreamsV1VEnum;
}

/**
 * LiveApi - interface
 * 
 * @export
 * @interface LiveApiInterface
 */
export interface LiveApiInterface {
    /**
     * 
     * @summary View live info
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} broadcast_id Broadcast id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    controllersRestreamsV1Raw(requestParameters: ControllersRestreamsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteLiveRestreamsInfoResponse>>;

    /**
     * View live info
     */
    controllersRestreamsV1(requestParameters: ControllersRestreamsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteLiveRestreamsInfoResponse>;

}

/**
 * 
 */
export class LiveApi extends runtime.BaseAPI implements LiveApiInterface {

    /**
     * View live info
     */
    async controllersRestreamsV1Raw(requestParameters: ControllersRestreamsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteLiveRestreamsInfoResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling controllersRestreamsV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling controllersRestreamsV1().'
            );
        }

        if (requestParameters['broadcast_id'] == null) {
            throw new runtime.RequiredError(
                'broadcast_id',
                'Required parameter "broadcast_id" was null or undefined when calling controllersRestreamsV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['broadcast_id'] != null) {
            queryParameters['broadcast_id'] = requestParameters['broadcast_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/live/restreams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteLiveRestreamsInfoResponseFromJSON(jsonValue));
    }

    /**
     * View live info
     */
    async controllersRestreamsV1(requestParameters: ControllersRestreamsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteLiveRestreamsInfoResponse> {
        const response = await this.controllersRestreamsV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ControllersRestreamsV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ControllersRestreamsV1LanguageEnum = typeof ControllersRestreamsV1LanguageEnum[keyof typeof ControllersRestreamsV1LanguageEnum];
/**
 * @export
 */
export const ControllersRestreamsV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ControllersRestreamsV1VEnum = typeof ControllersRestreamsV1VEnum[keyof typeof ControllersRestreamsV1VEnum];
