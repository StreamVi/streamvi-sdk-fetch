/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckPullKeyResponse,
  CreatePullKeyRequest,
  CreatePullKeyResponse,
  ErrorResponse,
  PullKeyListResponse,
  SuccessResponse,
  UpdatePullKeyRequest,
} from '../models/index';
import {
    CheckPullKeyResponseFromJSON,
    CheckPullKeyResponseToJSON,
    CreatePullKeyRequestFromJSON,
    CreatePullKeyRequestToJSON,
    CreatePullKeyResponseFromJSON,
    CreatePullKeyResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PullKeyListResponseFromJSON,
    PullKeyListResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UpdatePullKeyRequestFromJSON,
    UpdatePullKeyRequestToJSON,
} from '../models/index';

export interface StreamPullKeysSiteCheckV1Request {
    language: StreamPullKeysSiteCheckV1LanguageEnum;
    project_id: number;
    key: string;
    v?: StreamPullKeysSiteCheckV1VEnum;
}

export interface StreamPullKeysSiteCreateV1Request {
    CreatePullKeyRequest: CreatePullKeyRequest;
}

export interface StreamPullKeysSiteGetV1Request {
    language: StreamPullKeysSiteGetV1LanguageEnum;
    project_id: number;
    v?: StreamPullKeysSiteGetV1VEnum;
}

export interface StreamPullKeysSiteRemoveV1Request {
    language: StreamPullKeysSiteRemoveV1LanguageEnum;
    project_id: number;
    key: string;
    v?: StreamPullKeysSiteRemoveV1VEnum;
}

export interface StreamPullKeysSiteUpdateV1Request {
    UpdatePullKeyRequest: UpdatePullKeyRequest;
}

/**
 * StreamPullKeysApi - interface
 * 
 * @export
 * @interface StreamPullKeysApiInterface
 */
export interface StreamPullKeysApiInterface {
    /**
     * 
     * @summary Check key
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {string} key Key
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApiInterface
     */
    streamPullKeysSiteCheckV1Raw(requestParameters: StreamPullKeysSiteCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckPullKeyResponse>>;

    /**
     * Check key
     */
    streamPullKeysSiteCheckV1(requestParameters: StreamPullKeysSiteCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckPullKeyResponse>;

    /**
     * 
     * @summary Create key
     * @param {CreatePullKeyRequest} CreatePullKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApiInterface
     */
    streamPullKeysSiteCreateV1Raw(requestParameters: StreamPullKeysSiteCreateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePullKeyResponse>>;

    /**
     * Create key
     */
    streamPullKeysSiteCreateV1(requestParameters: StreamPullKeysSiteCreateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePullKeyResponse>;

    /**
     * 
     * @summary List keys
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApiInterface
     */
    streamPullKeysSiteGetV1Raw(requestParameters: StreamPullKeysSiteGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PullKeyListResponse>>;

    /**
     * List keys
     */
    streamPullKeysSiteGetV1(requestParameters: StreamPullKeysSiteGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PullKeyListResponse>;

    /**
     * 
     * @summary Delete key
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {string} key Key
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApiInterface
     */
    streamPullKeysSiteRemoveV1Raw(requestParameters: StreamPullKeysSiteRemoveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Delete key
     */
    streamPullKeysSiteRemoveV1(requestParameters: StreamPullKeysSiteRemoveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Update key
     * @param {UpdatePullKeyRequest} UpdatePullKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApiInterface
     */
    streamPullKeysSiteUpdateV1Raw(requestParameters: StreamPullKeysSiteUpdateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Update key
     */
    streamPullKeysSiteUpdateV1(requestParameters: StreamPullKeysSiteUpdateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

}

/**
 * 
 */
export class StreamPullKeysApi extends runtime.BaseAPI implements StreamPullKeysApiInterface {

    /**
     * Check key
     */
    async streamPullKeysSiteCheckV1Raw(requestParameters: StreamPullKeysSiteCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckPullKeyResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling streamPullKeysSiteCheckV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling streamPullKeysSiteCheckV1().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling streamPullKeysSiteCheckV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/stream-pull-keys/check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckPullKeyResponseFromJSON(jsonValue));
    }

    /**
     * Check key
     */
    async streamPullKeysSiteCheckV1(requestParameters: StreamPullKeysSiteCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckPullKeyResponse> {
        const response = await this.streamPullKeysSiteCheckV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create key
     */
    async streamPullKeysSiteCreateV1Raw(requestParameters: StreamPullKeysSiteCreateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePullKeyResponse>> {
        if (requestParameters['CreatePullKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'CreatePullKeyRequest',
                'Required parameter "CreatePullKeyRequest" was null or undefined when calling streamPullKeysSiteCreateV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/stream-pull-keys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePullKeyRequestToJSON(requestParameters['CreatePullKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePullKeyResponseFromJSON(jsonValue));
    }

    /**
     * Create key
     */
    async streamPullKeysSiteCreateV1(requestParameters: StreamPullKeysSiteCreateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePullKeyResponse> {
        const response = await this.streamPullKeysSiteCreateV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List keys
     */
    async streamPullKeysSiteGetV1Raw(requestParameters: StreamPullKeysSiteGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PullKeyListResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling streamPullKeysSiteGetV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling streamPullKeysSiteGetV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/stream-pull-keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PullKeyListResponseFromJSON(jsonValue));
    }

    /**
     * List keys
     */
    async streamPullKeysSiteGetV1(requestParameters: StreamPullKeysSiteGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PullKeyListResponse> {
        const response = await this.streamPullKeysSiteGetV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete key
     */
    async streamPullKeysSiteRemoveV1Raw(requestParameters: StreamPullKeysSiteRemoveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling streamPullKeysSiteRemoveV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling streamPullKeysSiteRemoveV1().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling streamPullKeysSiteRemoveV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/stream-pull-keys`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete key
     */
    async streamPullKeysSiteRemoveV1(requestParameters: StreamPullKeysSiteRemoveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.streamPullKeysSiteRemoveV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update key
     */
    async streamPullKeysSiteUpdateV1Raw(requestParameters: StreamPullKeysSiteUpdateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['UpdatePullKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'UpdatePullKeyRequest',
                'Required parameter "UpdatePullKeyRequest" was null or undefined when calling streamPullKeysSiteUpdateV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/stream-pull-keys`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePullKeyRequestToJSON(requestParameters['UpdatePullKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Update key
     */
    async streamPullKeysSiteUpdateV1(requestParameters: StreamPullKeysSiteUpdateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.streamPullKeysSiteUpdateV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const StreamPullKeysSiteCheckV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type StreamPullKeysSiteCheckV1LanguageEnum = typeof StreamPullKeysSiteCheckV1LanguageEnum[keyof typeof StreamPullKeysSiteCheckV1LanguageEnum];
/**
 * @export
 */
export const StreamPullKeysSiteCheckV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type StreamPullKeysSiteCheckV1VEnum = typeof StreamPullKeysSiteCheckV1VEnum[keyof typeof StreamPullKeysSiteCheckV1VEnum];
/**
 * @export
 */
export const StreamPullKeysSiteGetV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type StreamPullKeysSiteGetV1LanguageEnum = typeof StreamPullKeysSiteGetV1LanguageEnum[keyof typeof StreamPullKeysSiteGetV1LanguageEnum];
/**
 * @export
 */
export const StreamPullKeysSiteGetV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type StreamPullKeysSiteGetV1VEnum = typeof StreamPullKeysSiteGetV1VEnum[keyof typeof StreamPullKeysSiteGetV1VEnum];
/**
 * @export
 */
export const StreamPullKeysSiteRemoveV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type StreamPullKeysSiteRemoveV1LanguageEnum = typeof StreamPullKeysSiteRemoveV1LanguageEnum[keyof typeof StreamPullKeysSiteRemoveV1LanguageEnum];
/**
 * @export
 */
export const StreamPullKeysSiteRemoveV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type StreamPullKeysSiteRemoveV1VEnum = typeof StreamPullKeysSiteRemoveV1VEnum[keyof typeof StreamPullKeysSiteRemoveV1VEnum];
