/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ListOfRtmpServerLocationResponse,
  RtmpServerGraphResponse,
  RtmpServerListV2Response,
  RtmpServerStateResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ListOfRtmpServerLocationResponseFromJSON,
    ListOfRtmpServerLocationResponseToJSON,
    RtmpServerGraphResponseFromJSON,
    RtmpServerGraphResponseToJSON,
    RtmpServerListV2ResponseFromJSON,
    RtmpServerListV2ResponseToJSON,
    RtmpServerStateResponseFromJSON,
    RtmpServerStateResponseToJSON,
} from '../models/index';

export interface MethodRtmpServerListLocationsUnauthorizedV1Request {
    language: MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum;
    v?: MethodRtmpServerListLocationsUnauthorizedV1VEnum;
}

export interface RtmpServerGraphV1Request {
    language: RtmpServerGraphV1LanguageEnum;
    interval: RtmpServerGraphV1IntervalEnum;
    type: RtmpServerGraphV1TypeEnum;
    v?: RtmpServerGraphV1VEnum;
}

export interface RtmpServerListV2Request {
    language: RtmpServerListV2LanguageEnum;
    project_id: number;
    interval: RtmpServerListV2IntervalEnum;
    v?: RtmpServerListV2VEnum;
}

export interface RtmpServerStateV1Request {
    language: RtmpServerStateV1LanguageEnum;
    interval: RtmpServerStateV1IntervalEnum;
    v?: RtmpServerStateV1VEnum;
}

/**
 * RtmpServerApi - interface
 * 
 * @export
 * @interface RtmpServerApiInterface
 */
export interface RtmpServerApiInterface {
    /**
     * 
     * @summary Rtmp locations server list example for unauthorized
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApiInterface
     */
    methodRtmpServerListLocationsUnauthorizedV1Raw(requestParameters: MethodRtmpServerListLocationsUnauthorizedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfRtmpServerLocationResponse>>;

    /**
     * Rtmp locations server list example for unauthorized
     */
    methodRtmpServerListLocationsUnauthorizedV1(requestParameters: MethodRtmpServerListLocationsUnauthorizedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfRtmpServerLocationResponse>;

    /**
     * 
     * @summary Graph of rtmp servers
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {1 | 3 | 6 | 12 | 24} interval Interval state in hours
     * @param {'performance' | 'network' | 'cpu' | 'ram' | 'deliveredPackages'} type Type graph
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApiInterface
     */
    rtmpServerGraphV1Raw(requestParameters: RtmpServerGraphV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RtmpServerGraphResponse>>;

    /**
     * Graph of rtmp servers
     */
    rtmpServerGraphV1(requestParameters: RtmpServerGraphV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RtmpServerGraphResponse>;

    /**
     * 
     * @summary List rtmp servers
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {1 | 3 | 6 | 12 | 24} interval Interval state in hours
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 2 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApiInterface
     */
    rtmpServerListV2Raw(requestParameters: RtmpServerListV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RtmpServerListV2Response>>;

    /**
     * List rtmp servers
     */
    rtmpServerListV2(requestParameters: RtmpServerListV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RtmpServerListV2Response>;

    /**
     * 
     * @summary State of rtmp servers
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {1 | 3 | 6 | 12 | 24} interval Interval state in hours
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApiInterface
     */
    rtmpServerStateV1Raw(requestParameters: RtmpServerStateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RtmpServerStateResponse>>;

    /**
     * State of rtmp servers
     */
    rtmpServerStateV1(requestParameters: RtmpServerStateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RtmpServerStateResponse>;

    /**
     * 
     * @summary State of rtmp servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApiInterface
     */
    rtmpServerUpV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * State of rtmp servers
     */
    rtmpServerUpV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

}

/**
 * 
 */
export class RtmpServerApi extends runtime.BaseAPI implements RtmpServerApiInterface {

    /**
     * Rtmp locations server list example for unauthorized
     */
    async methodRtmpServerListLocationsUnauthorizedV1Raw(requestParameters: MethodRtmpServerListLocationsUnauthorizedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfRtmpServerLocationResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling methodRtmpServerListLocationsUnauthorizedV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/rtmp_server/list_locations_unauthorized`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfRtmpServerLocationResponseFromJSON(jsonValue));
    }

    /**
     * Rtmp locations server list example for unauthorized
     */
    async methodRtmpServerListLocationsUnauthorizedV1(requestParameters: MethodRtmpServerListLocationsUnauthorizedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfRtmpServerLocationResponse> {
        const response = await this.methodRtmpServerListLocationsUnauthorizedV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Graph of rtmp servers
     */
    async rtmpServerGraphV1Raw(requestParameters: RtmpServerGraphV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RtmpServerGraphResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling rtmpServerGraphV1().'
            );
        }

        if (requestParameters['interval'] == null) {
            throw new runtime.RequiredError(
                'interval',
                'Required parameter "interval" was null or undefined when calling rtmpServerGraphV1().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling rtmpServerGraphV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/rtmp_server/graph`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RtmpServerGraphResponseFromJSON(jsonValue));
    }

    /**
     * Graph of rtmp servers
     */
    async rtmpServerGraphV1(requestParameters: RtmpServerGraphV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RtmpServerGraphResponse> {
        const response = await this.rtmpServerGraphV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List rtmp servers
     */
    async rtmpServerListV2Raw(requestParameters: RtmpServerListV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RtmpServerListV2Response>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling rtmpServerListV2().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling rtmpServerListV2().'
            );
        }

        if (requestParameters['interval'] == null) {
            throw new runtime.RequiredError(
                'interval',
                'Required parameter "interval" was null or undefined when calling rtmpServerListV2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '2';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/rtmp_server/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RtmpServerListV2ResponseFromJSON(jsonValue));
    }

    /**
     * List rtmp servers
     */
    async rtmpServerListV2(requestParameters: RtmpServerListV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RtmpServerListV2Response> {
        const response = await this.rtmpServerListV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * State of rtmp servers
     */
    async rtmpServerStateV1Raw(requestParameters: RtmpServerStateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RtmpServerStateResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling rtmpServerStateV1().'
            );
        }

        if (requestParameters['interval'] == null) {
            throw new runtime.RequiredError(
                'interval',
                'Required parameter "interval" was null or undefined when calling rtmpServerStateV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/rtmp_server/state`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RtmpServerStateResponseFromJSON(jsonValue));
    }

    /**
     * State of rtmp servers
     */
    async rtmpServerStateV1(requestParameters: RtmpServerStateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RtmpServerStateResponse> {
        const response = await this.rtmpServerStateV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * State of rtmp servers
     */
    async rtmpServerUpV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/rtmp_server/up`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * State of rtmp servers
     */
    async rtmpServerUpV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.rtmpServerUpV1Raw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum = typeof MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum[keyof typeof MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum];
/**
 * @export
 */
export const MethodRtmpServerListLocationsUnauthorizedV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type MethodRtmpServerListLocationsUnauthorizedV1VEnum = typeof MethodRtmpServerListLocationsUnauthorizedV1VEnum[keyof typeof MethodRtmpServerListLocationsUnauthorizedV1VEnum];
/**
 * @export
 */
export const RtmpServerGraphV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type RtmpServerGraphV1LanguageEnum = typeof RtmpServerGraphV1LanguageEnum[keyof typeof RtmpServerGraphV1LanguageEnum];
/**
 * @export
 */
export const RtmpServerGraphV1IntervalEnum = {
    NUMBER_1: 1,
    NUMBER_3: 3,
    NUMBER_6: 6,
    NUMBER_12: 12,
    NUMBER_24: 24
} as const;
export type RtmpServerGraphV1IntervalEnum = typeof RtmpServerGraphV1IntervalEnum[keyof typeof RtmpServerGraphV1IntervalEnum];
/**
 * @export
 */
export const RtmpServerGraphV1TypeEnum = {
    performance: 'performance',
    network: 'network',
    cpu: 'cpu',
    ram: 'ram',
    deliveredPackages: 'deliveredPackages'
} as const;
export type RtmpServerGraphV1TypeEnum = typeof RtmpServerGraphV1TypeEnum[keyof typeof RtmpServerGraphV1TypeEnum];
/**
 * @export
 */
export const RtmpServerGraphV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type RtmpServerGraphV1VEnum = typeof RtmpServerGraphV1VEnum[keyof typeof RtmpServerGraphV1VEnum];
/**
 * @export
 */
export const RtmpServerListV2LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type RtmpServerListV2LanguageEnum = typeof RtmpServerListV2LanguageEnum[keyof typeof RtmpServerListV2LanguageEnum];
/**
 * @export
 */
export const RtmpServerListV2IntervalEnum = {
    NUMBER_1: 1,
    NUMBER_3: 3,
    NUMBER_6: 6,
    NUMBER_12: 12,
    NUMBER_24: 24
} as const;
export type RtmpServerListV2IntervalEnum = typeof RtmpServerListV2IntervalEnum[keyof typeof RtmpServerListV2IntervalEnum];
/**
 * @export
 */
export const RtmpServerListV2VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type RtmpServerListV2VEnum = typeof RtmpServerListV2VEnum[keyof typeof RtmpServerListV2VEnum];
/**
 * @export
 */
export const RtmpServerStateV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type RtmpServerStateV1LanguageEnum = typeof RtmpServerStateV1LanguageEnum[keyof typeof RtmpServerStateV1LanguageEnum];
/**
 * @export
 */
export const RtmpServerStateV1IntervalEnum = {
    NUMBER_1: 1,
    NUMBER_3: 3,
    NUMBER_6: 6,
    NUMBER_12: 12,
    NUMBER_24: 24
} as const;
export type RtmpServerStateV1IntervalEnum = typeof RtmpServerStateV1IntervalEnum[keyof typeof RtmpServerStateV1IntervalEnum];
/**
 * @export
 */
export const RtmpServerStateV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type RtmpServerStateV1VEnum = typeof RtmpServerStateV1VEnum[keyof typeof RtmpServerStateV1VEnum];
