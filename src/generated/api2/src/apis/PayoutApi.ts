/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ListOfPayoutSystemAccountListItemResponse,
  PayoutCreateRequestBodyDto,
  SuccessResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ListOfPayoutSystemAccountListItemResponseFromJSON,
    ListOfPayoutSystemAccountListItemResponseToJSON,
    PayoutCreateRequestBodyDtoFromJSON,
    PayoutCreateRequestBodyDtoToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface PayoutCreateV1Request {
    language: PayoutCreateV1LanguageEnum;
    PayoutCreateRequestBodyDto: PayoutCreateRequestBodyDto;
    v?: PayoutCreateV1VEnum;
}

export interface PayoutPrepareV1Request {
    language: PayoutPrepareV1LanguageEnum;
    project_id: number;
    v?: PayoutPrepareV1VEnum;
}

/**
 * PayoutApi - interface
 * 
 * @export
 * @interface PayoutApiInterface
 */
export interface PayoutApiInterface {
    /**
     * 
     * @summary Create payout
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {PayoutCreateRequestBodyDto} PayoutCreateRequestBodyDto 
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApiInterface
     */
    payoutCreateV1Raw(requestParameters: PayoutCreateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Create payout
     */
    payoutCreateV1(requestParameters: PayoutCreateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Get payout data for create
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApiInterface
     */
    payoutPrepareV1Raw(requestParameters: PayoutPrepareV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfPayoutSystemAccountListItemResponse>>;

    /**
     * Get payout data for create
     */
    payoutPrepareV1(requestParameters: PayoutPrepareV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfPayoutSystemAccountListItemResponse>;

}

/**
 * 
 */
export class PayoutApi extends runtime.BaseAPI implements PayoutApiInterface {

    /**
     * Create payout
     */
    async payoutCreateV1Raw(requestParameters: PayoutCreateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling payoutCreateV1().'
            );
        }

        if (requestParameters['PayoutCreateRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'PayoutCreateRequestBodyDto',
                'Required parameter "PayoutCreateRequestBodyDto" was null or undefined when calling payoutCreateV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/payout/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PayoutCreateRequestBodyDtoToJSON(requestParameters['PayoutCreateRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Create payout
     */
    async payoutCreateV1(requestParameters: PayoutCreateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.payoutCreateV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get payout data for create
     */
    async payoutPrepareV1Raw(requestParameters: PayoutPrepareV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfPayoutSystemAccountListItemResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling payoutPrepareV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling payoutPrepareV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/payout/prepare`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfPayoutSystemAccountListItemResponseFromJSON(jsonValue));
    }

    /**
     * Get payout data for create
     */
    async payoutPrepareV1(requestParameters: PayoutPrepareV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfPayoutSystemAccountListItemResponse> {
        const response = await this.payoutPrepareV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PayoutCreateV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PayoutCreateV1LanguageEnum = typeof PayoutCreateV1LanguageEnum[keyof typeof PayoutCreateV1LanguageEnum];
/**
 * @export
 */
export const PayoutCreateV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PayoutCreateV1VEnum = typeof PayoutCreateV1VEnum[keyof typeof PayoutCreateV1VEnum];
/**
 * @export
 */
export const PayoutPrepareV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PayoutPrepareV1LanguageEnum = typeof PayoutPrepareV1LanguageEnum[keyof typeof PayoutPrepareV1LanguageEnum];
/**
 * @export
 */
export const PayoutPrepareV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PayoutPrepareV1VEnum = typeof PayoutPrepareV1VEnum[keyof typeof PayoutPrepareV1VEnum];
