/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaymentCreateResponse,
  PaymentCreateV1Request,
  PaymentStatusResponse,
} from '../models/index';
import {
    PaymentCreateResponseFromJSON,
    PaymentCreateResponseToJSON,
    PaymentCreateV1RequestFromJSON,
    PaymentCreateV1RequestToJSON,
    PaymentStatusResponseFromJSON,
    PaymentStatusResponseToJSON,
} from '../models/index';

export interface PaymentCreateV1OperationRequest {
    language: PaymentCreateV1OperationLanguageEnum;
    PaymentCreateV1Request: PaymentCreateV1Request;
    v?: PaymentCreateV1OperationVEnum;
}

export interface PaymentGetStatusV1Request {
    language: PaymentGetStatusV1LanguageEnum;
    payId: number;
    project_id: number;
    v?: PaymentGetStatusV1VEnum;
}

export interface PaymentListV1Request {
    language: PaymentListV1LanguageEnum;
    v?: PaymentListV1VEnum;
    pageSize?: number;
    page?: number;
}

/**
 * PaymentApi - interface
 * 
 * @export
 * @interface PaymentApiInterface
 */
export interface PaymentApiInterface {
    /**
     * 
     * @summary Create payment item for pay system
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {PaymentCreateV1Request} PaymentCreateV1Request 
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    paymentCreateV1Raw(requestParameters: PaymentCreateV1OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentCreateResponse>>;

    /**
     * Create payment item for pay system
     */
    paymentCreateV1(requestParameters: PaymentCreateV1OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentCreateResponse>;

    /**
     * 
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} payId Pay order id
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    paymentGetStatusV1Raw(requestParameters: PaymentGetStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentStatusResponse>>;

    /**
     */
    paymentGetStatusV1(requestParameters: PaymentGetStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentStatusResponse>;

    /**
     * 
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [pageSize] Number of results
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    paymentListV1Raw(requestParameters: PaymentListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    paymentListV1(requestParameters: PaymentListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class PaymentApi extends runtime.BaseAPI implements PaymentApiInterface {

    /**
     * Create payment item for pay system
     */
    async paymentCreateV1Raw(requestParameters: PaymentCreateV1OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentCreateResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling paymentCreateV1().'
            );
        }

        if (requestParameters['PaymentCreateV1Request'] == null) {
            throw new runtime.RequiredError(
                'PaymentCreateV1Request',
                'Required parameter "PaymentCreateV1Request" was null or undefined when calling paymentCreateV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/payment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentCreateV1RequestToJSON(requestParameters['PaymentCreateV1Request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create payment item for pay system
     */
    async paymentCreateV1(requestParameters: PaymentCreateV1OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentCreateResponse> {
        const response = await this.paymentCreateV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async paymentGetStatusV1Raw(requestParameters: PaymentGetStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentStatusResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling paymentGetStatusV1().'
            );
        }

        if (requestParameters['payId'] == null) {
            throw new runtime.RequiredError(
                'payId',
                'Required parameter "payId" was null or undefined when calling paymentGetStatusV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling paymentGetStatusV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['payId'] != null) {
            queryParameters['payId'] = requestParameters['payId'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/payment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentStatusResponseFromJSON(jsonValue));
    }

    /**
     */
    async paymentGetStatusV1(requestParameters: PaymentGetStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentStatusResponse> {
        const response = await this.paymentGetStatusV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async paymentListV1Raw(requestParameters: PaymentListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling paymentListV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/payment/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async paymentListV1(requestParameters: PaymentListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.paymentListV1Raw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const PaymentCreateV1OperationLanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PaymentCreateV1OperationLanguageEnum = typeof PaymentCreateV1OperationLanguageEnum[keyof typeof PaymentCreateV1OperationLanguageEnum];
/**
 * @export
 */
export const PaymentCreateV1OperationVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PaymentCreateV1OperationVEnum = typeof PaymentCreateV1OperationVEnum[keyof typeof PaymentCreateV1OperationVEnum];
/**
 * @export
 */
export const PaymentGetStatusV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PaymentGetStatusV1LanguageEnum = typeof PaymentGetStatusV1LanguageEnum[keyof typeof PaymentGetStatusV1LanguageEnum];
/**
 * @export
 */
export const PaymentGetStatusV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PaymentGetStatusV1VEnum = typeof PaymentGetStatusV1VEnum[keyof typeof PaymentGetStatusV1VEnum];
/**
 * @export
 */
export const PaymentListV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PaymentListV1LanguageEnum = typeof PaymentListV1LanguageEnum[keyof typeof PaymentListV1LanguageEnum];
/**
 * @export
 */
export const PaymentListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PaymentListV1VEnum = typeof PaymentListV1VEnum[keyof typeof PaymentListV1VEnum];
