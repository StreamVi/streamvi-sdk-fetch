/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PlanRestreamCheckV2Response,
  PlanRestreamDiscountResponse,
  PlanRestreamForProject,
  PlanRestreamProjectResponseDto,
  PlanRestreamResponseDto,
  SuccessResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PlanRestreamCheckV2ResponseFromJSON,
    PlanRestreamCheckV2ResponseToJSON,
    PlanRestreamDiscountResponseFromJSON,
    PlanRestreamDiscountResponseToJSON,
    PlanRestreamForProjectFromJSON,
    PlanRestreamForProjectToJSON,
    PlanRestreamProjectResponseDtoFromJSON,
    PlanRestreamProjectResponseDtoToJSON,
    PlanRestreamResponseDtoFromJSON,
    PlanRestreamResponseDtoToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface PlanRestreamBuyV1Request {
    language: PlanRestreamBuyV1LanguageEnum;
    project_id: number;
    period: PlanRestreamBuyV1PeriodEnum;
    plan_restream_id: number;
    v?: PlanRestreamBuyV1VEnum;
    count_channel?: number;
    bitrate?: number;
}

export interface PlanRestreamCheck2V1Request {
    language: PlanRestreamCheck2V1LanguageEnum;
    project_id: number;
    period: PlanRestreamCheck2V1PeriodEnum;
    plan_restream_id: number;
    v?: PlanRestreamCheck2V1VEnum;
    use_balance?: number;
    channels?: number;
    bitrate?: number;
}

export interface PlanRestreamGetDiscountV1Request {
    language: PlanRestreamGetDiscountV1LanguageEnum;
    v?: PlanRestreamGetDiscountV1VEnum;
}

export interface PlanRestreamListProjectV1Request {
    language: PlanRestreamListProjectV1LanguageEnum;
    project_id: number;
    v?: PlanRestreamListProjectV1VEnum;
}

export interface PlanRestreamListV1Request {
    language: PlanRestreamListV1LanguageEnum;
    v?: PlanRestreamListV1VEnum;
}

export interface PlanRestreamRemoveV1Request {
    language: PlanRestreamRemoveV1LanguageEnum;
    project_id: number;
    plan_restream_id: number;
    v?: PlanRestreamRemoveV1VEnum;
}

export interface PlanRestreamTariffV1Request {
    language: PlanRestreamTariffV1LanguageEnum;
    project_id: number;
    v?: PlanRestreamTariffV1VEnum;
}

/**
 * PlanRestreamApi - interface
 * 
 * @export
 * @interface PlanRestreamApiInterface
 */
export interface PlanRestreamApiInterface {
    /**
     * 
     * @summary Buy restream tariff
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'month' | 'year'} period Period
     * @param {number} plan_restream_id Restream plan id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [count_channel] Channel count
     * @param {number} [bitrate] Bitrate, kbps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamBuyV1Raw(requestParameters: PlanRestreamBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Buy restream tariff
     */
    planRestreamBuyV1(requestParameters: PlanRestreamBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Load data for show card the tariffs v2
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'month' | 'year'} period Period
     * @param {number} plan_restream_id Restream plan id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [use_balance] Is select balance
     * @param {number} [channels] Channels count
     * @param {number} [bitrate] Bitrate, kbps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamCheck2V1Raw(requestParameters: PlanRestreamCheck2V1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamCheckV2Response>>;

    /**
     * Load data for show card the tariffs v2
     */
    planRestreamCheck2V1(requestParameters: PlanRestreamCheck2V1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamCheckV2Response>;

    /**
     * 
     * @summary Get discount restream
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamGetDiscountV1Raw(requestParameters: PlanRestreamGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamDiscountResponse>>;

    /**
     * Get discount restream
     */
    planRestreamGetDiscountV1(requestParameters: PlanRestreamGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamDiscountResponse>;

    /**
     * 
     * @summary Get list of restream tariffs for project
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamListProjectV1Raw(requestParameters: PlanRestreamListProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamProjectResponseDto>>;

    /**
     * Get list of restream tariffs for project
     */
    planRestreamListProjectV1(requestParameters: PlanRestreamListProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamProjectResponseDto>;

    /**
     * 
     * @summary Get list of restream tariffs
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamListV1Raw(requestParameters: PlanRestreamListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamResponseDto>>;

    /**
     * Get list of restream tariffs
     */
    planRestreamListV1(requestParameters: PlanRestreamListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamResponseDto>;

    /**
     * 
     * @summary Remove after tariff
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} plan_restream_id Restream plan id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamRemoveV1Raw(requestParameters: PlanRestreamRemoveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Remove after tariff
     */
    planRestreamRemoveV1(requestParameters: PlanRestreamRemoveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Get tariff for project
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamTariffV1Raw(requestParameters: PlanRestreamTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamForProject>>;

    /**
     * Get tariff for project
     */
    planRestreamTariffV1(requestParameters: PlanRestreamTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamForProject>;

}

/**
 * 
 */
export class PlanRestreamApi extends runtime.BaseAPI implements PlanRestreamApiInterface {

    /**
     * Buy restream tariff
     */
    async planRestreamBuyV1Raw(requestParameters: PlanRestreamBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planRestreamBuyV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling planRestreamBuyV1().'
            );
        }

        if (requestParameters['period'] == null) {
            throw new runtime.RequiredError(
                'period',
                'Required parameter "period" was null or undefined when calling planRestreamBuyV1().'
            );
        }

        if (requestParameters['plan_restream_id'] == null) {
            throw new runtime.RequiredError(
                'plan_restream_id',
                'Required parameter "plan_restream_id" was null or undefined when calling planRestreamBuyV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['plan_restream_id'] != null) {
            queryParameters['plan_restream_id'] = requestParameters['plan_restream_id'];
        }

        if (requestParameters['count_channel'] != null) {
            queryParameters['count_channel'] = requestParameters['count_channel'];
        }

        if (requestParameters['bitrate'] != null) {
            queryParameters['bitrate'] = requestParameters['bitrate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_restream`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Buy restream tariff
     */
    async planRestreamBuyV1(requestParameters: PlanRestreamBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.planRestreamBuyV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load data for show card the tariffs v2
     */
    async planRestreamCheck2V1Raw(requestParameters: PlanRestreamCheck2V1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamCheckV2Response>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planRestreamCheck2V1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling planRestreamCheck2V1().'
            );
        }

        if (requestParameters['period'] == null) {
            throw new runtime.RequiredError(
                'period',
                'Required parameter "period" was null or undefined when calling planRestreamCheck2V1().'
            );
        }

        if (requestParameters['plan_restream_id'] == null) {
            throw new runtime.RequiredError(
                'plan_restream_id',
                'Required parameter "plan_restream_id" was null or undefined when calling planRestreamCheck2V1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['plan_restream_id'] != null) {
            queryParameters['plan_restream_id'] = requestParameters['plan_restream_id'];
        }

        if (requestParameters['use_balance'] != null) {
            queryParameters['use_balance'] = requestParameters['use_balance'];
        }

        if (requestParameters['channels'] != null) {
            queryParameters['channels'] = requestParameters['channels'];
        }

        if (requestParameters['bitrate'] != null) {
            queryParameters['bitrate'] = requestParameters['bitrate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_restream/check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanRestreamCheckV2ResponseFromJSON(jsonValue));
    }

    /**
     * Load data for show card the tariffs v2
     */
    async planRestreamCheck2V1(requestParameters: PlanRestreamCheck2V1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamCheckV2Response> {
        const response = await this.planRestreamCheck2V1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get discount restream
     */
    async planRestreamGetDiscountV1Raw(requestParameters: PlanRestreamGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamDiscountResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planRestreamGetDiscountV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_restream/get_discount`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanRestreamDiscountResponseFromJSON(jsonValue));
    }

    /**
     * Get discount restream
     */
    async planRestreamGetDiscountV1(requestParameters: PlanRestreamGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamDiscountResponse> {
        const response = await this.planRestreamGetDiscountV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of restream tariffs for project
     */
    async planRestreamListProjectV1Raw(requestParameters: PlanRestreamListProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamProjectResponseDto>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planRestreamListProjectV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling planRestreamListProjectV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_restream/list/project`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanRestreamProjectResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get list of restream tariffs for project
     */
    async planRestreamListProjectV1(requestParameters: PlanRestreamListProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamProjectResponseDto> {
        const response = await this.planRestreamListProjectV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of restream tariffs
     */
    async planRestreamListV1Raw(requestParameters: PlanRestreamListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamResponseDto>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planRestreamListV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_restream/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanRestreamResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get list of restream tariffs
     */
    async planRestreamListV1(requestParameters: PlanRestreamListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamResponseDto> {
        const response = await this.planRestreamListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove after tariff
     */
    async planRestreamRemoveV1Raw(requestParameters: PlanRestreamRemoveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planRestreamRemoveV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling planRestreamRemoveV1().'
            );
        }

        if (requestParameters['plan_restream_id'] == null) {
            throw new runtime.RequiredError(
                'plan_restream_id',
                'Required parameter "plan_restream_id" was null or undefined when calling planRestreamRemoveV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['plan_restream_id'] != null) {
            queryParameters['plan_restream_id'] = requestParameters['plan_restream_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_restream`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove after tariff
     */
    async planRestreamRemoveV1(requestParameters: PlanRestreamRemoveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.planRestreamRemoveV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get tariff for project
     */
    async planRestreamTariffV1Raw(requestParameters: PlanRestreamTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanRestreamForProject>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planRestreamTariffV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling planRestreamTariffV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_restream`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanRestreamForProjectFromJSON(jsonValue));
    }

    /**
     * Get tariff for project
     */
    async planRestreamTariffV1(requestParameters: PlanRestreamTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanRestreamForProject> {
        const response = await this.planRestreamTariffV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PlanRestreamBuyV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanRestreamBuyV1LanguageEnum = typeof PlanRestreamBuyV1LanguageEnum[keyof typeof PlanRestreamBuyV1LanguageEnum];
/**
 * @export
 */
export const PlanRestreamBuyV1PeriodEnum = {
    month: 'month',
    year: 'year'
} as const;
export type PlanRestreamBuyV1PeriodEnum = typeof PlanRestreamBuyV1PeriodEnum[keyof typeof PlanRestreamBuyV1PeriodEnum];
/**
 * @export
 */
export const PlanRestreamBuyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanRestreamBuyV1VEnum = typeof PlanRestreamBuyV1VEnum[keyof typeof PlanRestreamBuyV1VEnum];
/**
 * @export
 */
export const PlanRestreamCheck2V1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanRestreamCheck2V1LanguageEnum = typeof PlanRestreamCheck2V1LanguageEnum[keyof typeof PlanRestreamCheck2V1LanguageEnum];
/**
 * @export
 */
export const PlanRestreamCheck2V1PeriodEnum = {
    month: 'month',
    year: 'year'
} as const;
export type PlanRestreamCheck2V1PeriodEnum = typeof PlanRestreamCheck2V1PeriodEnum[keyof typeof PlanRestreamCheck2V1PeriodEnum];
/**
 * @export
 */
export const PlanRestreamCheck2V1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanRestreamCheck2V1VEnum = typeof PlanRestreamCheck2V1VEnum[keyof typeof PlanRestreamCheck2V1VEnum];
/**
 * @export
 */
export const PlanRestreamGetDiscountV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanRestreamGetDiscountV1LanguageEnum = typeof PlanRestreamGetDiscountV1LanguageEnum[keyof typeof PlanRestreamGetDiscountV1LanguageEnum];
/**
 * @export
 */
export const PlanRestreamGetDiscountV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanRestreamGetDiscountV1VEnum = typeof PlanRestreamGetDiscountV1VEnum[keyof typeof PlanRestreamGetDiscountV1VEnum];
/**
 * @export
 */
export const PlanRestreamListProjectV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanRestreamListProjectV1LanguageEnum = typeof PlanRestreamListProjectV1LanguageEnum[keyof typeof PlanRestreamListProjectV1LanguageEnum];
/**
 * @export
 */
export const PlanRestreamListProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanRestreamListProjectV1VEnum = typeof PlanRestreamListProjectV1VEnum[keyof typeof PlanRestreamListProjectV1VEnum];
/**
 * @export
 */
export const PlanRestreamListV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanRestreamListV1LanguageEnum = typeof PlanRestreamListV1LanguageEnum[keyof typeof PlanRestreamListV1LanguageEnum];
/**
 * @export
 */
export const PlanRestreamListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanRestreamListV1VEnum = typeof PlanRestreamListV1VEnum[keyof typeof PlanRestreamListV1VEnum];
/**
 * @export
 */
export const PlanRestreamRemoveV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanRestreamRemoveV1LanguageEnum = typeof PlanRestreamRemoveV1LanguageEnum[keyof typeof PlanRestreamRemoveV1LanguageEnum];
/**
 * @export
 */
export const PlanRestreamRemoveV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanRestreamRemoveV1VEnum = typeof PlanRestreamRemoveV1VEnum[keyof typeof PlanRestreamRemoveV1VEnum];
/**
 * @export
 */
export const PlanRestreamTariffV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanRestreamTariffV1LanguageEnum = typeof PlanRestreamTariffV1LanguageEnum[keyof typeof PlanRestreamTariffV1LanguageEnum];
/**
 * @export
 */
export const PlanRestreamTariffV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanRestreamTariffV1VEnum = typeof PlanRestreamTariffV1VEnum[keyof typeof PlanRestreamTariffV1VEnum];
