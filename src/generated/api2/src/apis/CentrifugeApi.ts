/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SiteAuthCentrifugeResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SiteAuthCentrifugeResponseFromJSON,
    SiteAuthCentrifugeResponseToJSON,
} from '../models/index';

export interface CentrifugeAuthV2Request {
    project_id: number;
}

export interface CentrifugeProjectV1Request {
    language: CentrifugeProjectV1LanguageEnum;
    project_id: number;
    v?: CentrifugeProjectV1VEnum;
}

export interface GetTokenBroadcastV1Request {
    broadcast_id: number;
    language: GetTokenBroadcastV1LanguageEnum;
    project_id: number;
    v?: GetTokenBroadcastV1VEnum;
}

/**
 * CentrifugeApi - interface
 * 
 * @export
 * @interface CentrifugeApiInterface
 */
export interface CentrifugeApiInterface {
    /**
     * 
     * @summary Auth centrifuge
     * @param {number} project_id Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApiInterface
     */
    centrifugeAuthV2Raw(requestParameters: CentrifugeAuthV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteAuthCentrifugeResponse>>;

    /**
     * Auth centrifuge
     */
    centrifugeAuthV2(requestParameters: CentrifugeAuthV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteAuthCentrifugeResponse>;

    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor     
     * @summary Auth token for project
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApiInterface
     */
    centrifugeProjectV1Raw(requestParameters: CentrifugeProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteAuthCentrifugeResponse>>;

    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor     
     * Auth token for project
     */
    centrifugeProjectV1(requestParameters: CentrifugeProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteAuthCentrifugeResponse>;

    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min     
     * @summary Auth token for broadcast
     * @param {number} broadcast_id 
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApiInterface
     */
    getTokenBroadcastV1Raw(requestParameters: GetTokenBroadcastV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteAuthCentrifugeResponse>>;

    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min     
     * Auth token for broadcast
     */
    getTokenBroadcastV1(requestParameters: GetTokenBroadcastV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteAuthCentrifugeResponse>;

}

/**
 * 
 */
export class CentrifugeApi extends runtime.BaseAPI implements CentrifugeApiInterface {

    /**
     * Auth centrifuge
     */
    async centrifugeAuthV2Raw(requestParameters: CentrifugeAuthV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteAuthCentrifugeResponse>> {
        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling centrifugeAuthV2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/centrifuge`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteAuthCentrifugeResponseFromJSON(jsonValue));
    }

    /**
     * Auth centrifuge
     */
    async centrifugeAuthV2(requestParameters: CentrifugeAuthV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteAuthCentrifugeResponse> {
        const response = await this.centrifugeAuthV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor     
     * Auth token for project
     */
    async centrifugeProjectV1Raw(requestParameters: CentrifugeProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteAuthCentrifugeResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling centrifugeProjectV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling centrifugeProjectV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '2';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/centrifuge/auth/project`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteAuthCentrifugeResponseFromJSON(jsonValue));
    }

    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor     
     * Auth token for project
     */
    async centrifugeProjectV1(requestParameters: CentrifugeProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteAuthCentrifugeResponse> {
        const response = await this.centrifugeProjectV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min     
     * Auth token for broadcast
     */
    async getTokenBroadcastV1Raw(requestParameters: GetTokenBroadcastV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteAuthCentrifugeResponse>> {
        if (requestParameters['broadcast_id'] == null) {
            throw new runtime.RequiredError(
                'broadcast_id',
                'Required parameter "broadcast_id" was null or undefined when calling getTokenBroadcastV1().'
            );
        }

        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling getTokenBroadcastV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling getTokenBroadcastV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['broadcast_id'] != null) {
            queryParameters['broadcast_id'] = requestParameters['broadcast_id'];
        }

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/centrifuge/token/broadcast`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteAuthCentrifugeResponseFromJSON(jsonValue));
    }

    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min     
     * Auth token for broadcast
     */
    async getTokenBroadcastV1(requestParameters: GetTokenBroadcastV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteAuthCentrifugeResponse> {
        const response = await this.getTokenBroadcastV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CentrifugeProjectV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type CentrifugeProjectV1LanguageEnum = typeof CentrifugeProjectV1LanguageEnum[keyof typeof CentrifugeProjectV1LanguageEnum];
/**
 * @export
 */
export const CentrifugeProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type CentrifugeProjectV1VEnum = typeof CentrifugeProjectV1VEnum[keyof typeof CentrifugeProjectV1VEnum];
/**
 * @export
 */
export const GetTokenBroadcastV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type GetTokenBroadcastV1LanguageEnum = typeof GetTokenBroadcastV1LanguageEnum[keyof typeof GetTokenBroadcastV1LanguageEnum];
/**
 * @export
 */
export const GetTokenBroadcastV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type GetTokenBroadcastV1VEnum = typeof GetTokenBroadcastV1VEnum[keyof typeof GetTokenBroadcastV1VEnum];
