/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PlanTranscodingCheckResponse,
  PlanTranscodingDiscountResponse,
  PlanTranscodingForProject,
  PlanTranscodingResponseDto,
  SuccessResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PlanTranscodingCheckResponseFromJSON,
    PlanTranscodingCheckResponseToJSON,
    PlanTranscodingDiscountResponseFromJSON,
    PlanTranscodingDiscountResponseToJSON,
    PlanTranscodingForProjectFromJSON,
    PlanTranscodingForProjectToJSON,
    PlanTranscodingResponseDtoFromJSON,
    PlanTranscodingResponseDtoToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface PlanTranscodingBuyV1Request {
    language: PlanTranscodingBuyV1LanguageEnum;
    project_id: number;
    period: PlanTranscodingBuyV1PeriodEnum;
    plan_transcoding_id: number;
    v?: PlanTranscodingBuyV1VEnum;
    count?: number;
}

export interface PlanTranscodingCancelV1Request {
    language: PlanTranscodingCancelV1LanguageEnum;
    project_id: number;
    v?: PlanTranscodingCancelV1VEnum;
}

export interface PlanTranscodingCheckV1Request {
    language: PlanTranscodingCheckV1LanguageEnum;
    project_id: number;
    v?: PlanTranscodingCheckV1VEnum;
}

export interface PlanTranscodingGetDiscountV1Request {
    language: PlanTranscodingGetDiscountV1LanguageEnum;
    v?: PlanTranscodingGetDiscountV1VEnum;
}

export interface PlanTranscodingListV1Request {
    language: PlanTranscodingListV1LanguageEnum;
    v?: PlanTranscodingListV1VEnum;
}

export interface PlanTranscodingTariffV1Request {
    language: PlanTranscodingTariffV1LanguageEnum;
    project_id: number;
    v?: PlanTranscodingTariffV1VEnum;
}

/**
 * PlanTranscodingApi - interface
 * 
 * @export
 * @interface PlanTranscodingApiInterface
 */
export interface PlanTranscodingApiInterface {
    /**
     * 
     * @summary Buy transcoder tariff
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'month' | 'year'} period Period
     * @param {number} plan_transcoding_id Transcoding plan id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [count] Count flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingBuyV1Raw(requestParameters: PlanTranscodingBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Buy transcoder tariff
     */
    planTranscodingBuyV1(requestParameters: PlanTranscodingBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Remove after tariff
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingCancelV1Raw(requestParameters: PlanTranscodingCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Remove after tariff
     */
    planTranscodingCancelV1(requestParameters: PlanTranscodingCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Check transcoding tariff before buy
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingCheckV1Raw(requestParameters: PlanTranscodingCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingCheckResponse>>;

    /**
     * Check transcoding tariff before buy
     */
    planTranscodingCheckV1(requestParameters: PlanTranscodingCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingCheckResponse>;

    /**
     * 
     * @summary Get discount transcoding
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingGetDiscountV1Raw(requestParameters: PlanTranscodingGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingDiscountResponse>>;

    /**
     * Get discount transcoding
     */
    planTranscodingGetDiscountV1(requestParameters: PlanTranscodingGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingDiscountResponse>;

    /**
     * 
     * @summary Get list of transcoding tariffs
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingListV1Raw(requestParameters: PlanTranscodingListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingResponseDto>>;

    /**
     * Get list of transcoding tariffs
     */
    planTranscodingListV1(requestParameters: PlanTranscodingListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingResponseDto>;

    /**
     * 
     * @summary Get tariff for project
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingTariffV1Raw(requestParameters: PlanTranscodingTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingForProject>>;

    /**
     * Get tariff for project
     */
    planTranscodingTariffV1(requestParameters: PlanTranscodingTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingForProject>;

}

/**
 * 
 */
export class PlanTranscodingApi extends runtime.BaseAPI implements PlanTranscodingApiInterface {

    /**
     * Buy transcoder tariff
     */
    async planTranscodingBuyV1Raw(requestParameters: PlanTranscodingBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planTranscodingBuyV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling planTranscodingBuyV1().'
            );
        }

        if (requestParameters['period'] == null) {
            throw new runtime.RequiredError(
                'period',
                'Required parameter "period" was null or undefined when calling planTranscodingBuyV1().'
            );
        }

        if (requestParameters['plan_transcoding_id'] == null) {
            throw new runtime.RequiredError(
                'plan_transcoding_id',
                'Required parameter "plan_transcoding_id" was null or undefined when calling planTranscodingBuyV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['plan_transcoding_id'] != null) {
            queryParameters['plan_transcoding_id'] = requestParameters['plan_transcoding_id'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_transcoding`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Buy transcoder tariff
     */
    async planTranscodingBuyV1(requestParameters: PlanTranscodingBuyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.planTranscodingBuyV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove after tariff
     */
    async planTranscodingCancelV1Raw(requestParameters: PlanTranscodingCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planTranscodingCancelV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling planTranscodingCancelV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_transcoding`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove after tariff
     */
    async planTranscodingCancelV1(requestParameters: PlanTranscodingCancelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.planTranscodingCancelV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check transcoding tariff before buy
     */
    async planTranscodingCheckV1Raw(requestParameters: PlanTranscodingCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingCheckResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planTranscodingCheckV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling planTranscodingCheckV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_transcoding/check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanTranscodingCheckResponseFromJSON(jsonValue));
    }

    /**
     * Check transcoding tariff before buy
     */
    async planTranscodingCheckV1(requestParameters: PlanTranscodingCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingCheckResponse> {
        const response = await this.planTranscodingCheckV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get discount transcoding
     */
    async planTranscodingGetDiscountV1Raw(requestParameters: PlanTranscodingGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingDiscountResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planTranscodingGetDiscountV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_transcoding/get_discount`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanTranscodingDiscountResponseFromJSON(jsonValue));
    }

    /**
     * Get discount transcoding
     */
    async planTranscodingGetDiscountV1(requestParameters: PlanTranscodingGetDiscountV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingDiscountResponse> {
        const response = await this.planTranscodingGetDiscountV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of transcoding tariffs
     */
    async planTranscodingListV1Raw(requestParameters: PlanTranscodingListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingResponseDto>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planTranscodingListV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_transcoding/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanTranscodingResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get list of transcoding tariffs
     */
    async planTranscodingListV1(requestParameters: PlanTranscodingListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingResponseDto> {
        const response = await this.planTranscodingListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get tariff for project
     */
    async planTranscodingTariffV1Raw(requestParameters: PlanTranscodingTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanTranscodingForProject>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling planTranscodingTariffV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling planTranscodingTariffV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/plan_transcoding`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanTranscodingForProjectFromJSON(jsonValue));
    }

    /**
     * Get tariff for project
     */
    async planTranscodingTariffV1(requestParameters: PlanTranscodingTariffV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanTranscodingForProject> {
        const response = await this.planTranscodingTariffV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PlanTranscodingBuyV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanTranscodingBuyV1LanguageEnum = typeof PlanTranscodingBuyV1LanguageEnum[keyof typeof PlanTranscodingBuyV1LanguageEnum];
/**
 * @export
 */
export const PlanTranscodingBuyV1PeriodEnum = {
    month: 'month',
    year: 'year'
} as const;
export type PlanTranscodingBuyV1PeriodEnum = typeof PlanTranscodingBuyV1PeriodEnum[keyof typeof PlanTranscodingBuyV1PeriodEnum];
/**
 * @export
 */
export const PlanTranscodingBuyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanTranscodingBuyV1VEnum = typeof PlanTranscodingBuyV1VEnum[keyof typeof PlanTranscodingBuyV1VEnum];
/**
 * @export
 */
export const PlanTranscodingCancelV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanTranscodingCancelV1LanguageEnum = typeof PlanTranscodingCancelV1LanguageEnum[keyof typeof PlanTranscodingCancelV1LanguageEnum];
/**
 * @export
 */
export const PlanTranscodingCancelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanTranscodingCancelV1VEnum = typeof PlanTranscodingCancelV1VEnum[keyof typeof PlanTranscodingCancelV1VEnum];
/**
 * @export
 */
export const PlanTranscodingCheckV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanTranscodingCheckV1LanguageEnum = typeof PlanTranscodingCheckV1LanguageEnum[keyof typeof PlanTranscodingCheckV1LanguageEnum];
/**
 * @export
 */
export const PlanTranscodingCheckV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanTranscodingCheckV1VEnum = typeof PlanTranscodingCheckV1VEnum[keyof typeof PlanTranscodingCheckV1VEnum];
/**
 * @export
 */
export const PlanTranscodingGetDiscountV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanTranscodingGetDiscountV1LanguageEnum = typeof PlanTranscodingGetDiscountV1LanguageEnum[keyof typeof PlanTranscodingGetDiscountV1LanguageEnum];
/**
 * @export
 */
export const PlanTranscodingGetDiscountV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanTranscodingGetDiscountV1VEnum = typeof PlanTranscodingGetDiscountV1VEnum[keyof typeof PlanTranscodingGetDiscountV1VEnum];
/**
 * @export
 */
export const PlanTranscodingListV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanTranscodingListV1LanguageEnum = typeof PlanTranscodingListV1LanguageEnum[keyof typeof PlanTranscodingListV1LanguageEnum];
/**
 * @export
 */
export const PlanTranscodingListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanTranscodingListV1VEnum = typeof PlanTranscodingListV1VEnum[keyof typeof PlanTranscodingListV1VEnum];
/**
 * @export
 */
export const PlanTranscodingTariffV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PlanTranscodingTariffV1LanguageEnum = typeof PlanTranscodingTariffV1LanguageEnum[keyof typeof PlanTranscodingTariffV1LanguageEnum];
/**
 * @export
 */
export const PlanTranscodingTariffV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanTranscodingTariffV1VEnum = typeof PlanTranscodingTariffV1VEnum[keyof typeof PlanTranscodingTariffV1VEnum];
