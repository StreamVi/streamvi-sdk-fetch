/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  MessageResponseDto,
  MethodChatHistoryResponse,
  MethodChatSendMessageRequestDto,
  SuccessResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MessageResponseDtoFromJSON,
    MessageResponseDtoToJSON,
    MethodChatHistoryResponseFromJSON,
    MethodChatHistoryResponseToJSON,
    MethodChatSendMessageRequestDtoFromJSON,
    MethodChatSendMessageRequestDtoToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface MethodChatGatewayDeleteV1Request {
    language: MethodChatGatewayDeleteV1LanguageEnum;
    key: string;
    broadcast_id: number;
    event_id: string;
    v?: MethodChatGatewayDeleteV1VEnum;
}

export interface MethodChatGatewayGetMessageV1Request {
    language: MethodChatGatewayGetMessageV1LanguageEnum;
    key: string;
    broadcast_id: number;
    event_id: string;
    v?: MethodChatGatewayGetMessageV1VEnum;
}

export interface MethodChatGatewayHistoryV1Request {
    language: MethodChatGatewayHistoryV1LanguageEnum;
    key: string;
    broadcast_id: number;
    v?: MethodChatGatewayHistoryV1VEnum;
}

export interface MethodChatGatewaySendV1Request {
    language: MethodChatGatewaySendV1LanguageEnum;
    key: string;
    broadcast_id: number;
    MethodChatSendMessageRequestDto: MethodChatSendMessageRequestDto;
    v?: MethodChatGatewaySendV1VEnum;
}

/**
 * ChatGatewayApi - interface
 * 
 * @export
 * @interface ChatGatewayApiInterface
 */
export interface ChatGatewayApiInterface {
    /**
     * 
     * @summary Remove message
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {string} key Key
     * @param {number} broadcast_id broadcast id
     * @param {string} event_id Event id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApiInterface
     */
    methodChatGatewayDeleteV1Raw(requestParameters: MethodChatGatewayDeleteV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Remove message
     */
    methodChatGatewayDeleteV1(requestParameters: MethodChatGatewayDeleteV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Get one message
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {string} key Key
     * @param {number} broadcast_id broadcast id
     * @param {string} event_id Event id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApiInterface
     */
    methodChatGatewayGetMessageV1Raw(requestParameters: MethodChatGatewayGetMessageV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponseDto>>;

    /**
     * Get one message
     */
    methodChatGatewayGetMessageV1(requestParameters: MethodChatGatewayGetMessageV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponseDto>;

    /**
     * 
     * @summary List history message
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {string} key Key
     * @param {number} broadcast_id broadcast id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApiInterface
     */
    methodChatGatewayHistoryV1Raw(requestParameters: MethodChatGatewayHistoryV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MethodChatHistoryResponse>>;

    /**
     * List history message
     */
    methodChatGatewayHistoryV1(requestParameters: MethodChatGatewayHistoryV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MethodChatHistoryResponse>;

    /**
     * 
     * @summary Send message
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {string} key Key
     * @param {number} broadcast_id 
     * @param {MethodChatSendMessageRequestDto} MethodChatSendMessageRequestDto 
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApiInterface
     */
    methodChatGatewaySendV1Raw(requestParameters: MethodChatGatewaySendV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponseDto>>;

    /**
     * Send message
     */
    methodChatGatewaySendV1(requestParameters: MethodChatGatewaySendV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponseDto>;

}

/**
 * 
 */
export class ChatGatewayApi extends runtime.BaseAPI implements ChatGatewayApiInterface {

    /**
     * Remove message
     */
    async methodChatGatewayDeleteV1Raw(requestParameters: MethodChatGatewayDeleteV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling methodChatGatewayDeleteV1().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling methodChatGatewayDeleteV1().'
            );
        }

        if (requestParameters['broadcast_id'] == null) {
            throw new runtime.RequiredError(
                'broadcast_id',
                'Required parameter "broadcast_id" was null or undefined when calling methodChatGatewayDeleteV1().'
            );
        }

        if (requestParameters['event_id'] == null) {
            throw new runtime.RequiredError(
                'event_id',
                'Required parameter "event_id" was null or undefined when calling methodChatGatewayDeleteV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        if (requestParameters['broadcast_id'] != null) {
            queryParameters['broadcast_id'] = requestParameters['broadcast_id'];
        }

        if (requestParameters['event_id'] != null) {
            queryParameters['event_id'] = requestParameters['event_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/chat/messages/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove message
     */
    async methodChatGatewayDeleteV1(requestParameters: MethodChatGatewayDeleteV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.methodChatGatewayDeleteV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get one message
     */
    async methodChatGatewayGetMessageV1Raw(requestParameters: MethodChatGatewayGetMessageV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponseDto>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling methodChatGatewayGetMessageV1().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling methodChatGatewayGetMessageV1().'
            );
        }

        if (requestParameters['broadcast_id'] == null) {
            throw new runtime.RequiredError(
                'broadcast_id',
                'Required parameter "broadcast_id" was null or undefined when calling methodChatGatewayGetMessageV1().'
            );
        }

        if (requestParameters['event_id'] == null) {
            throw new runtime.RequiredError(
                'event_id',
                'Required parameter "event_id" was null or undefined when calling methodChatGatewayGetMessageV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        if (requestParameters['broadcast_id'] != null) {
            queryParameters['broadcast_id'] = requestParameters['broadcast_id'];
        }

        if (requestParameters['event_id'] != null) {
            queryParameters['event_id'] = requestParameters['event_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/chat/messages/message`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get one message
     */
    async methodChatGatewayGetMessageV1(requestParameters: MethodChatGatewayGetMessageV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponseDto> {
        const response = await this.methodChatGatewayGetMessageV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List history message
     */
    async methodChatGatewayHistoryV1Raw(requestParameters: MethodChatGatewayHistoryV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MethodChatHistoryResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling methodChatGatewayHistoryV1().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling methodChatGatewayHistoryV1().'
            );
        }

        if (requestParameters['broadcast_id'] == null) {
            throw new runtime.RequiredError(
                'broadcast_id',
                'Required parameter "broadcast_id" was null or undefined when calling methodChatGatewayHistoryV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        if (requestParameters['broadcast_id'] != null) {
            queryParameters['broadcast_id'] = requestParameters['broadcast_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/chat/messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MethodChatHistoryResponseFromJSON(jsonValue));
    }

    /**
     * List history message
     */
    async methodChatGatewayHistoryV1(requestParameters: MethodChatGatewayHistoryV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MethodChatHistoryResponse> {
        const response = await this.methodChatGatewayHistoryV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send message
     */
    async methodChatGatewaySendV1Raw(requestParameters: MethodChatGatewaySendV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponseDto>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling methodChatGatewaySendV1().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling methodChatGatewaySendV1().'
            );
        }

        if (requestParameters['broadcast_id'] == null) {
            throw new runtime.RequiredError(
                'broadcast_id',
                'Required parameter "broadcast_id" was null or undefined when calling methodChatGatewaySendV1().'
            );
        }

        if (requestParameters['MethodChatSendMessageRequestDto'] == null) {
            throw new runtime.RequiredError(
                'MethodChatSendMessageRequestDto',
                'Required parameter "MethodChatSendMessageRequestDto" was null or undefined when calling methodChatGatewaySendV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        if (requestParameters['broadcast_id'] != null) {
            queryParameters['broadcast_id'] = requestParameters['broadcast_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/chat/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MethodChatSendMessageRequestDtoToJSON(requestParameters['MethodChatSendMessageRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseDtoFromJSON(jsonValue));
    }

    /**
     * Send message
     */
    async methodChatGatewaySendV1(requestParameters: MethodChatGatewaySendV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponseDto> {
        const response = await this.methodChatGatewaySendV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const MethodChatGatewayDeleteV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type MethodChatGatewayDeleteV1LanguageEnum = typeof MethodChatGatewayDeleteV1LanguageEnum[keyof typeof MethodChatGatewayDeleteV1LanguageEnum];
/**
 * @export
 */
export const MethodChatGatewayDeleteV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type MethodChatGatewayDeleteV1VEnum = typeof MethodChatGatewayDeleteV1VEnum[keyof typeof MethodChatGatewayDeleteV1VEnum];
/**
 * @export
 */
export const MethodChatGatewayGetMessageV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type MethodChatGatewayGetMessageV1LanguageEnum = typeof MethodChatGatewayGetMessageV1LanguageEnum[keyof typeof MethodChatGatewayGetMessageV1LanguageEnum];
/**
 * @export
 */
export const MethodChatGatewayGetMessageV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type MethodChatGatewayGetMessageV1VEnum = typeof MethodChatGatewayGetMessageV1VEnum[keyof typeof MethodChatGatewayGetMessageV1VEnum];
/**
 * @export
 */
export const MethodChatGatewayHistoryV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type MethodChatGatewayHistoryV1LanguageEnum = typeof MethodChatGatewayHistoryV1LanguageEnum[keyof typeof MethodChatGatewayHistoryV1LanguageEnum];
/**
 * @export
 */
export const MethodChatGatewayHistoryV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type MethodChatGatewayHistoryV1VEnum = typeof MethodChatGatewayHistoryV1VEnum[keyof typeof MethodChatGatewayHistoryV1VEnum];
/**
 * @export
 */
export const MethodChatGatewaySendV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type MethodChatGatewaySendV1LanguageEnum = typeof MethodChatGatewaySendV1LanguageEnum[keyof typeof MethodChatGatewaySendV1LanguageEnum];
/**
 * @export
 */
export const MethodChatGatewaySendV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type MethodChatGatewaySendV1VEnum = typeof MethodChatGatewaySendV1VEnum[keyof typeof MethodChatGatewaySendV1VEnum];
