/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GetStreamKeyResponse,
  SetRecordStreamRequest,
  SuccessResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetStreamKeyResponseFromJSON,
    GetStreamKeyResponseToJSON,
    SetRecordStreamRequestFromJSON,
    SetRecordStreamRequestToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface StreamKeysKeyV1Request {
    language: StreamKeysKeyV1LanguageEnum;
    project_id: number;
    v?: StreamKeysKeyV1VEnum;
}

export interface StreamKeysUpdateRecordV1Request {
    SetRecordStreamRequest: SetRecordStreamRequest;
}

/**
 * StreamKeyApi - interface
 * 
 * @export
 * @interface StreamKeyApiInterface
 */
export interface StreamKeyApiInterface {
    /**
     * 
     * @summary Get stream credentials
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamKeyApiInterface
     */
    streamKeysKeyV1Raw(requestParameters: StreamKeysKeyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStreamKeyResponse>>;

    /**
     * Get stream credentials
     */
    streamKeysKeyV1(requestParameters: StreamKeysKeyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStreamKeyResponse>;

    /**
     * 
     * @summary Update record
     * @param {SetRecordStreamRequest} SetRecordStreamRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamKeyApiInterface
     */
    streamKeysUpdateRecordV1Raw(requestParameters: StreamKeysUpdateRecordV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Update record
     */
    streamKeysUpdateRecordV1(requestParameters: StreamKeysUpdateRecordV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

}

/**
 * 
 */
export class StreamKeyApi extends runtime.BaseAPI implements StreamKeyApiInterface {

    /**
     * Get stream credentials
     */
    async streamKeysKeyV1Raw(requestParameters: StreamKeysKeyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStreamKeyResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling streamKeysKeyV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling streamKeysKeyV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/stream-keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStreamKeyResponseFromJSON(jsonValue));
    }

    /**
     * Get stream credentials
     */
    async streamKeysKeyV1(requestParameters: StreamKeysKeyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStreamKeyResponse> {
        const response = await this.streamKeysKeyV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update record
     */
    async streamKeysUpdateRecordV1Raw(requestParameters: StreamKeysUpdateRecordV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['SetRecordStreamRequest'] == null) {
            throw new runtime.RequiredError(
                'SetRecordStreamRequest',
                'Required parameter "SetRecordStreamRequest" was null or undefined when calling streamKeysUpdateRecordV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/stream-keys/record`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetRecordStreamRequestToJSON(requestParameters['SetRecordStreamRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Update record
     */
    async streamKeysUpdateRecordV1(requestParameters: StreamKeysUpdateRecordV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.streamKeysUpdateRecordV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const StreamKeysKeyV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type StreamKeysKeyV1LanguageEnum = typeof StreamKeysKeyV1LanguageEnum[keyof typeof StreamKeysKeyV1LanguageEnum];
/**
 * @export
 */
export const StreamKeysKeyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type StreamKeysKeyV1VEnum = typeof StreamKeysKeyV1VEnum[keyof typeof StreamKeysKeyV1VEnum];
