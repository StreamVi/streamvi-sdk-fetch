/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ListOfProjectChannelInviteResponse,
  ProjectChannelInviteLinkResponse,
  ProjectChannelInviteResponse,
  SuccessResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ListOfProjectChannelInviteResponseFromJSON,
    ListOfProjectChannelInviteResponseToJSON,
    ProjectChannelInviteLinkResponseFromJSON,
    ProjectChannelInviteLinkResponseToJSON,
    ProjectChannelInviteResponseFromJSON,
    ProjectChannelInviteResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface ProjectChannelInviteAcceptForProjectV1Request {
    language: ProjectChannelInviteAcceptForProjectV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ProjectChannelInviteAcceptForProjectV1VEnum;
}

export interface ProjectChannelInviteAcceptForSecretV1Request {
    language: ProjectChannelInviteAcceptForSecretV1LanguageEnum;
    project_id: number;
    channel_id: number;
    secret: string;
    v?: ProjectChannelInviteAcceptForSecretV1VEnum;
}

export interface ProjectChannelInviteAddByEmailV1Request {
    language: ProjectChannelInviteAddByEmailV1LanguageEnum;
    project_id: number;
    channel_id: number;
    email: string;
    access_type: ProjectChannelInviteAddByEmailV1AccessTypeEnum;
    v?: ProjectChannelInviteAddByEmailV1VEnum;
}

export interface ProjectChannelInviteAddByIdV1Request {
    language: ProjectChannelInviteAddByIdV1LanguageEnum;
    project_id: number;
    channel_id: number;
    access_type: ProjectChannelInviteAddByIdV1AccessTypeEnum;
    to_project_external_id: string;
    v?: ProjectChannelInviteAddByIdV1VEnum;
}

export interface ProjectChannelInviteDeclineForProjectV1Request {
    language: ProjectChannelInviteDeclineForProjectV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ProjectChannelInviteDeclineForProjectV1VEnum;
}

export interface ProjectChannelInviteDeclineForSecretV1Request {
    language: ProjectChannelInviteDeclineForSecretV1LanguageEnum;
    project_id: number;
    channel_id: number;
    secret: string;
    v?: ProjectChannelInviteDeclineForSecretV1VEnum;
}

export interface ProjectChannelInviteDelV1Request {
    language: ProjectChannelInviteDelV1LanguageEnum;
    id: number;
    v?: ProjectChannelInviteDelV1VEnum;
}

export interface ProjectChannelInviteGetForProjectV1Request {
    language: ProjectChannelInviteGetForProjectV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ProjectChannelInviteGetForProjectV1VEnum;
}

export interface ProjectChannelInviteGetForSecretV1Request {
    language: ProjectChannelInviteGetForSecretV1LanguageEnum;
    channel_id: number;
    secret: string;
    v?: ProjectChannelInviteGetForSecretV1VEnum;
}

export interface ProjectChannelInviteGetV1Request {
    language: ProjectChannelInviteGetV1LanguageEnum;
    id: number;
    v?: ProjectChannelInviteGetV1VEnum;
}

export interface ProjectChannelInviteListV1Request {
    language: ProjectChannelInviteListV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ProjectChannelInviteListV1VEnum;
}

/**
 * ProjectChannelInviteApi - interface
 * 
 * @export
 * @interface ProjectChannelInviteApiInterface
 */
export interface ProjectChannelInviteApiInterface {
    /**
     * 
     * @summary Accept channel invitation for selected project
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id The project to which you want to add a channel
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteAcceptForProjectV1Raw(requestParameters: ProjectChannelInviteAcceptForProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Accept channel invitation for selected project
     */
    projectChannelInviteAcceptForProjectV1(requestParameters: ProjectChannelInviteAcceptForProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Accept channel invitation using a secret link
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id The project to which you want to add a channel
     * @param {number} channel_id Channel id
     * @param {string} secret Secret
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteAcceptForSecretV1Raw(requestParameters: ProjectChannelInviteAcceptForSecretV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Accept channel invitation using a secret link
     */
    projectChannelInviteAcceptForSecretV1(requestParameters: ProjectChannelInviteAcceptForSecretV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Add channel invite item for another user by email
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {string} email Email
     * @param {0 | 1 | 1 | 2} access_type Access type
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteAddByEmailV1Raw(requestParameters: ProjectChannelInviteAddByEmailV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectChannelInviteResponse>>;

    /**
     * Add channel invite item for another user by email
     */
    projectChannelInviteAddByEmailV1(requestParameters: ProjectChannelInviteAddByEmailV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectChannelInviteResponse>;

    /**
     * 
     * @summary Add channel invite item for another user by id
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {0 | 1 | 1 | 2} access_type Access type
     * @param {string} to_project_external_id Project for get access by external id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteAddByIdV1Raw(requestParameters: ProjectChannelInviteAddByIdV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectChannelInviteResponse>>;

    /**
     * Add channel invite item for another user by id
     */
    projectChannelInviteAddByIdV1(requestParameters: ProjectChannelInviteAddByIdV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectChannelInviteResponse>;

    /**
     * 
     * @summary Decline channel invitation for selected project
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Channel id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteDeclineForProjectV1Raw(requestParameters: ProjectChannelInviteDeclineForProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Decline channel invitation for selected project
     */
    projectChannelInviteDeclineForProjectV1(requestParameters: ProjectChannelInviteDeclineForProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Decline channel invitation using a secret link
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id The project to which you want to add a channel
     * @param {number} channel_id Channel id
     * @param {string} secret Secret
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteDeclineForSecretV1Raw(requestParameters: ProjectChannelInviteDeclineForSecretV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Decline channel invitation using a secret link
     */
    projectChannelInviteDeclineForSecretV1(requestParameters: ProjectChannelInviteDeclineForSecretV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Del channel invite item for my channel for another user
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} id Unique id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteDelV1Raw(requestParameters: ProjectChannelInviteDelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Del channel invite item for my channel for another user
     */
    projectChannelInviteDelV1(requestParameters: ProjectChannelInviteDelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Get invitation for channel
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Current project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteGetForProjectV1Raw(requestParameters: ProjectChannelInviteGetForProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectChannelInviteLinkResponse>>;

    /**
     * Get invitation for channel
     */
    projectChannelInviteGetForProjectV1(requestParameters: ProjectChannelInviteGetForProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectChannelInviteLinkResponse>;

    /**
     * 
     * @summary Get channel invitation using a secret link
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} channel_id Channel id
     * @param {string} secret Secret
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteGetForSecretV1Raw(requestParameters: ProjectChannelInviteGetForSecretV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectChannelInviteLinkResponse>>;

    /**
     * Get channel invitation using a secret link
     */
    projectChannelInviteGetForSecretV1(requestParameters: ProjectChannelInviteGetForSecretV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectChannelInviteLinkResponse>;

    /**
     * 
     * @summary Get channel invite item for my channel for another user
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} id Channel request id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteGetV1Raw(requestParameters: ProjectChannelInviteGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Get channel invite item for my channel for another user
     */
    projectChannelInviteGetV1(requestParameters: ProjectChannelInviteGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary List of invites for channel in project
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteListV1Raw(requestParameters: ProjectChannelInviteListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfProjectChannelInviteResponse>>;

    /**
     * List of invites for channel in project
     */
    projectChannelInviteListV1(requestParameters: ProjectChannelInviteListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfProjectChannelInviteResponse>;

}

/**
 * 
 */
export class ProjectChannelInviteApi extends runtime.BaseAPI implements ProjectChannelInviteApiInterface {

    /**
     * Accept channel invitation for selected project
     */
    async projectChannelInviteAcceptForProjectV1Raw(requestParameters: ProjectChannelInviteAcceptForProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling projectChannelInviteAcceptForProjectV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling projectChannelInviteAcceptForProjectV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling projectChannelInviteAcceptForProjectV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_invite/accept_for_project`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Accept channel invitation for selected project
     */
    async projectChannelInviteAcceptForProjectV1(requestParameters: ProjectChannelInviteAcceptForProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.projectChannelInviteAcceptForProjectV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Accept channel invitation using a secret link
     */
    async projectChannelInviteAcceptForSecretV1Raw(requestParameters: ProjectChannelInviteAcceptForSecretV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling projectChannelInviteAcceptForSecretV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling projectChannelInviteAcceptForSecretV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling projectChannelInviteAcceptForSecretV1().'
            );
        }

        if (requestParameters['secret'] == null) {
            throw new runtime.RequiredError(
                'secret',
                'Required parameter "secret" was null or undefined when calling projectChannelInviteAcceptForSecretV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        if (requestParameters['secret'] != null) {
            queryParameters['secret'] = requestParameters['secret'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_invite/accept_for_secret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Accept channel invitation using a secret link
     */
    async projectChannelInviteAcceptForSecretV1(requestParameters: ProjectChannelInviteAcceptForSecretV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.projectChannelInviteAcceptForSecretV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add channel invite item for another user by email
     */
    async projectChannelInviteAddByEmailV1Raw(requestParameters: ProjectChannelInviteAddByEmailV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectChannelInviteResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling projectChannelInviteAddByEmailV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling projectChannelInviteAddByEmailV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling projectChannelInviteAddByEmailV1().'
            );
        }

        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling projectChannelInviteAddByEmailV1().'
            );
        }

        if (requestParameters['access_type'] == null) {
            throw new runtime.RequiredError(
                'access_type',
                'Required parameter "access_type" was null or undefined when calling projectChannelInviteAddByEmailV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['access_type'] != null) {
            queryParameters['access_type'] = requestParameters['access_type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_invite/add_by_email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectChannelInviteResponseFromJSON(jsonValue));
    }

    /**
     * Add channel invite item for another user by email
     */
    async projectChannelInviteAddByEmailV1(requestParameters: ProjectChannelInviteAddByEmailV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectChannelInviteResponse> {
        const response = await this.projectChannelInviteAddByEmailV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add channel invite item for another user by id
     */
    async projectChannelInviteAddByIdV1Raw(requestParameters: ProjectChannelInviteAddByIdV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectChannelInviteResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling projectChannelInviteAddByIdV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling projectChannelInviteAddByIdV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling projectChannelInviteAddByIdV1().'
            );
        }

        if (requestParameters['access_type'] == null) {
            throw new runtime.RequiredError(
                'access_type',
                'Required parameter "access_type" was null or undefined when calling projectChannelInviteAddByIdV1().'
            );
        }

        if (requestParameters['to_project_external_id'] == null) {
            throw new runtime.RequiredError(
                'to_project_external_id',
                'Required parameter "to_project_external_id" was null or undefined when calling projectChannelInviteAddByIdV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        if (requestParameters['access_type'] != null) {
            queryParameters['access_type'] = requestParameters['access_type'];
        }

        if (requestParameters['to_project_external_id'] != null) {
            queryParameters['to_project_external_id'] = requestParameters['to_project_external_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_invite/add_by_id`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectChannelInviteResponseFromJSON(jsonValue));
    }

    /**
     * Add channel invite item for another user by id
     */
    async projectChannelInviteAddByIdV1(requestParameters: ProjectChannelInviteAddByIdV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectChannelInviteResponse> {
        const response = await this.projectChannelInviteAddByIdV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Decline channel invitation for selected project
     */
    async projectChannelInviteDeclineForProjectV1Raw(requestParameters: ProjectChannelInviteDeclineForProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling projectChannelInviteDeclineForProjectV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling projectChannelInviteDeclineForProjectV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling projectChannelInviteDeclineForProjectV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_invite/decline_for_project`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Decline channel invitation for selected project
     */
    async projectChannelInviteDeclineForProjectV1(requestParameters: ProjectChannelInviteDeclineForProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.projectChannelInviteDeclineForProjectV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Decline channel invitation using a secret link
     */
    async projectChannelInviteDeclineForSecretV1Raw(requestParameters: ProjectChannelInviteDeclineForSecretV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling projectChannelInviteDeclineForSecretV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling projectChannelInviteDeclineForSecretV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling projectChannelInviteDeclineForSecretV1().'
            );
        }

        if (requestParameters['secret'] == null) {
            throw new runtime.RequiredError(
                'secret',
                'Required parameter "secret" was null or undefined when calling projectChannelInviteDeclineForSecretV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        if (requestParameters['secret'] != null) {
            queryParameters['secret'] = requestParameters['secret'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_invite/decline_for_secret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Decline channel invitation using a secret link
     */
    async projectChannelInviteDeclineForSecretV1(requestParameters: ProjectChannelInviteDeclineForSecretV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.projectChannelInviteDeclineForSecretV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Del channel invite item for my channel for another user
     */
    async projectChannelInviteDelV1Raw(requestParameters: ProjectChannelInviteDelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling projectChannelInviteDelV1().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectChannelInviteDelV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_invite/del`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Del channel invite item for my channel for another user
     */
    async projectChannelInviteDelV1(requestParameters: ProjectChannelInviteDelV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.projectChannelInviteDelV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get invitation for channel
     */
    async projectChannelInviteGetForProjectV1Raw(requestParameters: ProjectChannelInviteGetForProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectChannelInviteLinkResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling projectChannelInviteGetForProjectV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling projectChannelInviteGetForProjectV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling projectChannelInviteGetForProjectV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_invite/get_for_project`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectChannelInviteLinkResponseFromJSON(jsonValue));
    }

    /**
     * Get invitation for channel
     */
    async projectChannelInviteGetForProjectV1(requestParameters: ProjectChannelInviteGetForProjectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectChannelInviteLinkResponse> {
        const response = await this.projectChannelInviteGetForProjectV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get channel invitation using a secret link
     */
    async projectChannelInviteGetForSecretV1Raw(requestParameters: ProjectChannelInviteGetForSecretV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectChannelInviteLinkResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling projectChannelInviteGetForSecretV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling projectChannelInviteGetForSecretV1().'
            );
        }

        if (requestParameters['secret'] == null) {
            throw new runtime.RequiredError(
                'secret',
                'Required parameter "secret" was null or undefined when calling projectChannelInviteGetForSecretV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        if (requestParameters['secret'] != null) {
            queryParameters['secret'] = requestParameters['secret'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_invite/get_for_secret`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectChannelInviteLinkResponseFromJSON(jsonValue));
    }

    /**
     * Get channel invitation using a secret link
     */
    async projectChannelInviteGetForSecretV1(requestParameters: ProjectChannelInviteGetForSecretV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectChannelInviteLinkResponse> {
        const response = await this.projectChannelInviteGetForSecretV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get channel invite item for my channel for another user
     */
    async projectChannelInviteGetV1Raw(requestParameters: ProjectChannelInviteGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling projectChannelInviteGetV1().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectChannelInviteGetV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_invite/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Get channel invite item for my channel for another user
     */
    async projectChannelInviteGetV1(requestParameters: ProjectChannelInviteGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.projectChannelInviteGetV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of invites for channel in project
     */
    async projectChannelInviteListV1Raw(requestParameters: ProjectChannelInviteListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfProjectChannelInviteResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling projectChannelInviteListV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling projectChannelInviteListV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling projectChannelInviteListV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_invite/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfProjectChannelInviteResponseFromJSON(jsonValue));
    }

    /**
     * List of invites for channel in project
     */
    async projectChannelInviteListV1(requestParameters: ProjectChannelInviteListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfProjectChannelInviteResponse> {
        const response = await this.projectChannelInviteListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ProjectChannelInviteAcceptForProjectV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ProjectChannelInviteAcceptForProjectV1LanguageEnum = typeof ProjectChannelInviteAcceptForProjectV1LanguageEnum[keyof typeof ProjectChannelInviteAcceptForProjectV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteAcceptForProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteAcceptForProjectV1VEnum = typeof ProjectChannelInviteAcceptForProjectV1VEnum[keyof typeof ProjectChannelInviteAcceptForProjectV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteAcceptForSecretV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ProjectChannelInviteAcceptForSecretV1LanguageEnum = typeof ProjectChannelInviteAcceptForSecretV1LanguageEnum[keyof typeof ProjectChannelInviteAcceptForSecretV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteAcceptForSecretV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteAcceptForSecretV1VEnum = typeof ProjectChannelInviteAcceptForSecretV1VEnum[keyof typeof ProjectChannelInviteAcceptForSecretV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteAddByEmailV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ProjectChannelInviteAddByEmailV1LanguageEnum = typeof ProjectChannelInviteAddByEmailV1LanguageEnum[keyof typeof ProjectChannelInviteAddByEmailV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteAddByEmailV1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_12: 1,
    NUMBER_2: 2
} as const;
export type ProjectChannelInviteAddByEmailV1AccessTypeEnum = typeof ProjectChannelInviteAddByEmailV1AccessTypeEnum[keyof typeof ProjectChannelInviteAddByEmailV1AccessTypeEnum];
/**
 * @export
 */
export const ProjectChannelInviteAddByEmailV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteAddByEmailV1VEnum = typeof ProjectChannelInviteAddByEmailV1VEnum[keyof typeof ProjectChannelInviteAddByEmailV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteAddByIdV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ProjectChannelInviteAddByIdV1LanguageEnum = typeof ProjectChannelInviteAddByIdV1LanguageEnum[keyof typeof ProjectChannelInviteAddByIdV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteAddByIdV1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_12: 1,
    NUMBER_2: 2
} as const;
export type ProjectChannelInviteAddByIdV1AccessTypeEnum = typeof ProjectChannelInviteAddByIdV1AccessTypeEnum[keyof typeof ProjectChannelInviteAddByIdV1AccessTypeEnum];
/**
 * @export
 */
export const ProjectChannelInviteAddByIdV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteAddByIdV1VEnum = typeof ProjectChannelInviteAddByIdV1VEnum[keyof typeof ProjectChannelInviteAddByIdV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteDeclineForProjectV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ProjectChannelInviteDeclineForProjectV1LanguageEnum = typeof ProjectChannelInviteDeclineForProjectV1LanguageEnum[keyof typeof ProjectChannelInviteDeclineForProjectV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteDeclineForProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteDeclineForProjectV1VEnum = typeof ProjectChannelInviteDeclineForProjectV1VEnum[keyof typeof ProjectChannelInviteDeclineForProjectV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteDeclineForSecretV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ProjectChannelInviteDeclineForSecretV1LanguageEnum = typeof ProjectChannelInviteDeclineForSecretV1LanguageEnum[keyof typeof ProjectChannelInviteDeclineForSecretV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteDeclineForSecretV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteDeclineForSecretV1VEnum = typeof ProjectChannelInviteDeclineForSecretV1VEnum[keyof typeof ProjectChannelInviteDeclineForSecretV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteDelV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ProjectChannelInviteDelV1LanguageEnum = typeof ProjectChannelInviteDelV1LanguageEnum[keyof typeof ProjectChannelInviteDelV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteDelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteDelV1VEnum = typeof ProjectChannelInviteDelV1VEnum[keyof typeof ProjectChannelInviteDelV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteGetForProjectV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ProjectChannelInviteGetForProjectV1LanguageEnum = typeof ProjectChannelInviteGetForProjectV1LanguageEnum[keyof typeof ProjectChannelInviteGetForProjectV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteGetForProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteGetForProjectV1VEnum = typeof ProjectChannelInviteGetForProjectV1VEnum[keyof typeof ProjectChannelInviteGetForProjectV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteGetForSecretV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ProjectChannelInviteGetForSecretV1LanguageEnum = typeof ProjectChannelInviteGetForSecretV1LanguageEnum[keyof typeof ProjectChannelInviteGetForSecretV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteGetForSecretV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteGetForSecretV1VEnum = typeof ProjectChannelInviteGetForSecretV1VEnum[keyof typeof ProjectChannelInviteGetForSecretV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteGetV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ProjectChannelInviteGetV1LanguageEnum = typeof ProjectChannelInviteGetV1LanguageEnum[keyof typeof ProjectChannelInviteGetV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteGetV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteGetV1VEnum = typeof ProjectChannelInviteGetV1VEnum[keyof typeof ProjectChannelInviteGetV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteListV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ProjectChannelInviteListV1LanguageEnum = typeof ProjectChannelInviteListV1LanguageEnum[keyof typeof ProjectChannelInviteListV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteListV1VEnum = typeof ProjectChannelInviteListV1VEnum[keyof typeof ProjectChannelInviteListV1VEnum];
