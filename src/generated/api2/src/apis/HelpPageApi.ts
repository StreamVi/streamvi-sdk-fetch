/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GetHelpPageResponse,
  PaginatedResponseOfHelpPageResponse,
  StructureHelpPageResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetHelpPageResponseFromJSON,
    GetHelpPageResponseToJSON,
    PaginatedResponseOfHelpPageResponseFromJSON,
    PaginatedResponseOfHelpPageResponseToJSON,
    StructureHelpPageResponseFromJSON,
    StructureHelpPageResponseToJSON,
} from '../models/index';

export interface HelpPageGetV1Request {
    language: HelpPageGetV1LanguageEnum;
    url: string;
    v?: HelpPageGetV1VEnum;
}

export interface HelpPageListV1Request {
    language: HelpPageListV1LanguageEnum;
    v?: HelpPageListV1VEnum;
    s?: string;
    limit?: number;
    offset?: number;
}

export interface HelpPageStructureV1Request {
    language: HelpPageStructureV1LanguageEnum;
    v?: HelpPageStructureV1VEnum;
}

/**
 * HelpPageApi - interface
 * 
 * @export
 * @interface HelpPageApiInterface
 */
export interface HelpPageApiInterface {
    /**
     * 
     * @summary Get help page
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {string} url Url of page
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpPageApiInterface
     */
    helpPageGetV1Raw(requestParameters: HelpPageGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetHelpPageResponse>>;

    /**
     * Get help page
     */
    helpPageGetV1(requestParameters: HelpPageGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetHelpPageResponse>;

    /**
     * 
     * @summary Get list of help pages
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {string} [s] String for search
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpPageApiInterface
     */
    helpPageListV1Raw(requestParameters: HelpPageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfHelpPageResponse>>;

    /**
     * Get list of help pages
     */
    helpPageListV1(requestParameters: HelpPageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseOfHelpPageResponse>;

    /**
     * 
     * @summary Get structure of help pages
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpPageApiInterface
     */
    helpPageStructureV1Raw(requestParameters: HelpPageStructureV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StructureHelpPageResponse>>;

    /**
     * Get structure of help pages
     */
    helpPageStructureV1(requestParameters: HelpPageStructureV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StructureHelpPageResponse>;

}

/**
 * 
 */
export class HelpPageApi extends runtime.BaseAPI implements HelpPageApiInterface {

    /**
     * Get help page
     */
    async helpPageGetV1Raw(requestParameters: HelpPageGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetHelpPageResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling helpPageGetV1().'
            );
        }

        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling helpPageGetV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/help/page/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetHelpPageResponseFromJSON(jsonValue));
    }

    /**
     * Get help page
     */
    async helpPageGetV1(requestParameters: HelpPageGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetHelpPageResponse> {
        const response = await this.helpPageGetV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of help pages
     */
    async helpPageListV1Raw(requestParameters: HelpPageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfHelpPageResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling helpPageListV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['s'] != null) {
            queryParameters['s'] = requestParameters['s'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/help/page/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseOfHelpPageResponseFromJSON(jsonValue));
    }

    /**
     * Get list of help pages
     */
    async helpPageListV1(requestParameters: HelpPageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseOfHelpPageResponse> {
        const response = await this.helpPageListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get structure of help pages
     */
    async helpPageStructureV1Raw(requestParameters: HelpPageStructureV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StructureHelpPageResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling helpPageStructureV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/help/page/structure`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StructureHelpPageResponseFromJSON(jsonValue));
    }

    /**
     * Get structure of help pages
     */
    async helpPageStructureV1(requestParameters: HelpPageStructureV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StructureHelpPageResponse> {
        const response = await this.helpPageStructureV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const HelpPageGetV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type HelpPageGetV1LanguageEnum = typeof HelpPageGetV1LanguageEnum[keyof typeof HelpPageGetV1LanguageEnum];
/**
 * @export
 */
export const HelpPageGetV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type HelpPageGetV1VEnum = typeof HelpPageGetV1VEnum[keyof typeof HelpPageGetV1VEnum];
/**
 * @export
 */
export const HelpPageListV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type HelpPageListV1LanguageEnum = typeof HelpPageListV1LanguageEnum[keyof typeof HelpPageListV1LanguageEnum];
/**
 * @export
 */
export const HelpPageListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type HelpPageListV1VEnum = typeof HelpPageListV1VEnum[keyof typeof HelpPageListV1VEnum];
/**
 * @export
 */
export const HelpPageStructureV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type HelpPageStructureV1LanguageEnum = typeof HelpPageStructureV1LanguageEnum[keyof typeof HelpPageStructureV1LanguageEnum];
/**
 * @export
 */
export const HelpPageStructureV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type HelpPageStructureV1VEnum = typeof HelpPageStructureV1VEnum[keyof typeof HelpPageStructureV1VEnum];
