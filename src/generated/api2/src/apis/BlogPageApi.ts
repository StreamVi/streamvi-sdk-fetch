/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PaginatedResponseOfBlogPageSiteResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PaginatedResponseOfBlogPageSiteResponseFromJSON,
    PaginatedResponseOfBlogPageSiteResponseToJSON,
} from '../models/index';

export interface BlogPageGetV1Request {
    language: BlogPageGetV1LanguageEnum;
    url: string;
    v?: BlogPageGetV1VEnum;
}

export interface BlogPageListV1Request {
    language: BlogPageListV1LanguageEnum;
    v?: BlogPageListV1VEnum;
    s?: string;
    limit?: number;
    offset?: number;
}

/**
 * BlogPageApi - interface
 * 
 * @export
 * @interface BlogPageApiInterface
 */
export interface BlogPageApiInterface {
    /**
     * 
     * @summary Get blog page
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {string} url Url of page
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPageApiInterface
     */
    blogPageGetV1Raw(requestParameters: BlogPageGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfBlogPageSiteResponse>>;

    /**
     * Get blog page
     */
    blogPageGetV1(requestParameters: BlogPageGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseOfBlogPageSiteResponse>;

    /**
     * 
     * @summary Get list of blog pages
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {string} [s] String for search
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPageApiInterface
     */
    blogPageListV1Raw(requestParameters: BlogPageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfBlogPageSiteResponse>>;

    /**
     * Get list of blog pages
     */
    blogPageListV1(requestParameters: BlogPageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseOfBlogPageSiteResponse>;

}

/**
 * 
 */
export class BlogPageApi extends runtime.BaseAPI implements BlogPageApiInterface {

    /**
     * Get blog page
     */
    async blogPageGetV1Raw(requestParameters: BlogPageGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfBlogPageSiteResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling blogPageGetV1().'
            );
        }

        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling blogPageGetV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/blog/page/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseOfBlogPageSiteResponseFromJSON(jsonValue));
    }

    /**
     * Get blog page
     */
    async blogPageGetV1(requestParameters: BlogPageGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseOfBlogPageSiteResponse> {
        const response = await this.blogPageGetV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of blog pages
     */
    async blogPageListV1Raw(requestParameters: BlogPageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfBlogPageSiteResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling blogPageListV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['s'] != null) {
            queryParameters['s'] = requestParameters['s'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/blog/page/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseOfBlogPageSiteResponseFromJSON(jsonValue));
    }

    /**
     * Get list of blog pages
     */
    async blogPageListV1(requestParameters: BlogPageListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseOfBlogPageSiteResponse> {
        const response = await this.blogPageListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BlogPageGetV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type BlogPageGetV1LanguageEnum = typeof BlogPageGetV1LanguageEnum[keyof typeof BlogPageGetV1LanguageEnum];
/**
 * @export
 */
export const BlogPageGetV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type BlogPageGetV1VEnum = typeof BlogPageGetV1VEnum[keyof typeof BlogPageGetV1VEnum];
/**
 * @export
 */
export const BlogPageListV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type BlogPageListV1LanguageEnum = typeof BlogPageListV1LanguageEnum[keyof typeof BlogPageListV1LanguageEnum];
/**
 * @export
 */
export const BlogPageListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type BlogPageListV1VEnum = typeof BlogPageListV1VEnum[keyof typeof BlogPageListV1VEnum];
