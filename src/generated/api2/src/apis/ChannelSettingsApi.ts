/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ListOfPlaylistItemResponse,
  ListOfSitePlannedResponse,
  SiteChannelStatusResponse,
  SitePlannedResponse,
  SiteSetNameRequest,
  SiteSetPlannedRequest,
  SiteSetTranscoderRequest,
  SiteSetUrlRequest,
  SiteUpdateChatTelegramRequest,
  SiteUpdateOptionsOkRequest,
  SiteUpdateOptionsTrovoRequest,
  SiteUpdateOptionsTwitchRequest,
  SiteUpdateOptionsVkRequest,
  SiteUpdateOptionsVkVideoLiveRequest,
  SiteUpdateOptionsYoutubeRequest,
  SuccessResponse,
  TelegramChatPostsItem,
  TelegramChatPostsResponseDto,
  TelegramInitConnectResponseDto,
  TelegramSetSettingsRequestDto,
  TelegramSettingsResponseDto,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ListOfPlaylistItemResponseFromJSON,
    ListOfPlaylistItemResponseToJSON,
    ListOfSitePlannedResponseFromJSON,
    ListOfSitePlannedResponseToJSON,
    SiteChannelStatusResponseFromJSON,
    SiteChannelStatusResponseToJSON,
    SitePlannedResponseFromJSON,
    SitePlannedResponseToJSON,
    SiteSetNameRequestFromJSON,
    SiteSetNameRequestToJSON,
    SiteSetPlannedRequestFromJSON,
    SiteSetPlannedRequestToJSON,
    SiteSetTranscoderRequestFromJSON,
    SiteSetTranscoderRequestToJSON,
    SiteSetUrlRequestFromJSON,
    SiteSetUrlRequestToJSON,
    SiteUpdateChatTelegramRequestFromJSON,
    SiteUpdateChatTelegramRequestToJSON,
    SiteUpdateOptionsOkRequestFromJSON,
    SiteUpdateOptionsOkRequestToJSON,
    SiteUpdateOptionsTrovoRequestFromJSON,
    SiteUpdateOptionsTrovoRequestToJSON,
    SiteUpdateOptionsTwitchRequestFromJSON,
    SiteUpdateOptionsTwitchRequestToJSON,
    SiteUpdateOptionsVkRequestFromJSON,
    SiteUpdateOptionsVkRequestToJSON,
    SiteUpdateOptionsVkVideoLiveRequestFromJSON,
    SiteUpdateOptionsVkVideoLiveRequestToJSON,
    SiteUpdateOptionsYoutubeRequestFromJSON,
    SiteUpdateOptionsYoutubeRequestToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    TelegramChatPostsItemFromJSON,
    TelegramChatPostsItemToJSON,
    TelegramChatPostsResponseDtoFromJSON,
    TelegramChatPostsResponseDtoToJSON,
    TelegramInitConnectResponseDtoFromJSON,
    TelegramInitConnectResponseDtoToJSON,
    TelegramSetSettingsRequestDtoFromJSON,
    TelegramSetSettingsRequestDtoToJSON,
    TelegramSettingsResponseDtoFromJSON,
    TelegramSettingsResponseDtoToJSON,
} from '../models/index';

export interface ChannelChatGetTelegramSettingV1Request {
    language: ChannelChatGetTelegramSettingV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ChannelChatGetTelegramSettingV1VEnum;
}

export interface ChannelChatInitTelegramChatConnectV1Request {
    language: ChannelChatInitTelegramChatConnectV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ChannelChatInitTelegramChatConnectV1VEnum;
}

export interface ChannelChatRemoveTelegramChatV1Request {
    language: ChannelChatRemoveTelegramChatV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ChannelChatRemoveTelegramChatV1VEnum;
}

export interface ChannelChatSetTelegramSettingV1Request {
    language: ChannelChatSetTelegramSettingV1LanguageEnum;
    project_id: number;
    channel_id: number;
    TelegramSetSettingsRequestDto: TelegramSetSettingsRequestDto;
    v?: ChannelChatSetTelegramSettingV1VEnum;
}

export interface ChannelChatTelegramPostsV1Request {
    language: ChannelChatTelegramPostsV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ChannelChatTelegramPostsV1VEnum;
}

export interface ChannelChatUpdateOptionsTelegramV1Request {
    SiteUpdateChatTelegramRequest: SiteUpdateChatTelegramRequest;
}

export interface ChannelOptionsGetPlannedV1Request {
    language: ChannelOptionsGetPlannedV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ChannelOptionsGetPlannedV1VEnum;
}

export interface ChannelOptionsGetPlayListV1Request {
    language: ChannelOptionsGetPlayListV1LanguageEnum;
    project_id: number;
    channel_id: number;
    v?: ChannelOptionsGetPlayListV1VEnum;
}

export interface ChannelOptionsUpdateOptionsOkV1Request {
    SiteUpdateOptionsOkRequest: SiteUpdateOptionsOkRequest;
}

export interface ChannelOptionsUpdateOptionsTrovoV1Request {
    SiteUpdateOptionsTrovoRequest: SiteUpdateOptionsTrovoRequest;
}

export interface ChannelOptionsUpdateOptionsTwitchV1Request {
    SiteUpdateOptionsTwitchRequest: SiteUpdateOptionsTwitchRequest;
}

export interface ChannelOptionsUpdateOptionsVkV1Request {
    SiteUpdateOptionsVkRequest: SiteUpdateOptionsVkRequest;
}

export interface ChannelOptionsUpdateOptionsVkVideoLiveV1Request {
    SiteUpdateOptionsVkVideoLiveRequest: SiteUpdateOptionsVkVideoLiveRequest;
}

export interface ChannelOptionsUpdateOptionsYoutubeV1Request {
    SiteUpdateOptionsYoutubeRequest: SiteUpdateOptionsYoutubeRequest;
}

export interface ChannelOptionsUpdatePlannedV1Request {
    SiteSetPlannedRequest: SiteSetPlannedRequest;
}

export interface ChannelSettingSetNameV1Request {
    SiteSetNameRequest: SiteSetNameRequest;
}

export interface ChannelSettingUpdateRtmpV1Request {
    SiteSetUrlRequest: SiteSetUrlRequest;
}

export interface ChannelSettingUpdateTokenV1Request {
    language: ChannelSettingUpdateTokenV1LanguageEnum;
    project_id: number;
    channel_id: number;
    role: ChannelSettingUpdateTokenV1RoleEnum;
    v?: ChannelSettingUpdateTokenV1VEnum;
}

export interface ChannelSettingUpdateTranscoderV1Request {
    SiteSetTranscoderRequest: SiteSetTranscoderRequest;
}

export interface TelegramGetPostByFilterV1Request {
    language: TelegramGetPostByFilterV1LanguageEnum;
    project_id: number;
    channel_id: number;
    filter_mode: number;
    v?: TelegramGetPostByFilterV1VEnum;
}

/**
 * ChannelSettingsApi - interface
 * 
 * @export
 * @interface ChannelSettingsApiInterface
 */
export interface ChannelSettingsApiInterface {
    /**
     * 
     * @summary Get telegram settings
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatGetTelegramSettingV1Raw(requestParameters: ChannelChatGetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramSettingsResponseDto>>;

    /**
     * Get telegram settings
     */
    channelChatGetTelegramSettingV1(requestParameters: ChannelChatGetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramSettingsResponseDto>;

    /**
     * 
     * @summary Get code for connected chat
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatInitTelegramChatConnectV1Raw(requestParameters: ChannelChatInitTelegramChatConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramInitConnectResponseDto>>;

    /**
     * Get code for connected chat
     */
    channelChatInitTelegramChatConnectV1(requestParameters: ChannelChatInitTelegramChatConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramInitConnectResponseDto>;

    /**
     * 
     * @summary Disconnect telegram chat
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatRemoveTelegramChatV1Raw(requestParameters: ChannelChatRemoveTelegramChatV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Disconnect telegram chat
     */
    channelChatRemoveTelegramChatV1(requestParameters: ChannelChatRemoveTelegramChatV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Set telegram settings
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {TelegramSetSettingsRequestDto} TelegramSetSettingsRequestDto 
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatSetTelegramSettingV1Raw(requestParameters: ChannelChatSetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Set telegram settings
     */
    channelChatSetTelegramSettingV1(requestParameters: ChannelChatSetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Get telegram post list
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatTelegramPostsV1Raw(requestParameters: ChannelChatTelegramPostsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramChatPostsResponseDto>>;

    /**
     * Get telegram post list
     */
    channelChatTelegramPostsV1(requestParameters: ChannelChatTelegramPostsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramChatPostsResponseDto>;

    /**
     * 
     * @summary Optional settings for telegram
     * @param {SiteUpdateChatTelegramRequest} SiteUpdateChatTelegramRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatUpdateOptionsTelegramV1Raw(requestParameters: ChannelChatUpdateOptionsTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Optional settings for telegram
     */
    channelChatUpdateOptionsTelegramV1(requestParameters: ChannelChatUpdateOptionsTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Get planned list
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsGetPlannedV1Raw(requestParameters: ChannelOptionsGetPlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfSitePlannedResponse>>;

    /**
     * Get planned list
     */
    channelOptionsGetPlannedV1(requestParameters: ChannelOptionsGetPlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfSitePlannedResponse>;

    /**
     * 
     * @summary Get playlists from the platform
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsGetPlayListV1Raw(requestParameters: ChannelOptionsGetPlayListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfPlaylistItemResponse>>;

    /**
     * Get playlists from the platform
     */
    channelOptionsGetPlayListV1(requestParameters: ChannelOptionsGetPlayListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfPlaylistItemResponse>;

    /**
     * 
     * @summary Optional settings for ok. Depends on the tariff.
     * @param {SiteUpdateOptionsOkRequest} SiteUpdateOptionsOkRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsOkV1Raw(requestParameters: ChannelOptionsUpdateOptionsOkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Optional settings for ok. Depends on the tariff.
     */
    channelOptionsUpdateOptionsOkV1(requestParameters: ChannelOptionsUpdateOptionsOkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Optional settings for trovo. Depends on the tariff.
     * @param {SiteUpdateOptionsTrovoRequest} SiteUpdateOptionsTrovoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsTrovoV1Raw(requestParameters: ChannelOptionsUpdateOptionsTrovoV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Optional settings for trovo. Depends on the tariff.
     */
    channelOptionsUpdateOptionsTrovoV1(requestParameters: ChannelOptionsUpdateOptionsTrovoV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Optional settings for twitch. Depends on the tariff.
     * @param {SiteUpdateOptionsTwitchRequest} SiteUpdateOptionsTwitchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsTwitchV1Raw(requestParameters: ChannelOptionsUpdateOptionsTwitchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Optional settings for twitch. Depends on the tariff.
     */
    channelOptionsUpdateOptionsTwitchV1(requestParameters: ChannelOptionsUpdateOptionsTwitchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Optional settings for vk. Depends on the tariff.
     * @param {SiteUpdateOptionsVkRequest} SiteUpdateOptionsVkRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsVkV1Raw(requestParameters: ChannelOptionsUpdateOptionsVkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Optional settings for vk. Depends on the tariff.
     */
    channelOptionsUpdateOptionsVkV1(requestParameters: ChannelOptionsUpdateOptionsVkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Optional settings for vk video live. Depends on the tariff.
     * @param {SiteUpdateOptionsVkVideoLiveRequest} SiteUpdateOptionsVkVideoLiveRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsVkVideoLiveV1Raw(requestParameters: ChannelOptionsUpdateOptionsVkVideoLiveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Optional settings for vk video live. Depends on the tariff.
     */
    channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters: ChannelOptionsUpdateOptionsVkVideoLiveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Optional settings for youtube. Depends on the tariff.
     * @param {SiteUpdateOptionsYoutubeRequest} SiteUpdateOptionsYoutubeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsYoutubeV1Raw(requestParameters: ChannelOptionsUpdateOptionsYoutubeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Optional settings for youtube. Depends on the tariff.
     */
    channelOptionsUpdateOptionsYoutubeV1(requestParameters: ChannelOptionsUpdateOptionsYoutubeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Set planned id. Depends on the tariff.
     * @param {SiteSetPlannedRequest} SiteSetPlannedRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdatePlannedV1Raw(requestParameters: ChannelOptionsUpdatePlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SitePlannedResponse>>;

    /**
     * Set planned id. Depends on the tariff.
     */
    channelOptionsUpdatePlannedV1(requestParameters: ChannelOptionsUpdatePlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SitePlannedResponse>;

    /**
     * 
     * @summary Get status platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingGetStatusV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteChannelStatusResponse>>;

    /**
     * Get status platform
     */
    channelSettingGetStatusV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteChannelStatusResponse>;

    /**
     * 
     * @summary Set name from custom channel. Global settings.
     * @param {SiteSetNameRequest} SiteSetNameRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingSetNameV1Raw(requestParameters: ChannelSettingSetNameV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Set name from custom channel. Global settings.
     */
    channelSettingSetNameV1(requestParameters: ChannelSettingSetNameV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Set rtmp url from channel. Global settings.
     * @param {SiteSetUrlRequest} SiteSetUrlRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingUpdateRtmpV1Raw(requestParameters: ChannelSettingUpdateRtmpV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Set rtmp url from channel. Global settings.
     */
    channelSettingUpdateRtmpV1(requestParameters: ChannelSettingUpdateRtmpV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Get status platform
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {'account' | 'group'} role Token role
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingUpdateTokenV1Raw(requestParameters: ChannelSettingUpdateTokenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get status platform
     */
    channelSettingUpdateTokenV1(requestParameters: ChannelSettingUpdateTokenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Set transcoder from channel. Personal settings.
     * @param {SiteSetTranscoderRequest} SiteSetTranscoderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingUpdateTranscoderV1Raw(requestParameters: ChannelSettingUpdateTranscoderV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Set transcoder from channel. Personal settings.
     */
    channelSettingUpdateTranscoderV1(requestParameters: ChannelSettingUpdateTranscoderV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Get telegram post by filter
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} channel_id Channel id
     * @param {number} filter_mode 
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    telegramGetPostByFilterV1Raw(requestParameters: TelegramGetPostByFilterV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramChatPostsItem>>;

    /**
     * Get telegram post by filter
     */
    telegramGetPostByFilterV1(requestParameters: TelegramGetPostByFilterV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramChatPostsItem>;

}

/**
 * 
 */
export class ChannelSettingsApi extends runtime.BaseAPI implements ChannelSettingsApiInterface {

    /**
     * Get telegram settings
     */
    async channelChatGetTelegramSettingV1Raw(requestParameters: ChannelChatGetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramSettingsResponseDto>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling channelChatGetTelegramSettingV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling channelChatGetTelegramSettingV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling channelChatGetTelegramSettingV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_settings/chat/telegram/setting`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TelegramSettingsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get telegram settings
     */
    async channelChatGetTelegramSettingV1(requestParameters: ChannelChatGetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramSettingsResponseDto> {
        const response = await this.channelChatGetTelegramSettingV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get code for connected chat
     */
    async channelChatInitTelegramChatConnectV1Raw(requestParameters: ChannelChatInitTelegramChatConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramInitConnectResponseDto>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling channelChatInitTelegramChatConnectV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling channelChatInitTelegramChatConnectV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling channelChatInitTelegramChatConnectV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_settings/chat/telegram/init`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TelegramInitConnectResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get code for connected chat
     */
    async channelChatInitTelegramChatConnectV1(requestParameters: ChannelChatInitTelegramChatConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramInitConnectResponseDto> {
        const response = await this.channelChatInitTelegramChatConnectV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disconnect telegram chat
     */
    async channelChatRemoveTelegramChatV1Raw(requestParameters: ChannelChatRemoveTelegramChatV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling channelChatRemoveTelegramChatV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling channelChatRemoveTelegramChatV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling channelChatRemoveTelegramChatV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_settings/chat/telegram/disconnect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Disconnect telegram chat
     */
    async channelChatRemoveTelegramChatV1(requestParameters: ChannelChatRemoveTelegramChatV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.channelChatRemoveTelegramChatV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set telegram settings
     */
    async channelChatSetTelegramSettingV1Raw(requestParameters: ChannelChatSetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling channelChatSetTelegramSettingV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling channelChatSetTelegramSettingV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling channelChatSetTelegramSettingV1().'
            );
        }

        if (requestParameters['TelegramSetSettingsRequestDto'] == null) {
            throw new runtime.RequiredError(
                'TelegramSetSettingsRequestDto',
                'Required parameter "TelegramSetSettingsRequestDto" was null or undefined when calling channelChatSetTelegramSettingV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/channel_settings/chat/telegram/setting`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TelegramSetSettingsRequestDtoToJSON(requestParameters['TelegramSetSettingsRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Set telegram settings
     */
    async channelChatSetTelegramSettingV1(requestParameters: ChannelChatSetTelegramSettingV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.channelChatSetTelegramSettingV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get telegram post list
     */
    async channelChatTelegramPostsV1Raw(requestParameters: ChannelChatTelegramPostsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramChatPostsResponseDto>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling channelChatTelegramPostsV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling channelChatTelegramPostsV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling channelChatTelegramPostsV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_settings/chat/telegram/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TelegramChatPostsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get telegram post list
     */
    async channelChatTelegramPostsV1(requestParameters: ChannelChatTelegramPostsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramChatPostsResponseDto> {
        const response = await this.channelChatTelegramPostsV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Optional settings for telegram
     */
    async channelChatUpdateOptionsTelegramV1Raw(requestParameters: ChannelChatUpdateOptionsTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['SiteUpdateChatTelegramRequest'] == null) {
            throw new runtime.RequiredError(
                'SiteUpdateChatTelegramRequest',
                'Required parameter "SiteUpdateChatTelegramRequest" was null or undefined when calling channelChatUpdateOptionsTelegramV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/channel_settings/chat/setTelegram`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteUpdateChatTelegramRequestToJSON(requestParameters['SiteUpdateChatTelegramRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Optional settings for telegram
     */
    async channelChatUpdateOptionsTelegramV1(requestParameters: ChannelChatUpdateOptionsTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.channelChatUpdateOptionsTelegramV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get planned list
     */
    async channelOptionsGetPlannedV1Raw(requestParameters: ChannelOptionsGetPlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfSitePlannedResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling channelOptionsGetPlannedV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling channelOptionsGetPlannedV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling channelOptionsGetPlannedV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_settings/options/getPlanned`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfSitePlannedResponseFromJSON(jsonValue));
    }

    /**
     * Get planned list
     */
    async channelOptionsGetPlannedV1(requestParameters: ChannelOptionsGetPlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfSitePlannedResponse> {
        const response = await this.channelOptionsGetPlannedV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get playlists from the platform
     */
    async channelOptionsGetPlayListV1Raw(requestParameters: ChannelOptionsGetPlayListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfPlaylistItemResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling channelOptionsGetPlayListV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling channelOptionsGetPlayListV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling channelOptionsGetPlayListV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_settings/options/getPlaylist`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfPlaylistItemResponseFromJSON(jsonValue));
    }

    /**
     * Get playlists from the platform
     */
    async channelOptionsGetPlayListV1(requestParameters: ChannelOptionsGetPlayListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfPlaylistItemResponse> {
        const response = await this.channelOptionsGetPlayListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Optional settings for ok. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsOkV1Raw(requestParameters: ChannelOptionsUpdateOptionsOkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['SiteUpdateOptionsOkRequest'] == null) {
            throw new runtime.RequiredError(
                'SiteUpdateOptionsOkRequest',
                'Required parameter "SiteUpdateOptionsOkRequest" was null or undefined when calling channelOptionsUpdateOptionsOkV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/channel_settings/options/setOk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteUpdateOptionsOkRequestToJSON(requestParameters['SiteUpdateOptionsOkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Optional settings for ok. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsOkV1(requestParameters: ChannelOptionsUpdateOptionsOkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.channelOptionsUpdateOptionsOkV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Optional settings for trovo. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsTrovoV1Raw(requestParameters: ChannelOptionsUpdateOptionsTrovoV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['SiteUpdateOptionsTrovoRequest'] == null) {
            throw new runtime.RequiredError(
                'SiteUpdateOptionsTrovoRequest',
                'Required parameter "SiteUpdateOptionsTrovoRequest" was null or undefined when calling channelOptionsUpdateOptionsTrovoV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/channel_settings/options/setTrovo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteUpdateOptionsTrovoRequestToJSON(requestParameters['SiteUpdateOptionsTrovoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Optional settings for trovo. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsTrovoV1(requestParameters: ChannelOptionsUpdateOptionsTrovoV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.channelOptionsUpdateOptionsTrovoV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Optional settings for twitch. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsTwitchV1Raw(requestParameters: ChannelOptionsUpdateOptionsTwitchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['SiteUpdateOptionsTwitchRequest'] == null) {
            throw new runtime.RequiredError(
                'SiteUpdateOptionsTwitchRequest',
                'Required parameter "SiteUpdateOptionsTwitchRequest" was null or undefined when calling channelOptionsUpdateOptionsTwitchV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/channel_settings/options/setTwitch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteUpdateOptionsTwitchRequestToJSON(requestParameters['SiteUpdateOptionsTwitchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Optional settings for twitch. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsTwitchV1(requestParameters: ChannelOptionsUpdateOptionsTwitchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.channelOptionsUpdateOptionsTwitchV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Optional settings for vk. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsVkV1Raw(requestParameters: ChannelOptionsUpdateOptionsVkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['SiteUpdateOptionsVkRequest'] == null) {
            throw new runtime.RequiredError(
                'SiteUpdateOptionsVkRequest',
                'Required parameter "SiteUpdateOptionsVkRequest" was null or undefined when calling channelOptionsUpdateOptionsVkV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/channel_settings/options/setVk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteUpdateOptionsVkRequestToJSON(requestParameters['SiteUpdateOptionsVkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Optional settings for vk. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsVkV1(requestParameters: ChannelOptionsUpdateOptionsVkV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.channelOptionsUpdateOptionsVkV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Optional settings for vk video live. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsVkVideoLiveV1Raw(requestParameters: ChannelOptionsUpdateOptionsVkVideoLiveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['SiteUpdateOptionsVkVideoLiveRequest'] == null) {
            throw new runtime.RequiredError(
                'SiteUpdateOptionsVkVideoLiveRequest',
                'Required parameter "SiteUpdateOptionsVkVideoLiveRequest" was null or undefined when calling channelOptionsUpdateOptionsVkVideoLiveV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/channel_settings/options/setVkVideoLive`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteUpdateOptionsVkVideoLiveRequestToJSON(requestParameters['SiteUpdateOptionsVkVideoLiveRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Optional settings for vk video live. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters: ChannelOptionsUpdateOptionsVkVideoLiveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.channelOptionsUpdateOptionsVkVideoLiveV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Optional settings for youtube. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsYoutubeV1Raw(requestParameters: ChannelOptionsUpdateOptionsYoutubeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['SiteUpdateOptionsYoutubeRequest'] == null) {
            throw new runtime.RequiredError(
                'SiteUpdateOptionsYoutubeRequest',
                'Required parameter "SiteUpdateOptionsYoutubeRequest" was null or undefined when calling channelOptionsUpdateOptionsYoutubeV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/channel_settings/options/setYoutube`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteUpdateOptionsYoutubeRequestToJSON(requestParameters['SiteUpdateOptionsYoutubeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Optional settings for youtube. Depends on the tariff.
     */
    async channelOptionsUpdateOptionsYoutubeV1(requestParameters: ChannelOptionsUpdateOptionsYoutubeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.channelOptionsUpdateOptionsYoutubeV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set planned id. Depends on the tariff.
     */
    async channelOptionsUpdatePlannedV1Raw(requestParameters: ChannelOptionsUpdatePlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SitePlannedResponse>> {
        if (requestParameters['SiteSetPlannedRequest'] == null) {
            throw new runtime.RequiredError(
                'SiteSetPlannedRequest',
                'Required parameter "SiteSetPlannedRequest" was null or undefined when calling channelOptionsUpdatePlannedV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/channel_settings/options/setPlanned`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteSetPlannedRequestToJSON(requestParameters['SiteSetPlannedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SitePlannedResponseFromJSON(jsonValue));
    }

    /**
     * Set planned id. Depends on the tariff.
     */
    async channelOptionsUpdatePlannedV1(requestParameters: ChannelOptionsUpdatePlannedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SitePlannedResponse> {
        const response = await this.channelOptionsUpdatePlannedV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get status platform
     */
    async channelSettingGetStatusV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteChannelStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_settings/getStatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteChannelStatusResponseFromJSON(jsonValue));
    }

    /**
     * Get status platform
     */
    async channelSettingGetStatusV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteChannelStatusResponse> {
        const response = await this.channelSettingGetStatusV1Raw(initOverrides);
        return await response.value();
    }

    /**
     * Set name from custom channel. Global settings.
     */
    async channelSettingSetNameV1Raw(requestParameters: ChannelSettingSetNameV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['SiteSetNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SiteSetNameRequest',
                'Required parameter "SiteSetNameRequest" was null or undefined when calling channelSettingSetNameV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/channel_settings/setName`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteSetNameRequestToJSON(requestParameters['SiteSetNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Set name from custom channel. Global settings.
     */
    async channelSettingSetNameV1(requestParameters: ChannelSettingSetNameV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.channelSettingSetNameV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set rtmp url from channel. Global settings.
     */
    async channelSettingUpdateRtmpV1Raw(requestParameters: ChannelSettingUpdateRtmpV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['SiteSetUrlRequest'] == null) {
            throw new runtime.RequiredError(
                'SiteSetUrlRequest',
                'Required parameter "SiteSetUrlRequest" was null or undefined when calling channelSettingUpdateRtmpV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/channel_settings/setRtmp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteSetUrlRequestToJSON(requestParameters['SiteSetUrlRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Set rtmp url from channel. Global settings.
     */
    async channelSettingUpdateRtmpV1(requestParameters: ChannelSettingUpdateRtmpV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.channelSettingUpdateRtmpV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get status platform
     */
    async channelSettingUpdateTokenV1Raw(requestParameters: ChannelSettingUpdateTokenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling channelSettingUpdateTokenV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling channelSettingUpdateTokenV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling channelSettingUpdateTokenV1().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling channelSettingUpdateTokenV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        if (requestParameters['role'] != null) {
            queryParameters['role'] = requestParameters['role'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_settings/update-token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get status platform
     */
    async channelSettingUpdateTokenV1(requestParameters: ChannelSettingUpdateTokenV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.channelSettingUpdateTokenV1Raw(requestParameters, initOverrides);
    }

    /**
     * Set transcoder from channel. Personal settings.
     */
    async channelSettingUpdateTranscoderV1Raw(requestParameters: ChannelSettingUpdateTranscoderV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['SiteSetTranscoderRequest'] == null) {
            throw new runtime.RequiredError(
                'SiteSetTranscoderRequest',
                'Required parameter "SiteSetTranscoderRequest" was null or undefined when calling channelSettingUpdateTranscoderV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/channel_settings/setTranscoder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteSetTranscoderRequestToJSON(requestParameters['SiteSetTranscoderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Set transcoder from channel. Personal settings.
     */
    async channelSettingUpdateTranscoderV1(requestParameters: ChannelSettingUpdateTranscoderV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.channelSettingUpdateTranscoderV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get telegram post by filter
     */
    async telegramGetPostByFilterV1Raw(requestParameters: TelegramGetPostByFilterV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelegramChatPostsItem>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling telegramGetPostByFilterV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling telegramGetPostByFilterV1().'
            );
        }

        if (requestParameters['channel_id'] == null) {
            throw new runtime.RequiredError(
                'channel_id',
                'Required parameter "channel_id" was null or undefined when calling telegramGetPostByFilterV1().'
            );
        }

        if (requestParameters['filter_mode'] == null) {
            throw new runtime.RequiredError(
                'filter_mode',
                'Required parameter "filter_mode" was null or undefined when calling telegramGetPostByFilterV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['channel_id'] != null) {
            queryParameters['channel_id'] = requestParameters['channel_id'];
        }

        if (requestParameters['filter_mode'] != null) {
            queryParameters['filter_mode'] = requestParameters['filter_mode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/channel_settings/chat/telegram/posts/get-by-filter`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TelegramChatPostsItemFromJSON(jsonValue));
    }

    /**
     * Get telegram post by filter
     */
    async telegramGetPostByFilterV1(requestParameters: TelegramGetPostByFilterV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelegramChatPostsItem> {
        const response = await this.telegramGetPostByFilterV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ChannelChatGetTelegramSettingV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ChannelChatGetTelegramSettingV1LanguageEnum = typeof ChannelChatGetTelegramSettingV1LanguageEnum[keyof typeof ChannelChatGetTelegramSettingV1LanguageEnum];
/**
 * @export
 */
export const ChannelChatGetTelegramSettingV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelChatGetTelegramSettingV1VEnum = typeof ChannelChatGetTelegramSettingV1VEnum[keyof typeof ChannelChatGetTelegramSettingV1VEnum];
/**
 * @export
 */
export const ChannelChatInitTelegramChatConnectV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ChannelChatInitTelegramChatConnectV1LanguageEnum = typeof ChannelChatInitTelegramChatConnectV1LanguageEnum[keyof typeof ChannelChatInitTelegramChatConnectV1LanguageEnum];
/**
 * @export
 */
export const ChannelChatInitTelegramChatConnectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelChatInitTelegramChatConnectV1VEnum = typeof ChannelChatInitTelegramChatConnectV1VEnum[keyof typeof ChannelChatInitTelegramChatConnectV1VEnum];
/**
 * @export
 */
export const ChannelChatRemoveTelegramChatV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ChannelChatRemoveTelegramChatV1LanguageEnum = typeof ChannelChatRemoveTelegramChatV1LanguageEnum[keyof typeof ChannelChatRemoveTelegramChatV1LanguageEnum];
/**
 * @export
 */
export const ChannelChatRemoveTelegramChatV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelChatRemoveTelegramChatV1VEnum = typeof ChannelChatRemoveTelegramChatV1VEnum[keyof typeof ChannelChatRemoveTelegramChatV1VEnum];
/**
 * @export
 */
export const ChannelChatSetTelegramSettingV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ChannelChatSetTelegramSettingV1LanguageEnum = typeof ChannelChatSetTelegramSettingV1LanguageEnum[keyof typeof ChannelChatSetTelegramSettingV1LanguageEnum];
/**
 * @export
 */
export const ChannelChatSetTelegramSettingV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelChatSetTelegramSettingV1VEnum = typeof ChannelChatSetTelegramSettingV1VEnum[keyof typeof ChannelChatSetTelegramSettingV1VEnum];
/**
 * @export
 */
export const ChannelChatTelegramPostsV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ChannelChatTelegramPostsV1LanguageEnum = typeof ChannelChatTelegramPostsV1LanguageEnum[keyof typeof ChannelChatTelegramPostsV1LanguageEnum];
/**
 * @export
 */
export const ChannelChatTelegramPostsV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelChatTelegramPostsV1VEnum = typeof ChannelChatTelegramPostsV1VEnum[keyof typeof ChannelChatTelegramPostsV1VEnum];
/**
 * @export
 */
export const ChannelOptionsGetPlannedV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ChannelOptionsGetPlannedV1LanguageEnum = typeof ChannelOptionsGetPlannedV1LanguageEnum[keyof typeof ChannelOptionsGetPlannedV1LanguageEnum];
/**
 * @export
 */
export const ChannelOptionsGetPlannedV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelOptionsGetPlannedV1VEnum = typeof ChannelOptionsGetPlannedV1VEnum[keyof typeof ChannelOptionsGetPlannedV1VEnum];
/**
 * @export
 */
export const ChannelOptionsGetPlayListV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ChannelOptionsGetPlayListV1LanguageEnum = typeof ChannelOptionsGetPlayListV1LanguageEnum[keyof typeof ChannelOptionsGetPlayListV1LanguageEnum];
/**
 * @export
 */
export const ChannelOptionsGetPlayListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelOptionsGetPlayListV1VEnum = typeof ChannelOptionsGetPlayListV1VEnum[keyof typeof ChannelOptionsGetPlayListV1VEnum];
/**
 * @export
 */
export const ChannelSettingUpdateTokenV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type ChannelSettingUpdateTokenV1LanguageEnum = typeof ChannelSettingUpdateTokenV1LanguageEnum[keyof typeof ChannelSettingUpdateTokenV1LanguageEnum];
/**
 * @export
 */
export const ChannelSettingUpdateTokenV1RoleEnum = {
    account: 'account',
    group: 'group'
} as const;
export type ChannelSettingUpdateTokenV1RoleEnum = typeof ChannelSettingUpdateTokenV1RoleEnum[keyof typeof ChannelSettingUpdateTokenV1RoleEnum];
/**
 * @export
 */
export const ChannelSettingUpdateTokenV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelSettingUpdateTokenV1VEnum = typeof ChannelSettingUpdateTokenV1VEnum[keyof typeof ChannelSettingUpdateTokenV1VEnum];
/**
 * @export
 */
export const TelegramGetPostByFilterV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type TelegramGetPostByFilterV1LanguageEnum = typeof TelegramGetPostByFilterV1LanguageEnum[keyof typeof TelegramGetPostByFilterV1LanguageEnum];
/**
 * @export
 */
export const TelegramGetPostByFilterV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type TelegramGetPostByFilterV1VEnum = typeof TelegramGetPostByFilterV1VEnum[keyof typeof TelegramGetPostByFilterV1VEnum];
