/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PaginatedResponseOfTransactionResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PaginatedResponseOfTransactionResponseFromJSON,
    PaginatedResponseOfTransactionResponseToJSON,
} from '../models/index';

export interface TransactionsListV1Request {
    language: TransactionsListV1LanguageEnum;
    project_id: number;
    v?: TransactionsListV1VEnum;
    limit?: number;
    offset?: number;
    date_from?: Date;
    date_to?: Date;
    code?: string;
}

/**
 * TransactionsApi - interface
 * 
 * @export
 * @interface TransactionsApiInterface
 */
export interface TransactionsApiInterface {
    /**
     * 
     * @summary Transaction list for frontend
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {Date} [date_from] Date from
     * @param {Date} [date_to] Date to
     * @param {string} [code] Filter code transaction. example 1 or 1,2,3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    transactionsListV1Raw(requestParameters: TransactionsListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfTransactionResponse>>;

    /**
     * Transaction list for frontend
     */
    transactionsListV1(requestParameters: TransactionsListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseOfTransactionResponse>;

}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI implements TransactionsApiInterface {

    /**
     * Transaction list for frontend
     */
    async transactionsListV1Raw(requestParameters: TransactionsListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfTransactionResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling transactionsListV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling transactionsListV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['date_from'] != null) {
            queryParameters['date_from'] = (requestParameters['date_from'] as any).toISOString();
        }

        if (requestParameters['date_to'] != null) {
            queryParameters['date_to'] = (requestParameters['date_to'] as any).toISOString();
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/transactions/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseOfTransactionResponseFromJSON(jsonValue));
    }

    /**
     * Transaction list for frontend
     */
    async transactionsListV1(requestParameters: TransactionsListV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseOfTransactionResponse> {
        const response = await this.transactionsListV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const TransactionsListV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type TransactionsListV1LanguageEnum = typeof TransactionsListV1LanguageEnum[keyof typeof TransactionsListV1LanguageEnum];
/**
 * @export
 */
export const TransactionsListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type TransactionsListV1VEnum = typeof TransactionsListV1VEnum[keyof typeof TransactionsListV1VEnum];
