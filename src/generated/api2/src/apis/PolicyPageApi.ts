/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GetPolicyStructureDto,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetPolicyStructureDtoFromJSON,
    GetPolicyStructureDtoToJSON,
} from '../models/index';

export interface PolicyPageGetItemV1Request {
    language: PolicyPageGetItemV1LanguageEnum;
    file_name: PolicyPageGetItemV1FileNameEnum;
    v?: PolicyPageGetItemV1VEnum;
}

export interface PolicyPageGetStructureV1Request {
    language: PolicyPageGetStructureV1LanguageEnum;
    v?: PolicyPageGetStructureV1VEnum;
}

/**
 * PolicyPageApi - interface
 * 
 * @export
 * @interface PolicyPageApiInterface
 */
export interface PolicyPageApiInterface {
    /**
     * 
     * @summary Get policy page
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'refund' | 'terms-of-use' | 'using-cookie' | 'acceptable-use' | 'privacy-notice'} file_name Policy file name
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyPageApiInterface
     */
    policyPageGetItemV1Raw(requestParameters: PolicyPageGetItemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get policy page
     */
    policyPageGetItemV1(requestParameters: PolicyPageGetItemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get policy structure
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyPageApiInterface
     */
    policyPageGetStructureV1Raw(requestParameters: PolicyPageGetStructureV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPolicyStructureDto>>;

    /**
     * Get policy structure
     */
    policyPageGetStructureV1(requestParameters: PolicyPageGetStructureV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPolicyStructureDto>;

}

/**
 * 
 */
export class PolicyPageApi extends runtime.BaseAPI implements PolicyPageApiInterface {

    /**
     * Get policy page
     */
    async policyPageGetItemV1Raw(requestParameters: PolicyPageGetItemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling policyPageGetItemV1().'
            );
        }

        if (requestParameters['file_name'] == null) {
            throw new runtime.RequiredError(
                'file_name',
                'Required parameter "file_name" was null or undefined when calling policyPageGetItemV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['file_name'] != null) {
            queryParameters['file_name'] = requestParameters['file_name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/policy/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get policy page
     */
    async policyPageGetItemV1(requestParameters: PolicyPageGetItemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.policyPageGetItemV1Raw(requestParameters, initOverrides);
    }

    /**
     * Get policy structure
     */
    async policyPageGetStructureV1Raw(requestParameters: PolicyPageGetStructureV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPolicyStructureDto>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling policyPageGetStructureV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/policy/structure`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPolicyStructureDtoFromJSON(jsonValue));
    }

    /**
     * Get policy structure
     */
    async policyPageGetStructureV1(requestParameters: PolicyPageGetStructureV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPolicyStructureDto> {
        const response = await this.policyPageGetStructureV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PolicyPageGetItemV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PolicyPageGetItemV1LanguageEnum = typeof PolicyPageGetItemV1LanguageEnum[keyof typeof PolicyPageGetItemV1LanguageEnum];
/**
 * @export
 */
export const PolicyPageGetItemV1FileNameEnum = {
    refund: 'refund',
    terms_of_use: 'terms-of-use',
    using_cookie: 'using-cookie',
    acceptable_use: 'acceptable-use',
    privacy_notice: 'privacy-notice'
} as const;
export type PolicyPageGetItemV1FileNameEnum = typeof PolicyPageGetItemV1FileNameEnum[keyof typeof PolicyPageGetItemV1FileNameEnum];
/**
 * @export
 */
export const PolicyPageGetItemV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PolicyPageGetItemV1VEnum = typeof PolicyPageGetItemV1VEnum[keyof typeof PolicyPageGetItemV1VEnum];
/**
 * @export
 */
export const PolicyPageGetStructureV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PolicyPageGetStructureV1LanguageEnum = typeof PolicyPageGetStructureV1LanguageEnum[keyof typeof PolicyPageGetStructureV1LanguageEnum];
/**
 * @export
 */
export const PolicyPageGetStructureV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PolicyPageGetStructureV1VEnum = typeof PolicyPageGetStructureV1VEnum[keyof typeof PolicyPageGetStructureV1VEnum];
