/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface AnalyticsTsStreamBitrateV1Request {
    language: AnalyticsTsStreamBitrateV1LanguageEnum;
    project_id: number;
    stream_id: number;
    v?: AnalyticsTsStreamBitrateV1VEnum;
}

export interface AnalyticsTsStreamEventsV1Request {
    language: AnalyticsTsStreamEventsV1LanguageEnum;
    project_id: number;
    stream_id: number;
    v?: AnalyticsTsStreamEventsV1VEnum;
}

export interface AnalyticsTsStreamViewersV1Request {
    language: AnalyticsTsStreamViewersV1LanguageEnum;
    project_id: number;
    stream_id: number;
    v?: AnalyticsTsStreamViewersV1VEnum;
}

/**
 * AnalyticsApi - interface
 * 
 * @export
 * @interface AnalyticsApiInterface
 */
export interface AnalyticsApiInterface {
    /**
     * 
     * @summary Bitrate for stream
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} stream_id stream id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsTsStreamBitrateV1Raw(requestParameters: AnalyticsTsStreamBitrateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Bitrate for stream
     */
    analyticsTsStreamBitrateV1(requestParameters: AnalyticsTsStreamBitrateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @summary Events for stream
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} stream_id stream id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsTsStreamEventsV1Raw(requestParameters: AnalyticsTsStreamEventsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Events for stream
     */
    analyticsTsStreamEventsV1(requestParameters: AnalyticsTsStreamEventsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @summary Viewers for stream
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} project_id Project id
     * @param {number} stream_id stream id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsTsStreamViewersV1Raw(requestParameters: AnalyticsTsStreamViewersV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Viewers for stream
     */
    analyticsTsStreamViewersV1(requestParameters: AnalyticsTsStreamViewersV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

}

/**
 * 
 */
export class AnalyticsApi extends runtime.BaseAPI implements AnalyticsApiInterface {

    /**
     * Bitrate for stream
     */
    async analyticsTsStreamBitrateV1Raw(requestParameters: AnalyticsTsStreamBitrateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling analyticsTsStreamBitrateV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling analyticsTsStreamBitrateV1().'
            );
        }

        if (requestParameters['stream_id'] == null) {
            throw new runtime.RequiredError(
                'stream_id',
                'Required parameter "stream_id" was null or undefined when calling analyticsTsStreamBitrateV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['stream_id'] != null) {
            queryParameters['stream_id'] = requestParameters['stream_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/analytics/stream/graph/bitrate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Bitrate for stream
     */
    async analyticsTsStreamBitrateV1(requestParameters: AnalyticsTsStreamBitrateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.analyticsTsStreamBitrateV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Events for stream
     */
    async analyticsTsStreamEventsV1Raw(requestParameters: AnalyticsTsStreamEventsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling analyticsTsStreamEventsV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling analyticsTsStreamEventsV1().'
            );
        }

        if (requestParameters['stream_id'] == null) {
            throw new runtime.RequiredError(
                'stream_id',
                'Required parameter "stream_id" was null or undefined when calling analyticsTsStreamEventsV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['stream_id'] != null) {
            queryParameters['stream_id'] = requestParameters['stream_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/analytics/stream/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Events for stream
     */
    async analyticsTsStreamEventsV1(requestParameters: AnalyticsTsStreamEventsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.analyticsTsStreamEventsV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Viewers for stream
     */
    async analyticsTsStreamViewersV1Raw(requestParameters: AnalyticsTsStreamViewersV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling analyticsTsStreamViewersV1().'
            );
        }

        if (requestParameters['project_id'] == null) {
            throw new runtime.RequiredError(
                'project_id',
                'Required parameter "project_id" was null or undefined when calling analyticsTsStreamViewersV1().'
            );
        }

        if (requestParameters['stream_id'] == null) {
            throw new runtime.RequiredError(
                'stream_id',
                'Required parameter "stream_id" was null or undefined when calling analyticsTsStreamViewersV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['project_id'] != null) {
            queryParameters['project_id'] = requestParameters['project_id'];
        }

        if (requestParameters['stream_id'] != null) {
            queryParameters['stream_id'] = requestParameters['stream_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/analytics/stream/graph/viewers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Viewers for stream
     */
    async analyticsTsStreamViewersV1(requestParameters: AnalyticsTsStreamViewersV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.analyticsTsStreamViewersV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AnalyticsTsStreamBitrateV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type AnalyticsTsStreamBitrateV1LanguageEnum = typeof AnalyticsTsStreamBitrateV1LanguageEnum[keyof typeof AnalyticsTsStreamBitrateV1LanguageEnum];
/**
 * @export
 */
export const AnalyticsTsStreamBitrateV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AnalyticsTsStreamBitrateV1VEnum = typeof AnalyticsTsStreamBitrateV1VEnum[keyof typeof AnalyticsTsStreamBitrateV1VEnum];
/**
 * @export
 */
export const AnalyticsTsStreamEventsV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type AnalyticsTsStreamEventsV1LanguageEnum = typeof AnalyticsTsStreamEventsV1LanguageEnum[keyof typeof AnalyticsTsStreamEventsV1LanguageEnum];
/**
 * @export
 */
export const AnalyticsTsStreamEventsV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AnalyticsTsStreamEventsV1VEnum = typeof AnalyticsTsStreamEventsV1VEnum[keyof typeof AnalyticsTsStreamEventsV1VEnum];
/**
 * @export
 */
export const AnalyticsTsStreamViewersV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type AnalyticsTsStreamViewersV1LanguageEnum = typeof AnalyticsTsStreamViewersV1LanguageEnum[keyof typeof AnalyticsTsStreamViewersV1LanguageEnum];
/**
 * @export
 */
export const AnalyticsTsStreamViewersV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AnalyticsTsStreamViewersV1VEnum = typeof AnalyticsTsStreamViewersV1VEnum[keyof typeof AnalyticsTsStreamViewersV1VEnum];
