/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CodeAppAuthResponse,
  ErrorResponse,
  RefreshAuthResponse,
  SiteAuthExchangeRequest,
  SuccessResponse,
} from '../models/index';
import {
    CodeAppAuthResponseFromJSON,
    CodeAppAuthResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    RefreshAuthResponseFromJSON,
    RefreshAuthResponseToJSON,
    SiteAuthExchangeRequestFromJSON,
    SiteAuthExchangeRequestToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface AuthCallbackGoogleV1Request {
    state: string;
}

export interface AuthCallbackVkIdV1Request {
    state: string;
}

export interface AuthCodeV1Request {
    language: AuthCodeV1LanguageEnum;
    app: AuthCodeV1AppEnum;
    v?: AuthCodeV1VEnum;
}

export interface AuthConnectResultV1Request {
    language: AuthConnectResultV1LanguageEnum;
    message: string;
    v?: AuthConnectResultV1VEnum;
}

export interface AuthConnectTelegramV1Request {
    language: AuthConnectTelegramV1LanguageEnum;
    v?: AuthConnectTelegramV1VEnum;
}

export interface AuthConnectV1Request {
    language: AuthConnectV1LanguageEnum;
    provider: AuthConnectV1ProviderEnum;
    v?: AuthConnectV1VEnum;
    app?: AuthConnectV1AppEnum;
    redirect?: string;
}

export interface AuthDisconnectV1Request {
    language: AuthDisconnectV1LanguageEnum;
    social_id: number;
    v?: AuthDisconnectV1VEnum;
}

export interface AuthExchangeV1Request {
    SiteAuthExchangeRequest: SiteAuthExchangeRequest;
}

export interface AuthGetAuthUrlV1Request {
    language: AuthGetAuthUrlV1LanguageEnum;
    provider: AuthGetAuthUrlV1ProviderEnum;
    v?: AuthGetAuthUrlV1VEnum;
    app?: AuthGetAuthUrlV1AppEnum;
    redirect?: string;
    refId?: string;
    country?: string;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * 
     * @summary Internal request of auth google
     * @param {string} state 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCallbackGoogleV1Raw(requestParameters: AuthCallbackGoogleV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Internal request of auth google
     */
    authCallbackGoogleV1(requestParameters: AuthCallbackGoogleV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Internal request of auth new vk
     * @param {string} state 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCallbackVkIdV1Raw(requestParameters: AuthCallbackVkIdV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Internal request of auth new vk
     */
    authCallbackVkIdV1(requestParameters: AuthCallbackVkIdV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Internal request of auth old vk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCallbackVkV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Internal request of auth old vk
     */
    authCallbackVkV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get code for auth
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'site' | 'admin' | 'mobile' | 'desktop'} app Create auth code for app
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCodeV1Raw(requestParameters: AuthCodeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CodeAppAuthResponse>>;

    /**
     * Get code for auth
     */
    authCodeV1(requestParameters: AuthCodeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CodeAppAuthResponse>;

    /**
     * 
     * @summary CallBack for connect social
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {string} message Result message for connect
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authConnectResultV1Raw(requestParameters: AuthConnectResultV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * CallBack for connect social
     */
    authConnectResultV1(requestParameters: AuthConnectResultV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Connect telegram in account
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authConnectTelegramV1Raw(requestParameters: AuthConnectTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Connect telegram in account
     */
    authConnectTelegramV1(requestParameters: AuthConnectTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Connected social account
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'google' | 'vk' | 'vk-id' | 'telegram'} provider Provider oauth
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {'site' | 'admin' | 'mobile' | 'desktop'} [app] App oauth
     * @param {string} [redirect] Redirect url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authConnectV1Raw(requestParameters: AuthConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Connected social account
     */
    authConnectV1(requestParameters: AuthConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Disconnected social account
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} social_id Social id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authDisconnectV1Raw(requestParameters: AuthDisconnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     * Disconnected social account
     */
    authDisconnectV1(requestParameters: AuthDisconnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Code exchange
     * @param {SiteAuthExchangeRequest} SiteAuthExchangeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authExchangeV1Raw(requestParameters: AuthExchangeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshAuthResponse>>;

    /**
     * Code exchange
     */
    authExchangeV1(requestParameters: AuthExchangeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshAuthResponse>;

    /**
     * 
     * @summary Get url for start oauth
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {'google' | 'vk' | 'vk-id' | 'telegram'} provider Provider oauth
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {'site' | 'admin' | 'mobile' | 'desktop'} [app] App oauth
     * @param {string} [redirect] Redirect url
     * @param {string} [refId] Referal id
     * @param {string} [country] Country code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authGetAuthUrlV1Raw(requestParameters: AuthGetAuthUrlV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get url for start oauth
     */
    authGetAuthUrlV1(requestParameters: AuthGetAuthUrlV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * Internal request of auth google
     */
    async authCallbackGoogleV1Raw(requestParameters: AuthCallbackGoogleV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling authCallbackGoogleV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/auth/callback/google`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Internal request of auth google
     */
    async authCallbackGoogleV1(requestParameters: AuthCallbackGoogleV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authCallbackGoogleV1Raw(requestParameters, initOverrides);
    }

    /**
     * Internal request of auth new vk
     */
    async authCallbackVkIdV1Raw(requestParameters: AuthCallbackVkIdV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling authCallbackVkIdV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/auth/callback/vk-id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Internal request of auth new vk
     */
    async authCallbackVkIdV1(requestParameters: AuthCallbackVkIdV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authCallbackVkIdV1Raw(requestParameters, initOverrides);
    }

    /**
     * Internal request of auth old vk
     */
    async authCallbackVkV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/auth/callback/vk`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Internal request of auth old vk
     */
    async authCallbackVkV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authCallbackVkV1Raw(initOverrides);
    }

    /**
     * Get code for auth
     */
    async authCodeV1Raw(requestParameters: AuthCodeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CodeAppAuthResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling authCodeV1().'
            );
        }

        if (requestParameters['app'] == null) {
            throw new runtime.RequiredError(
                'app',
                'Required parameter "app" was null or undefined when calling authCodeV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['app'] != null) {
            queryParameters['app'] = requestParameters['app'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/auth/app/code`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CodeAppAuthResponseFromJSON(jsonValue));
    }

    /**
     * Get code for auth
     */
    async authCodeV1(requestParameters: AuthCodeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CodeAppAuthResponse> {
        const response = await this.authCodeV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CallBack for connect social
     */
    async authConnectResultV1Raw(requestParameters: AuthConnectResultV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling authConnectResultV1().'
            );
        }

        if (requestParameters['message'] == null) {
            throw new runtime.RequiredError(
                'message',
                'Required parameter "message" was null or undefined when calling authConnectResultV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['message'] != null) {
            queryParameters['message'] = requestParameters['message'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/auth/connect/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * CallBack for connect social
     */
    async authConnectResultV1(requestParameters: AuthConnectResultV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authConnectResultV1Raw(requestParameters, initOverrides);
    }

    /**
     * Connect telegram in account
     */
    async authConnectTelegramV1Raw(requestParameters: AuthConnectTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling authConnectTelegramV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/auth/connect-telegram`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Connect telegram in account
     */
    async authConnectTelegramV1(requestParameters: AuthConnectTelegramV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.authConnectTelegramV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Connected social account
     */
    async authConnectV1Raw(requestParameters: AuthConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling authConnectV1().'
            );
        }

        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling authConnectV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['provider'] != null) {
            queryParameters['provider'] = requestParameters['provider'];
        }

        if (requestParameters['app'] != null) {
            queryParameters['app'] = requestParameters['app'];
        }

        if (requestParameters['redirect'] != null) {
            queryParameters['redirect'] = requestParameters['redirect'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/auth/connect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Connected social account
     */
    async authConnectV1(requestParameters: AuthConnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authConnectV1Raw(requestParameters, initOverrides);
    }

    /**
     * Disconnected social account
     */
    async authDisconnectV1Raw(requestParameters: AuthDisconnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling authDisconnectV1().'
            );
        }

        if (requestParameters['social_id'] == null) {
            throw new runtime.RequiredError(
                'social_id',
                'Required parameter "social_id" was null or undefined when calling authDisconnectV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['social_id'] != null) {
            queryParameters['social_id'] = requestParameters['social_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/auth/disconnect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Disconnected social account
     */
    async authDisconnectV1(requestParameters: AuthDisconnectV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.authDisconnectV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Code exchange
     */
    async authExchangeV1Raw(requestParameters: AuthExchangeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshAuthResponse>> {
        if (requestParameters['SiteAuthExchangeRequest'] == null) {
            throw new runtime.RequiredError(
                'SiteAuthExchangeRequest',
                'Required parameter "SiteAuthExchangeRequest" was null or undefined when calling authExchangeV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/method/auth/app/exchange`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteAuthExchangeRequestToJSON(requestParameters['SiteAuthExchangeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshAuthResponseFromJSON(jsonValue));
    }

    /**
     * Code exchange
     */
    async authExchangeV1(requestParameters: AuthExchangeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshAuthResponse> {
        const response = await this.authExchangeV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get url for start oauth
     */
    async authGetAuthUrlV1Raw(requestParameters: AuthGetAuthUrlV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling authGetAuthUrlV1().'
            );
        }

        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling authGetAuthUrlV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['provider'] != null) {
            queryParameters['provider'] = requestParameters['provider'];
        }

        if (requestParameters['app'] != null) {
            queryParameters['app'] = requestParameters['app'];
        }

        if (requestParameters['redirect'] != null) {
            queryParameters['redirect'] = requestParameters['redirect'];
        }

        if (requestParameters['refId'] != null) {
            queryParameters['refId'] = requestParameters['refId'];
        }

        if (requestParameters['country'] != null) {
            queryParameters['country'] = requestParameters['country'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/auth/redirect-url`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get url for start oauth
     */
    async authGetAuthUrlV1(requestParameters: AuthGetAuthUrlV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authGetAuthUrlV1Raw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const AuthCodeV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type AuthCodeV1LanguageEnum = typeof AuthCodeV1LanguageEnum[keyof typeof AuthCodeV1LanguageEnum];
/**
 * @export
 */
export const AuthCodeV1AppEnum = {
    site: 'site',
    admin: 'admin',
    mobile: 'mobile',
    desktop: 'desktop'
} as const;
export type AuthCodeV1AppEnum = typeof AuthCodeV1AppEnum[keyof typeof AuthCodeV1AppEnum];
/**
 * @export
 */
export const AuthCodeV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AuthCodeV1VEnum = typeof AuthCodeV1VEnum[keyof typeof AuthCodeV1VEnum];
/**
 * @export
 */
export const AuthConnectResultV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type AuthConnectResultV1LanguageEnum = typeof AuthConnectResultV1LanguageEnum[keyof typeof AuthConnectResultV1LanguageEnum];
/**
 * @export
 */
export const AuthConnectResultV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AuthConnectResultV1VEnum = typeof AuthConnectResultV1VEnum[keyof typeof AuthConnectResultV1VEnum];
/**
 * @export
 */
export const AuthConnectTelegramV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type AuthConnectTelegramV1LanguageEnum = typeof AuthConnectTelegramV1LanguageEnum[keyof typeof AuthConnectTelegramV1LanguageEnum];
/**
 * @export
 */
export const AuthConnectTelegramV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AuthConnectTelegramV1VEnum = typeof AuthConnectTelegramV1VEnum[keyof typeof AuthConnectTelegramV1VEnum];
/**
 * @export
 */
export const AuthConnectV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type AuthConnectV1LanguageEnum = typeof AuthConnectV1LanguageEnum[keyof typeof AuthConnectV1LanguageEnum];
/**
 * @export
 */
export const AuthConnectV1ProviderEnum = {
    google: 'google',
    vk: 'vk',
    vk_id: 'vk-id',
    telegram: 'telegram'
} as const;
export type AuthConnectV1ProviderEnum = typeof AuthConnectV1ProviderEnum[keyof typeof AuthConnectV1ProviderEnum];
/**
 * @export
 */
export const AuthConnectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AuthConnectV1VEnum = typeof AuthConnectV1VEnum[keyof typeof AuthConnectV1VEnum];
/**
 * @export
 */
export const AuthConnectV1AppEnum = {
    site: 'site',
    admin: 'admin',
    mobile: 'mobile',
    desktop: 'desktop'
} as const;
export type AuthConnectV1AppEnum = typeof AuthConnectV1AppEnum[keyof typeof AuthConnectV1AppEnum];
/**
 * @export
 */
export const AuthDisconnectV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type AuthDisconnectV1LanguageEnum = typeof AuthDisconnectV1LanguageEnum[keyof typeof AuthDisconnectV1LanguageEnum];
/**
 * @export
 */
export const AuthDisconnectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AuthDisconnectV1VEnum = typeof AuthDisconnectV1VEnum[keyof typeof AuthDisconnectV1VEnum];
/**
 * @export
 */
export const AuthGetAuthUrlV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type AuthGetAuthUrlV1LanguageEnum = typeof AuthGetAuthUrlV1LanguageEnum[keyof typeof AuthGetAuthUrlV1LanguageEnum];
/**
 * @export
 */
export const AuthGetAuthUrlV1ProviderEnum = {
    google: 'google',
    vk: 'vk',
    vk_id: 'vk-id',
    telegram: 'telegram'
} as const;
export type AuthGetAuthUrlV1ProviderEnum = typeof AuthGetAuthUrlV1ProviderEnum[keyof typeof AuthGetAuthUrlV1ProviderEnum];
/**
 * @export
 */
export const AuthGetAuthUrlV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AuthGetAuthUrlV1VEnum = typeof AuthGetAuthUrlV1VEnum[keyof typeof AuthGetAuthUrlV1VEnum];
/**
 * @export
 */
export const AuthGetAuthUrlV1AppEnum = {
    site: 'site',
    admin: 'admin',
    mobile: 'mobile',
    desktop: 'desktop'
} as const;
export type AuthGetAuthUrlV1AppEnum = typeof AuthGetAuthUrlV1AppEnum[keyof typeof AuthGetAuthUrlV1AppEnum];
