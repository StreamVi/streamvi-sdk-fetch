/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListOfPaySystemListResponse,
  SuccessResponse,
} from '../models/index';
import {
    ListOfPaySystemListResponseFromJSON,
    ListOfPaySystemListResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface PaySystemCreateChallengeV1Request {
    language: PaySystemCreateChallengeV1LanguageEnum;
    payment_id: number;
    v?: PaySystemCreateChallengeV1VEnum;
}

export interface PaySystemCreateUnitpayV1Request {
    language: PaySystemCreateUnitpayV1LanguageEnum;
    payment_id: number;
    v?: PaySystemCreateUnitpayV1VEnum;
}

/**
 * PaySystemApi - interface
 * 
 * @export
 * @interface PaySystemApiInterface
 */
export interface PaySystemApiInterface {
    /**
     * 
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} payment_id Payment id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySystemApiInterface
     */
    paySystemCreateChallengeV1Raw(requestParameters: PaySystemCreateChallengeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     */
    paySystemCreateChallengeV1(requestParameters: PaySystemCreateChallengeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @param {'ru' | 'en' | 'cn'} language Current language
     * @param {number} payment_id Payment id
     * @param {'1' | '2' | '3'} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySystemApiInterface
     */
    paySystemCreateUnitpayV1Raw(requestParameters: PaySystemCreateUnitpayV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     */
    paySystemCreateUnitpayV1(requestParameters: PaySystemCreateUnitpayV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;

    /**
     * 
     * @summary Load available pay systems
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySystemApiInterface
     */
    paySystemListV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfPaySystemListResponse>>;

    /**
     * Load available pay systems
     */
    paySystemListV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfPaySystemListResponse>;

}

/**
 * 
 */
export class PaySystemApi extends runtime.BaseAPI implements PaySystemApiInterface {

    /**
     */
    async paySystemCreateChallengeV1Raw(requestParameters: PaySystemCreateChallengeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling paySystemCreateChallengeV1().'
            );
        }

        if (requestParameters['payment_id'] == null) {
            throw new runtime.RequiredError(
                'payment_id',
                'Required parameter "payment_id" was null or undefined when calling paySystemCreateChallengeV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['payment_id'] != null) {
            queryParameters['payment_id'] = requestParameters['payment_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/pay-system/payoneer/create`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     */
    async paySystemCreateChallengeV1(requestParameters: PaySystemCreateChallengeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.paySystemCreateChallengeV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async paySystemCreateUnitpayV1Raw(requestParameters: PaySystemCreateUnitpayV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling paySystemCreateUnitpayV1().'
            );
        }

        if (requestParameters['payment_id'] == null) {
            throw new runtime.RequiredError(
                'payment_id',
                'Required parameter "payment_id" was null or undefined when calling paySystemCreateUnitpayV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '1';
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['payment_id'] != null) {
            queryParameters['payment_id'] = requestParameters['payment_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/pay-system/unitpay/create`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     */
    async paySystemCreateUnitpayV1(requestParameters: PaySystemCreateUnitpayV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.paySystemCreateUnitpayV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load available pay systems
     */
    async paySystemListV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfPaySystemListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/method/pay-system/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfPaySystemListResponseFromJSON(jsonValue));
    }

    /**
     * Load available pay systems
     */
    async paySystemListV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfPaySystemListResponse> {
        const response = await this.paySystemListV1Raw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PaySystemCreateChallengeV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PaySystemCreateChallengeV1LanguageEnum = typeof PaySystemCreateChallengeV1LanguageEnum[keyof typeof PaySystemCreateChallengeV1LanguageEnum];
/**
 * @export
 */
export const PaySystemCreateChallengeV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PaySystemCreateChallengeV1VEnum = typeof PaySystemCreateChallengeV1VEnum[keyof typeof PaySystemCreateChallengeV1VEnum];
/**
 * @export
 */
export const PaySystemCreateUnitpayV1LanguageEnum = {
    ru: 'ru',
    en: 'en',
    cn: 'cn'
} as const;
export type PaySystemCreateUnitpayV1LanguageEnum = typeof PaySystemCreateUnitpayV1LanguageEnum[keyof typeof PaySystemCreateUnitpayV1LanguageEnum];
/**
 * @export
 */
export const PaySystemCreateUnitpayV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PaySystemCreateUnitpayV1VEnum = typeof PaySystemCreateUnitpayV1VEnum[keyof typeof PaySystemCreateUnitpayV1VEnum];
