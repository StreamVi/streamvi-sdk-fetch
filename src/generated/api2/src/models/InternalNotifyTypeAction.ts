/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { InternalNotifyTypeActionText } from './InternalNotifyTypeActionText';
import {
    InternalNotifyTypeActionTextFromJSON,
    InternalNotifyTypeActionTextFromJSONTyped,
    InternalNotifyTypeActionTextToJSON,
    InternalNotifyTypeActionTextToJSONTyped,
} from './InternalNotifyTypeActionText';

/**
 * 
 * @export
 * @interface InternalNotifyTypeAction
 */
export interface InternalNotifyTypeAction {
    /**
     * Action name
     * @type {string}
     * @memberof InternalNotifyTypeAction
     */
    name: InternalNotifyTypeActionNameEnum;
    /**
     * Action value
     * @type {string}
     * @memberof InternalNotifyTypeAction
     */
    value: string;
    /**
     * Type
     * @type {string}
     * @memberof InternalNotifyTypeAction
     */
    type: InternalNotifyTypeActionTypeEnum;
    /**
     * text
     * @type {Array<InternalNotifyTypeActionText>}
     * @memberof InternalNotifyTypeAction
     */
    text: Array<InternalNotifyTypeActionText>;
    /**
     * Icon (special symbol)
     * @type {string}
     * @memberof InternalNotifyTypeAction
     */
    icon: string;
    /**
     * Action group id
     * @type {string}
     * @memberof InternalNotifyTypeAction
     */
    group_id: string;
    /**
     * Group actions
     * @type {string}
     * @memberof InternalNotifyTypeAction
     */
    group_type: InternalNotifyTypeActionGroupTypeEnum;
}


/**
 * @export
 */
export const InternalNotifyTypeActionNameEnum = {
    external_link: 'external_link',
    cabinet_link: 'cabinet_link',
    landing_link: 'landing_link',
    link: 'link',
    accept: 'accept',
    decline: 'decline',
    accept_1: 'accept_1',
    accept_2: 'accept_2',
    accept_3: 'accept_3'
} as const;
export type InternalNotifyTypeActionNameEnum = typeof InternalNotifyTypeActionNameEnum[keyof typeof InternalNotifyTypeActionNameEnum];

/**
 * @export
 */
export const InternalNotifyTypeActionTypeEnum = {
    primary: 'primary',
    secondary: 'secondary',
    link: 'link'
} as const;
export type InternalNotifyTypeActionTypeEnum = typeof InternalNotifyTypeActionTypeEnum[keyof typeof InternalNotifyTypeActionTypeEnum];

/**
 * @export
 */
export const InternalNotifyTypeActionGroupTypeEnum = {
    toggle: 'toggle',
    select: 'select',
    default: 'default'
} as const;
export type InternalNotifyTypeActionGroupTypeEnum = typeof InternalNotifyTypeActionGroupTypeEnum[keyof typeof InternalNotifyTypeActionGroupTypeEnum];


/**
 * Check if a given object implements the InternalNotifyTypeAction interface.
 */
export function instanceOfInternalNotifyTypeAction(value: object): value is InternalNotifyTypeAction {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('text' in value) || value['text'] === undefined) return false;
    if (!('icon' in value) || value['icon'] === undefined) return false;
    if (!('group_id' in value) || value['group_id'] === undefined) return false;
    if (!('group_type' in value) || value['group_type'] === undefined) return false;
    return true;
}

export function InternalNotifyTypeActionFromJSON(json: any): InternalNotifyTypeAction {
    return InternalNotifyTypeActionFromJSONTyped(json, false);
}

export function InternalNotifyTypeActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): InternalNotifyTypeAction {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'value': json['value'],
        'type': json['type'],
        'text': ((json['text'] as Array<any>).map(InternalNotifyTypeActionTextFromJSON)),
        'icon': json['icon'],
        'group_id': json['group_id'],
        'group_type': json['group_type'],
    };
}

export function InternalNotifyTypeActionToJSON(json: any): InternalNotifyTypeAction {
    return InternalNotifyTypeActionToJSONTyped(json, false);
}

export function InternalNotifyTypeActionToJSONTyped(value?: InternalNotifyTypeAction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'value': value['value'],
        'type': value['type'],
        'text': ((value['text'] as Array<any>).map(InternalNotifyTypeActionTextToJSON)),
        'icon': value['icon'],
        'group_id': value['group_id'],
        'group_type': value['group_type'],
    };
}

