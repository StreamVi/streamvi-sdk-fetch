/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ValidationErrorDto
 */
export interface ValidationErrorDto {
    /**
     * Object that was validated.
     * @type {object}
     * @memberof ValidationErrorDto
     */
    target?: object;
    /**
     * Object's property that hasn't passed validation.
     * @type {string}
     * @memberof ValidationErrorDto
     */
    property?: string;
    /**
     * Value that haven't pass a validation.
     * @type {object}
     * @memberof ValidationErrorDto
     */
    value?: object;
    /**
     * Constraints that failed validation with error messages. Array of object {string: string}
     * @type {object}
     * @memberof ValidationErrorDto
     */
    constraints?: object;
    /**
     * Which value caused the error. Childrens its this class
     * @type {Array<ValidationErrorDto>}
     * @memberof ValidationErrorDto
     */
    children?: Array<ValidationErrorDto>;
    /**
     * A transient set of data passed through to the validation result for response mapping
     * @type {object}
     * @memberof ValidationErrorDto
     */
    contexts?: object;
}

/**
 * Check if a given object implements the ValidationErrorDto interface.
 */
export function instanceOfValidationErrorDto(value: object): value is ValidationErrorDto {
    return true;
}

export function ValidationErrorDtoFromJSON(json: any): ValidationErrorDto {
    return ValidationErrorDtoFromJSONTyped(json, false);
}

export function ValidationErrorDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValidationErrorDto {
    if (json == null) {
        return json;
    }
    return {
        
        'target': json['target'] == null ? undefined : json['target'],
        'property': json['property'] == null ? undefined : json['property'],
        'value': json['value'] == null ? undefined : json['value'],
        'constraints': json['constraints'] == null ? undefined : json['constraints'],
        'children': json['children'] == null ? undefined : ((json['children'] as Array<any>).map(ValidationErrorDtoFromJSON)),
        'contexts': json['contexts'] == null ? undefined : json['contexts'],
    };
}

export function ValidationErrorDtoToJSON(json: any): ValidationErrorDto {
    return ValidationErrorDtoToJSONTyped(json, false);
}

export function ValidationErrorDtoToJSONTyped(value?: ValidationErrorDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'target': value['target'],
        'property': value['property'],
        'value': value['value'],
        'constraints': value['constraints'],
        'children': value['children'] == null ? undefined : ((value['children'] as Array<any>).map(ValidationErrorDtoToJSON)),
        'contexts': value['contexts'],
    };
}

