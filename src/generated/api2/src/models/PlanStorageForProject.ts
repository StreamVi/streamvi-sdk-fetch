/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PlanStorageItem } from './PlanStorageItem';
import {
    PlanStorageItemFromJSON,
    PlanStorageItemFromJSONTyped,
    PlanStorageItemToJSON,
    PlanStorageItemToJSONTyped,
} from './PlanStorageItem';

/**
 * 
 * @export
 * @interface PlanStorageForProject
 */
export interface PlanStorageForProject {
    /**
     * Before tariff restream
     * @type {PlanStorageItem}
     * @memberof PlanStorageForProject
     */
    before: PlanStorageItem;
    /**
     * Current tariff restream
     * @type {PlanStorageItem}
     * @memberof PlanStorageForProject
     */
    current: PlanStorageItem;
    /**
     * Next tariff restream
     * @type {PlanStorageItem}
     * @memberof PlanStorageForProject
     */
    next: PlanStorageItem;
}

/**
 * Check if a given object implements the PlanStorageForProject interface.
 */
export function instanceOfPlanStorageForProject(value: object): value is PlanStorageForProject {
    if (!('before' in value) || value['before'] === undefined) return false;
    if (!('current' in value) || value['current'] === undefined) return false;
    if (!('next' in value) || value['next'] === undefined) return false;
    return true;
}

export function PlanStorageForProjectFromJSON(json: any): PlanStorageForProject {
    return PlanStorageForProjectFromJSONTyped(json, false);
}

export function PlanStorageForProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlanStorageForProject {
    if (json == null) {
        return json;
    }
    return {
        
        'before': PlanStorageItemFromJSON(json['before']),
        'current': PlanStorageItemFromJSON(json['current']),
        'next': PlanStorageItemFromJSON(json['next']),
    };
}

export function PlanStorageForProjectToJSON(json: any): PlanStorageForProject {
    return PlanStorageForProjectToJSONTyped(json, false);
}

export function PlanStorageForProjectToJSONTyped(value?: PlanStorageForProject | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'before': PlanStorageItemToJSON(value['before']),
        'current': PlanStorageItemToJSON(value['current']),
        'next': PlanStorageItemToJSON(value['next']),
    };
}

