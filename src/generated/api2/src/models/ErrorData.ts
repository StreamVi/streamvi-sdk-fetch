/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ValidationErrorDto } from './ValidationErrorDto';
import {
    ValidationErrorDtoFromJSON,
    ValidationErrorDtoFromJSONTyped,
    ValidationErrorDtoToJSON,
    ValidationErrorDtoToJSONTyped,
} from './ValidationErrorDto';

/**
 * 
 * @export
 * @interface ErrorData
 */
export interface ErrorData {
    /**
     * Error name
     * @type {string}
     * @memberof ErrorData
     */
    name: string;
    /**
     * Error message
     * @type {string}
     * @memberof ErrorData
     */
    msg: string;
    /**
     * Validator error array if name="I18nValidationException"
     * @type {Array<ValidationErrorDto>}
     * @memberof ErrorData
     */
    validator_error?: Array<ValidationErrorDto>;
    /**
     * Options
     * @type {object}
     * @memberof ErrorData
     */
    options: object;
    /**
     * Custom object for error
     * @type {object}
     * @memberof ErrorData
     */
    data: object;
}

/**
 * Check if a given object implements the ErrorData interface.
 */
export function instanceOfErrorData(value: object): value is ErrorData {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('msg' in value) || value['msg'] === undefined) return false;
    if (!('options' in value) || value['options'] === undefined) return false;
    if (!('data' in value) || value['data'] === undefined) return false;
    return true;
}

export function ErrorDataFromJSON(json: any): ErrorData {
    return ErrorDataFromJSONTyped(json, false);
}

export function ErrorDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorData {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'msg': json['msg'],
        'validator_error': json['validator_error'] == null ? undefined : ((json['validator_error'] as Array<any>).map(ValidationErrorDtoFromJSON)),
        'options': json['options'],
        'data': json['data'],
    };
}

export function ErrorDataToJSON(json: any): ErrorData {
    return ErrorDataToJSONTyped(json, false);
}

export function ErrorDataToJSONTyped(value?: ErrorData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'msg': value['msg'],
        'validator_error': value['validator_error'] == null ? undefined : ((value['validator_error'] as Array<any>).map(ValidationErrorDtoToJSON)),
        'options': value['options'],
        'data': value['data'],
    };
}

