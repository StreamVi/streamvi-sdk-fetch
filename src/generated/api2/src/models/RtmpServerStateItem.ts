/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RtmpServerPlatformQuality } from './RtmpServerPlatformQuality';
import {
    RtmpServerPlatformQualityFromJSON,
    RtmpServerPlatformQualityFromJSONTyped,
    RtmpServerPlatformQualityToJSON,
    RtmpServerPlatformQualityToJSONTyped,
} from './RtmpServerPlatformQuality';
import type { CountryItem } from './CountryItem';
import {
    CountryItemFromJSON,
    CountryItemFromJSONTyped,
    CountryItemToJSON,
    CountryItemToJSONTyped,
} from './CountryItem';
import type { RtmpServerLoading } from './RtmpServerLoading';
import {
    RtmpServerLoadingFromJSON,
    RtmpServerLoadingFromJSONTyped,
    RtmpServerLoadingToJSON,
    RtmpServerLoadingToJSONTyped,
} from './RtmpServerLoading';

/**
 * 
 * @export
 * @interface RtmpServerStateItem
 */
export interface RtmpServerStateItem {
    /**
     * City
     * @type {string}
     * @memberof RtmpServerStateItem
     */
    city: string;
    /**
     * Country
     * @type {CountryItem}
     * @memberof RtmpServerStateItem
     */
    country: CountryItem;
    /**
     * Latitude
     * @type {number}
     * @memberof RtmpServerStateItem
     */
    lat: number;
    /**
     * Longitude
     * @type {number}
     * @memberof RtmpServerStateItem
     */
    _long: number;
    /**
     * Network load of the selected time
     * @type {RtmpServerLoading}
     * @memberof RtmpServerStateItem
     */
    network: RtmpServerLoading;
    /**
     * CPU load of the selected time
     * @type {RtmpServerLoading}
     * @memberof RtmpServerStateItem
     */
    cpu: RtmpServerLoading;
    /**
     * RAM load of the selected time
     * @type {RtmpServerLoading}
     * @memberof RtmpServerStateItem
     */
    ram: RtmpServerLoading;
    /**
     * Quality connection of pool
     * @type {number}
     * @memberof RtmpServerStateItem
     */
    quality: number;
    /**
     * Quality in string format
     * @type {string}
     * @memberof RtmpServerStateItem
     */
    serverStatus: RtmpServerStateItemServerStatusEnum;
    /**
     * Quality array
     * @type {Array<RtmpServerPlatformQuality>}
     * @memberof RtmpServerStateItem
     */
    platforms: Array<RtmpServerPlatformQuality>;
}


/**
 * @export
 */
export const RtmpServerStateItemServerStatusEnum = {
    good: 'good',
    problem: 'problem',
    bad: 'bad'
} as const;
export type RtmpServerStateItemServerStatusEnum = typeof RtmpServerStateItemServerStatusEnum[keyof typeof RtmpServerStateItemServerStatusEnum];


/**
 * Check if a given object implements the RtmpServerStateItem interface.
 */
export function instanceOfRtmpServerStateItem(value: object): value is RtmpServerStateItem {
    if (!('city' in value) || value['city'] === undefined) return false;
    if (!('country' in value) || value['country'] === undefined) return false;
    if (!('lat' in value) || value['lat'] === undefined) return false;
    if (!('_long' in value) || value['_long'] === undefined) return false;
    if (!('network' in value) || value['network'] === undefined) return false;
    if (!('cpu' in value) || value['cpu'] === undefined) return false;
    if (!('ram' in value) || value['ram'] === undefined) return false;
    if (!('quality' in value) || value['quality'] === undefined) return false;
    if (!('serverStatus' in value) || value['serverStatus'] === undefined) return false;
    if (!('platforms' in value) || value['platforms'] === undefined) return false;
    return true;
}

export function RtmpServerStateItemFromJSON(json: any): RtmpServerStateItem {
    return RtmpServerStateItemFromJSONTyped(json, false);
}

export function RtmpServerStateItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): RtmpServerStateItem {
    if (json == null) {
        return json;
    }
    return {
        
        'city': json['city'],
        'country': CountryItemFromJSON(json['country']),
        'lat': json['lat'],
        '_long': json['long'],
        'network': RtmpServerLoadingFromJSON(json['network']),
        'cpu': RtmpServerLoadingFromJSON(json['cpu']),
        'ram': RtmpServerLoadingFromJSON(json['ram']),
        'quality': json['quality'],
        'serverStatus': json['serverStatus'],
        'platforms': ((json['platforms'] as Array<any>).map(RtmpServerPlatformQualityFromJSON)),
    };
}

export function RtmpServerStateItemToJSON(json: any): RtmpServerStateItem {
    return RtmpServerStateItemToJSONTyped(json, false);
}

export function RtmpServerStateItemToJSONTyped(value?: RtmpServerStateItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'city': value['city'],
        'country': CountryItemToJSON(value['country']),
        'lat': value['lat'],
        'long': value['_long'],
        'network': RtmpServerLoadingToJSON(value['network']),
        'cpu': RtmpServerLoadingToJSON(value['cpu']),
        'ram': RtmpServerLoadingToJSON(value['ram']),
        'quality': value['quality'],
        'serverStatus': value['serverStatus'],
        'platforms': ((value['platforms'] as Array<any>).map(RtmpServerPlatformQualityToJSON)),
    };
}

