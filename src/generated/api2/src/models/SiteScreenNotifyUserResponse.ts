/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { InternalNotifyTypeAction } from './InternalNotifyTypeAction';
import {
    InternalNotifyTypeActionFromJSON,
    InternalNotifyTypeActionFromJSONTyped,
    InternalNotifyTypeActionToJSON,
    InternalNotifyTypeActionToJSONTyped,
} from './InternalNotifyTypeAction';

/**
 * 
 * @export
 * @interface SiteScreenNotifyUserResponse
 */
export interface SiteScreenNotifyUserResponse {
    /**
     * Level of notify. Default is info
     * @type {string}
     * @memberof SiteScreenNotifyUserResponse
     */
    type: SiteScreenNotifyUserResponseTypeEnum;
    /**
     * Title of notify
     * @type {string}
     * @memberof SiteScreenNotifyUserResponse
     */
    title?: string;
    /**
     * Text of notify
     * @type {string}
     * @memberof SiteScreenNotifyUserResponse
     */
    text: string;
    /**
     * Array of texts
     * @type {Array<InternalNotifyTypeAction>}
     * @memberof SiteScreenNotifyUserResponse
     */
    actions?: Array<InternalNotifyTypeAction>;
}


/**
 * @export
 */
export const SiteScreenNotifyUserResponseTypeEnum = {
    debug: 'debug',
    info: 'info',
    warning: 'warning',
    error: 'error'
} as const;
export type SiteScreenNotifyUserResponseTypeEnum = typeof SiteScreenNotifyUserResponseTypeEnum[keyof typeof SiteScreenNotifyUserResponseTypeEnum];


/**
 * Check if a given object implements the SiteScreenNotifyUserResponse interface.
 */
export function instanceOfSiteScreenNotifyUserResponse(value: object): value is SiteScreenNotifyUserResponse {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('text' in value) || value['text'] === undefined) return false;
    return true;
}

export function SiteScreenNotifyUserResponseFromJSON(json: any): SiteScreenNotifyUserResponse {
    return SiteScreenNotifyUserResponseFromJSONTyped(json, false);
}

export function SiteScreenNotifyUserResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SiteScreenNotifyUserResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'title': json['title'] == null ? undefined : json['title'],
        'text': json['text'],
        'actions': json['actions'] == null ? undefined : ((json['actions'] as Array<any>).map(InternalNotifyTypeActionFromJSON)),
    };
}

export function SiteScreenNotifyUserResponseToJSON(json: any): SiteScreenNotifyUserResponse {
    return SiteScreenNotifyUserResponseToJSONTyped(json, false);
}

export function SiteScreenNotifyUserResponseToJSONTyped(value?: SiteScreenNotifyUserResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'title': value['title'],
        'text': value['text'],
        'actions': value['actions'] == null ? undefined : ((value['actions'] as Array<any>).map(InternalNotifyTypeActionToJSON)),
    };
}

