/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { InternalNotifyTypeText } from './InternalNotifyTypeText';
import {
    InternalNotifyTypeTextFromJSON,
    InternalNotifyTypeTextFromJSONTyped,
    InternalNotifyTypeTextToJSON,
    InternalNotifyTypeTextToJSONTyped,
} from './InternalNotifyTypeText';

/**
 * 
 * @export
 * @interface NotifyHistorySiteResponse
 */
export interface NotifyHistorySiteResponse {
    /**
     * Id of page in mongodb
     * @type {string}
     * @memberof NotifyHistorySiteResponse
     */
    id: string;
    /**
     * Project id
     * @type {number}
     * @memberof NotifyHistorySiteResponse
     */
    project_id: number;
    /**
     * Date create
     * @type {Date}
     * @memberof NotifyHistorySiteResponse
     */
    date_create: Date;
    /**
     * Actions
     * @type {object}
     * @memberof NotifyHistorySiteResponse
     */
    actions: object;
    /**
     * Channel
     * @type {string}
     * @memberof NotifyHistorySiteResponse
     */
    channel: NotifyHistorySiteResponseChannelEnum;
    /**
     * Array of texts
     * @type {Array<InternalNotifyTypeText>}
     * @memberof NotifyHistorySiteResponse
     */
    text: Array<InternalNotifyTypeText>;
    /**
     * Status read
     * @type {boolean}
     * @memberof NotifyHistorySiteResponse
     */
    status_read: boolean;
    /**
     * Category of user notify
     * @type {string}
     * @memberof NotifyHistorySiteResponse
     */
    category: NotifyHistorySiteResponseCategoryEnum;
}


/**
 * @export
 */
export const NotifyHistorySiteResponseChannelEnum = {
    telegram: 'telegram',
    cabinet: 'cabinet',
    mobile: 'mobile'
} as const;
export type NotifyHistorySiteResponseChannelEnum = typeof NotifyHistorySiteResponseChannelEnum[keyof typeof NotifyHistorySiteResponseChannelEnum];

/**
 * @export
 */
export const NotifyHistorySiteResponseCategoryEnum = {
    important: 'important',
    stream: 'stream'
} as const;
export type NotifyHistorySiteResponseCategoryEnum = typeof NotifyHistorySiteResponseCategoryEnum[keyof typeof NotifyHistorySiteResponseCategoryEnum];


/**
 * Check if a given object implements the NotifyHistorySiteResponse interface.
 */
export function instanceOfNotifyHistorySiteResponse(value: object): value is NotifyHistorySiteResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('project_id' in value) || value['project_id'] === undefined) return false;
    if (!('date_create' in value) || value['date_create'] === undefined) return false;
    if (!('actions' in value) || value['actions'] === undefined) return false;
    if (!('channel' in value) || value['channel'] === undefined) return false;
    if (!('text' in value) || value['text'] === undefined) return false;
    if (!('status_read' in value) || value['status_read'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    return true;
}

export function NotifyHistorySiteResponseFromJSON(json: any): NotifyHistorySiteResponse {
    return NotifyHistorySiteResponseFromJSONTyped(json, false);
}

export function NotifyHistorySiteResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotifyHistorySiteResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'project_id': json['project_id'],
        'date_create': (new Date(json['date_create'])),
        'actions': json['actions'],
        'channel': json['channel'],
        'text': ((json['text'] as Array<any>).map(InternalNotifyTypeTextFromJSON)),
        'status_read': json['status_read'],
        'category': json['category'],
    };
}

export function NotifyHistorySiteResponseToJSON(json: any): NotifyHistorySiteResponse {
    return NotifyHistorySiteResponseToJSONTyped(json, false);
}

export function NotifyHistorySiteResponseToJSONTyped(value?: NotifyHistorySiteResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'project_id': value['project_id'],
        'date_create': ((value['date_create']).toISOString()),
        'actions': value['actions'],
        'channel': value['channel'],
        'text': ((value['text'] as Array<any>).map(InternalNotifyTypeTextToJSON)),
        'status_read': value['status_read'],
        'category': value['category'],
    };
}

