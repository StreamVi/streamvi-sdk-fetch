const fs = require('fs');
const path = require('path');
const glob = require('glob');

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ v
 */

const apiDir = path.join(__dirname, '../src/generated/api2');

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

try {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ—Ä—Å–∏–π...');
  console.log('=' .repeat(60));
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –¥–ª—è Windows
  const apiPath = path.resolve(apiDir, 'api');
  const pattern = path.join(apiPath, '*.ts').replace(/\\/g, '/');
  
  console.log(`üîç –ò—â–µ–º API —Ñ–∞–π–ª—ã –≤: ${apiPath}`);
  
  const apiFiles = glob.sync(pattern);
  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ API —Ñ–∞–π–ª–æ–≤: ${apiFiles.length}`);
  console.log('');

  let totalMethodsWithVersions = 0;
  let methodsWithAutoDefault = 0;
  let methodsWithoutAutoDefault = 0;
  const problemMethods = [];

  for (const filePath of apiFiles) {
    const content = fs.readFileSync(filePath, 'utf8');
    const fileName = path.basename(filePath);
    
    // –ò—â–µ–º –º–µ—Ç–æ–¥—ã —Å –≤–µ—Ä—Å–∏—è–º–∏ (–ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫)
    const versionMethods = content.match(/(\w+V\d+):\s*async/g);
    
    if (versionMethods && versionMethods.length > 0) {
      console.log(`üì¶ ${fileName}: –Ω–∞–π–¥–µ–Ω–æ ${versionMethods.length} –º–µ—Ç–æ–¥–æ–≤ —Å –≤–µ—Ä—Å–∏—è–º–∏`);
      
      for (const methodMatch of versionMethods) {
        const methodName = methodMatch.replace(':', '').replace(' async', '');
        totalMethodsWithVersions++;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ –º–µ—Ç–æ–¥–∞
        const versionMatch = methodName.match(/V(\d+)$/);
        const expectedVersion = versionMatch ? versionMatch[1] : null;
        
        if (!expectedVersion) continue;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä v –≤ –º–µ—Ç–æ–¥–µ
        const hasVersionParam = content.includes(`${methodName}: async`) && content.includes('v?:');
        
        if (hasVersionParam) {
          // –ò—â–µ–º –±–ª–æ–∫ –º–µ—Ç–æ–¥–∞
          const methodStart = content.indexOf(`${methodName}: async`);
          const methodEnd = content.indexOf('\n        },', methodStart);
          const methodBody = content.substring(methodStart, methodEnd);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –¥–ª—è query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          const hasQueryAutoDefault = methodBody.includes(`localVarQueryParameter['v'] = '${expectedVersion}'`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –¥–ª—è FormData
          const hasFormAutoDefault = methodBody.includes(`localVarFormParams.append('v', '${expectedVersion}'`);
          
          if (hasQueryAutoDefault || hasFormAutoDefault) {
            methodsWithAutoDefault++;
            console.log(`  ‚úÖ ${methodName}: –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ v="${expectedVersion}" ${hasQueryAutoDefault ? '(Query)' : '(FormData)'}`);
          } else {
            methodsWithoutAutoDefault++;
            problemMethods.push({
              file: fileName,
              method: methodName,
              expectedVersion,
              hasVersionParam: true,
              hasQueryLogic: methodBody.includes("localVarQueryParameter['v']"),
              hasFormLogic: methodBody.includes("localVarFormParams.append('v'")
            });
            console.log(`  ‚ùå ${methodName}: –ù–ï–¢ –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ (–æ–∂–∏–¥–∞–µ—Ç—Å—è v="${expectedVersion}")`);
          }
        }
      }
      console.log('');
    }
  }

  console.log('=' .repeat(60));
  console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤ —Å –≤–µ—Ä—Å–∏—è–º–∏: ${totalMethodsWithVersions}`);
  console.log(`   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–≤ —Å –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π: ${methodsWithAutoDefault}`);
  console.log(`   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–≤ –ë–ï–ó –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏: ${methodsWithoutAutoDefault}`);
  console.log(`   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: ${totalMethodsWithVersions > 0 ? Math.round((methodsWithAutoDefault / totalMethodsWithVersions) * 100) : 0}%`);
  console.log('');

  if (methodsWithoutAutoDefault === 0) {
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –ê–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Ä—Å–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–∞—Ö');
  } else {
    console.log('üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
    console.log('');
    console.log('üìã –ú–µ—Ç–æ–¥—ã –ë–ï–ó –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏:');
    
    for (const problem of problemMethods) {
      console.log(`   ‚ùå ${problem.file} -> ${problem.method}`);
      console.log(`      –û–∂–∏–¥–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è: ${problem.expectedVersion}`);
      console.log(`      –ï—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä v: ${problem.hasVersionParam}`);
      console.log(`      –ï—Å—Ç—å Query –ª–æ–≥–∏–∫–∞: ${problem.hasQueryLogic}`);
      console.log(`      –ï—Å—Ç—å FormData –ª–æ–≥–∏–∫–∞: ${problem.hasFormLogic}`);
      console.log('');
    }
    
    console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('   1. –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ù–ï –†–ê–ë–û–¢–ê–ï–¢ - —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç –Ω—É–∂–Ω—ã–µ –±–ª–æ–∫–∏');
    console.log('   2. –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏');
    console.log('   3. –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É');
  }

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  console.error(error.stack);
  process.exit(1);
} 