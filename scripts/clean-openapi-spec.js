const fs = require('fs');
const path = require('path');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * 1. –£–¥–∞–ª—è–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å—ã [1], [2] –∏ —Ç.–¥. –∏–∑ operationId, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª—è–µ—Ç NestJS/Swagger
 * 2. –î–æ–±–∞–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é V1 –∫ –º–µ—Ç–æ–¥–∞–º –±–µ–∑ –≤–µ—Ä—Å–∏–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, checkCountry -> checkCountryV1)
 * 3. –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏–∑ –∏–º–µ–Ω —Ç–∏–ø–æ–≤ –≤ —Å—Ö–µ–º–∞—Ö
 * 4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ v
 * 5. –û—á–∏—â–∞–µ—Ç –∏–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ Site –∏ Controller, –æ—Å—Ç–∞–≤–ª—è—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
 */

const specPath = path.join(__dirname, '../temp/backend_v2.json');

/**
 * –£–±–∏—Ä–∞–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å—ã [1], [2] –∏ —Ç.–¥. –∏–∑ operationId
 */
function removeSuffixes(operationId) {
  return operationId.replace(/\[\d+\]$/, '');
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é V1 –∫ –º–µ—Ç–æ–¥–∞–º –±–µ–∑ –≤–µ—Ä—Å–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≤–µ—Ä—Å–∏–∏
 */
function addDefaultVersion(operationId) {
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –µ—Å—Ç—å _v{—á–∏—Å–ª–æ}V{—á–∏—Å–ª–æ}, —É–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ V{—á–∏—Å–ª–æ}
  // –ù–∞–ø—Ä–∏–º–µ—Ä: getSetting_v3V1 -> getSetting_v3
  const duplicateVersionMatch = operationId.match(/^(.+_v\d+)V\d+$/);
  if (duplicateVersionMatch) {
    return duplicateVersionMatch[1];
  }
  
  // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤–µ—Ä—Å–∏—è (V1, V2, V3 –∏ —Ç.–¥.), –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
  if (/V\d+$/.test(operationId)) {
    return operationId;
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–µ—Ä—Å–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ _v{—á–∏—Å–ª–æ}, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
  if (/_v\d+$/.test(operationId)) {
    return operationId;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º V1 –≤ –∫–æ–Ω–µ—Ü
  return operationId + 'V1';
}

/**
 * –û—á–∏—â–∞–µ—Ç –∏–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ Site –∏ Controller
 * –ù–∞–ø—Ä–∏–º–µ—Ä: SiteUserController_getProfileV1 -> User_getProfileV1
 * MethodController_searchV1 -> Method_searchV1
 * AuthController_loginV1 -> Auth_loginV1
 */
function cleanOperationId(operationId) {
  // –ü–∞—Ç—Ç–µ—Ä–Ω: [Site]?{ControllerName}Controller_{methodName}
  const controllerMatch = operationId.match(/^(?:Site)?(.+?)Controller_(.+)$/);
  if (controllerMatch) {
    const controllerName = controllerMatch[1];
    const methodName = controllerMatch[2];
    return `${controllerName}_${methodName}`;
  }
  
  // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  return operationId;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ operationId
 */
function extractVersionFromOperationId(operationId) {
  // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω V{—á–∏—Å–ª–æ} –≤ –∫–æ–Ω—Ü–µ
  const versionMatch = operationId.match(/V(\d+)$/);
  if (versionMatch) {
    return versionMatch[1];
  }
  
  // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω _v{—á–∏—Å–ª–æ} –≤ –∫–æ–Ω—Ü–µ
  const underscoreVersionMatch = operationId.match(/_v(\d+)$/);
  if (underscoreVersionMatch) {
    return underscoreVersionMatch[1];
  }
  
  return null;
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ v –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
 * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
 */
function setVersionDefault(operation, version) {
  if (!operation.parameters || !version) {
    return false;
  }
  
  // –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä v
  const versionParam = operation.parameters.find(param => 
    param.name === 'v' && param.in === 'query'
  );
  
  if (versionParam && versionParam.schema) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    versionParam.schema.default = version;
    
    // –í–ê–ñ–ù–û: –î–µ–ª–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä—Å–∏—é
    // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
    versionParam.required = false;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (versionParam.schema.example) {
      versionParam.schema.example = version;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    versionParam.description = `Version (automatically defaults to ${version} based on method version, can be overridden)`;
    
    return true;
  }
  
  return false;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ö–µ–º–∞ —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö (–∞ –Ω–µ —Å—Ö–µ–º–æ–π –º–µ—Ç–æ–¥–∞)
 */
function isDataType(typeName) {
  // –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ö–µ–º—ã –º–µ—Ç–æ–¥–æ–≤ - –æ–Ω–∏ –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç HTTP –º–µ—Ç–æ–¥—ã –∏–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const methodPatterns = [
    /Controller.*V\d+$/,  // –°—Ö–µ–º—ã –º–µ—Ç–æ–¥–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, UserControllerGetUserV1)
    /^(get|post|put|delete|patch)/i,  // –ù–∞—á–∏–Ω–∞—é—Ç—Å—è —Å HTTP –º–µ—Ç–æ–¥–æ–≤
    /Response$/,  // –ó–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ Response
    /Request$/,   // –ó–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ Request
    /Params$/,    // –ó–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ Params
    /Query$/,     // –ó–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ Query
    /Body$/       // –ó–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ Body
  ];
  
  // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –º–µ—Ç–æ–¥–æ–≤, —ç—Ç–æ –Ω–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
  return !methodPatterns.some(pattern => pattern.test(typeName));
}

/**
 * –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏–∑ –∏–º–µ–Ω —Ç–∏–ø–æ–≤
 * –ù–∞–ø—Ä–∏–º–µ—Ä: SiteUserProjectControllerGetProjectInfoV1LanguageEnum -> GetProjectInfoV1LanguageEnum
 */
function cleanTypeName(typeName) {
  // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: –ª—é–±—ã–µ —Å–ª–æ–≤–∞ + Controller + –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å
  // –£–¥–∞–ª—è–µ–º –≤—Å—ë –¥–æ –∏ –≤–∫–ª—é—á–∞—è "Controller"
  const controllerMatch = typeName.match(/^.*Controller(.+)$/);
  if (controllerMatch) {
    return controllerMatch[1];
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç "Controller", –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º "Site" –≤ –Ω–∞—á–∞–ª–µ
  if (typeName.startsWith('Site')) {
    return typeName.replace(/^Site/, '');
  }
  
  return typeName;
}



/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∏–ø—ã –≤ –æ–±—ä–µ–∫—Ç–µ
 */
function updateTypeReferences(obj) {
  if (typeof obj !== 'object' || obj === null) {
    return;
  }
  
  if (Array.isArray(obj)) {
    obj.forEach(item => updateTypeReferences(item));
    return;
  }
  
  for (const [key, value] of Object.entries(obj)) {
    if (key === '$ref' && typeof value === 'string') {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ö–µ–º
      const refMatch = value.match(/^#\/components\/schemas\/(.+)$/);
      if (refMatch) {
        const originalTypeName = refMatch[1];
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–æ–ª—å–∫–æ –∫ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
        if (isDataType(originalTypeName)) {
          const cleanedTypeName = cleanTypeName(originalTypeName);
          if (cleanedTypeName !== originalTypeName) {
            obj[key] = `#/components/schemas/${cleanedTypeName}`;
          }
        }
      }
    } else if (typeof value === 'object') {
      updateTypeReferences(value);
    }
  }
}

try {
  console.log('üîß –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
  
  // –ß–∏—Ç–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
  const spec = JSON.parse(fs.readFileSync(specPath, 'utf8'));
  
  let operationsProcessed = 0;
  let suffixesRemoved = 0;
  let versionsAdded = 0;
  let typesRenamed = 0;
  let versionDefaultsSet = 0;
  let operationIdsCleaned = 0;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  for (const path in spec.paths) {
    for (const method in spec.paths[path]) {
      const operation = spec.paths[path][method];
      
      if (operation.operationId) {
        const originalId = operation.operationId;
        let processedId = originalId;
        
        // 1. –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã [1], [2] –∏ —Ç.–¥.
        const withoutSuffix = removeSuffixes(processedId);
        if (withoutSuffix !== processedId) {
          suffixesRemoved++;
          processedId = withoutSuffix;
        }
        
        // 2. –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é V1 –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        const withVersion = addDefaultVersion(processedId);
        if (withVersion !== processedId) {
          versionsAdded++;
          processedId = withVersion;
        }
        
        // 3. –û—á–∏—â–∞–µ–º –∏–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ Site –∏ Controller
        const cleanedId = cleanOperationId(processedId);
        if (cleanedId !== processedId) {
          operationIdsCleaned++;
          processedId = cleanedId;
        }
        
        operation.operationId = processedId;
        
        // 4. –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ v
        const version = extractVersionFromOperationId(processedId);
        if (version && setVersionDefault(operation, version)) {
          versionDefaultsSet++;
          console.log(`üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é v="${version}" –¥–ª—è ${processedId}`);
        }
        
        operationsProcessed++;
        
        if (originalId !== processedId) {
          console.log(`üîÑ ${originalId} -> ${processedId}`);
        }
      }
    }
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ö–µ–º—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –º–µ—Ç–æ–¥—ã)
  if (spec.components && spec.components.schemas) {
    const schemas = spec.components.schemas;
    
    const newSchemas = {};
    
    for (const [typeName, schema] of Object.entries(schemas)) {
      let finalTypeName = typeName;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–æ–ª—å–∫–æ –∫ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –∫ —Å—Ö–µ–º–∞–º –º–µ—Ç–æ–¥–æ–≤
      if (isDataType(typeName)) {
        const cleanedTypeName = cleanTypeName(typeName);
        
        if (cleanedTypeName !== typeName) {
          typesRenamed++;
          console.log(`üè∑Ô∏è  ${typeName} -> ${cleanedTypeName}`);
          finalTypeName = cleanedTypeName;
        }
      }
      
      newSchemas[finalTypeName] = schema;
    }
    
    spec.components.schemas = newSchemas;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –≤–æ –≤—Å–µ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    updateTypeReferences(spec);
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
  fs.writeFileSync(specPath, JSON.stringify(spec, null, 2));
  
  console.log('‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   ‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${operationsProcessed}`);
  console.log(`   ‚Ä¢ –°—É—Ñ—Ñ–∏–∫—Å–æ–≤ —É–±—Ä–∞–Ω–æ: ${suffixesRemoved}`);
  console.log(`   ‚Ä¢ –í–µ—Ä—Å–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${versionsAdded}`);
  console.log(`   ‚Ä¢ –ò–º–µ–Ω –æ–ø–µ—Ä–∞—Ü–∏–π –æ—á–∏—â–µ–Ω–æ: ${operationIdsCleaned}`);
  console.log(`   ‚Ä¢ –¢–∏–ø–æ–≤ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: ${typesRenamed}`);
  console.log(`   ‚Ä¢ –í–µ—Ä—Å–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${versionDefaultsSet}`);
  console.log(`üí° –¢–µ–ø–µ—Ä—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–º–µ—é—Ç —á–∏—Å—Ç—ã–µ –∏–º–µ–Ω–∞ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ Site –∏ Controller`);
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message);
  console.error(error.stack);
  process.exit(1);
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
module.exports = {
  removeSuffixes,
  addDefaultVersion,
  cleanOperationId,
  extractVersionFromOperationId,
  setVersionDefault,
  isDataType,
  cleanTypeName,
  updateTypeReferences,
  processSpec: function(inputFile) {
    const spec = JSON.parse(fs.readFileSync(inputFile, 'utf8'));
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    for (const path in spec.paths) {
      for (const method in spec.paths[path]) {
        const operation = spec.paths[path][method];
        
        if (operation.operationId) {
          let processedId = operation.operationId;
          processedId = removeSuffixes(processedId);
          processedId = addDefaultVersion(processedId);
          processedId = cleanOperationId(processedId);
          operation.operationId = processedId;
          
          const version = extractVersionFromOperationId(processedId);
          if (version) {
            setVersionDefault(operation, version);
          }
        }
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ö–µ–º—ã - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ [1], [2]
    if (spec.components && spec.components.schemas) {
      const schemas = spec.components.schemas;
      
      const newSchemas = {};
      
      for (const [typeName, schema] of Object.entries(schemas)) {
        let finalTypeName = typeName;
        
        // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã [1], [2] –∏ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ —á–∏—Å–ª–∞
        if (typeName.includes('[') && typeName.includes(']')) {
          const match = typeName.match(/^(.+)\[(\d+)\]$/);
          if (match) {
            finalTypeName = match[1] + match[2];
          }
        }
        
        // –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –∏–º–µ–Ω —Ç–∏–ø–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö)
        if (isDataType(finalTypeName)) {
          const cleanedTypeName = cleanTypeName(finalTypeName);
          if (cleanedTypeName !== finalTypeName) {
            finalTypeName = cleanedTypeName;
          }
        }
        
        newSchemas[finalTypeName] = schema;
      }
      
      spec.components.schemas = newSchemas;
      updateTypeReferences(spec);
    }
    
    return spec;
  }
}; 