const fs = require('fs');
const path = require('path');
const glob = require('glob');

/**
 * –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö API —Ñ–∞–π–ª–æ–≤
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ—Ä—Å–∏–π –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ v
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Markdown –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 */

const apiDir = path.join(__dirname, '../src/generated/api2');

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ –º–µ—Ç–æ–¥–∞
 */
function extractVersionFromMethodName(methodName) {
  // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω V{—á–∏—Å–ª–æ} –≤ –∫–æ–Ω—Ü–µ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ)
  const versionMatch = methodName.match(/.*V(\d+)(?:Raw)?$/);
  if (versionMatch) {
    return versionMatch[1];
  }
  
  // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω _v{—á–∏—Å–ª–æ} –≤ –∫–æ–Ω—Ü–µ
  const underscoreVersionMatch = methodName.match(/_v(\d+)$/);
  if (underscoreVersionMatch) {
    return underscoreVersionMatch[1];
  }
  
  return null;
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Markdown —Ñ–∞–π–ª–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 */
function processMarkdownFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  let updatedContent = content;
  let totalChanges = 0;

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Ç–∏–ø–∞—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  // –ó–∞–º–µ–Ω—è–µ–º &#39; –Ω–∞ '
  const htmlEntityPattern = /&#39;/g;
  const htmlEntityMatches = updatedContent.match(htmlEntityPattern);
  if (htmlEntityMatches) {
    updatedContent = updatedContent.replace(htmlEntityPattern, "'");
    totalChanges += htmlEntityMatches.length;
    console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ HTML-—Å—É—â–Ω–æ—Å—Ç–µ–π &#39;: ${htmlEntityMatches.length}`);
  }

  // –ó–∞–º–µ–Ω—è–µ–º &#124; –Ω–∞ |
  const pipeEntityPattern = /&#124;/g;
  const pipeEntityMatches = updatedContent.match(pipeEntityPattern);
  if (pipeEntityMatches) {
    updatedContent = updatedContent.replace(pipeEntityPattern, '|');
    totalChanges += pipeEntityMatches.length;
    console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ HTML-—Å—É—â–Ω–æ—Å—Ç–µ–π &#124;: ${pipeEntityMatches.length}`);
  }

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  // –ü–∞—Ç—Ç–µ—Ä–Ω: [**'type'**]**Array<'type'>** -> **'type'**
  const duplicateTypePattern = /\[\*\*([^*]+)\*\*\]\*\*Array<[^>]+>\*\*/g;
  updatedContent = updatedContent.replace(duplicateTypePattern, (match, type) => {
    totalChanges++;
    console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞: ${match} -> **${type}**`);
    return `**${type}**`;
  });

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏
  // –ü–∞—Ç—Ç–µ—Ä–Ω: [**string**] -> **string**
  const bracketTypePattern = /\[\*\*([^*]+)\*\*\]/g;
  updatedContent = updatedContent.replace(bracketTypePattern, (match, type) => {
    totalChanges++;
    console.log(`  üîß –£–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ —Å–∫–æ–±–∫–∏: ${match} -> **${type}**`);
    return `**${type}**`;
  });

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ | –≤ —Ç–∏–ø–∞—Ö union
  // –ó–∞–º–µ–Ω—è–µ–º \| –Ω–∞ |, –Ω–æ —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Ç–∏–ø–æ–≤
  const unionTypePattern = /\*\*'[^']+'\s*\\\|\s*'[^']+'/g;
  updatedContent = updatedContent.replace(unionTypePattern, (match) => {
    const fixed = match.replace(/\\\|/g, ' \\| ');
    if (fixed !== match) {
      totalChanges++;
      console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ union —Ç–∏–ø–µ: ${match} -> ${fixed}`);
    }
    return fixed;
  });

  if (totalChanges > 0) {
    fs.writeFileSync(filePath, updatedContent);
  }
  
  return { totalChanges };
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω API —Ñ–∞–π–ª –¥–ª—è fetch-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
 */
function processFetchApiFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  let updatedContent = content;
  let totalChanges = 0;

  // –î–ª—è fetch-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ queryParameters
  // –ò—â–µ–º: if (requestParameters['v'] != null) { queryParameters['v'] = requestParameters['v']; }
  // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞: if (requestParameters['v'] != null) { queryParameters['v'] = requestParameters['v']; } else { queryParameters['v'] = 'X'; }
  
  const fetchQueryPattern = /(async\s+(\w*V\d+)Raw[\s\S]*?)if\s*\(\s*requestParameters\['v'\]\s*!=\s*null\s*\)\s*\{\s*queryParameters\['v'\]\s*=\s*requestParameters\['v'\];\s*\}(?!\s*else)/g;
  
  updatedContent = updatedContent.replace(fetchQueryPattern, (match, methodBlock, methodName) => {
    const version = extractVersionFromMethodName(methodName);
    if (version) {
      totalChanges++;
      console.log(`  üéØ Fetch Query: –¥–æ–±–∞–≤–ª—è—é –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É v="${version}" –¥–ª—è ${methodName}`);
      return match.replace(
        /if\s*\(\s*requestParameters\['v'\]\s*!=\s*null\s*\)\s*\{\s*queryParameters\['v'\]\s*=\s*requestParameters\['v'\];\s*\}/,
        `if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        } else {
            queryParameters['v'] = '${version}';
        }`
      );
    }
    return match;
  });

  // –î–ª—è fetch-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ FormData
  // –ò—â–µ–º: if (requestParameters['v'] != null) { formParams.append('v', requestParameters['v'] as any); }
  // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞: if (requestParameters['v'] != null) { formParams.append('v', requestParameters['v'] as any); } else { formParams.append('v', 'X' as any); }
  
  const fetchFormDataPattern = /(async\s+(\w*V\d+)Raw[\s\S]*?)if\s*\(\s*requestParameters\['v'\]\s*!=\s*null\s*\)\s*\{\s*formParams\.append\('v',\s*requestParameters\['v'\]\s*as\s*any\);\s*\}(?!\s*else)/g;
  
  updatedContent = updatedContent.replace(fetchFormDataPattern, (match, methodBlock, methodName) => {
    const version = extractVersionFromMethodName(methodName);
    if (version) {
      totalChanges++;
      console.log(`  üéØ Fetch FormData: –¥–æ–±–∞–≤–ª—è—é –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É v="${version}" –¥–ª—è ${methodName}`);
      return match.replace(
        /if\s*\(\s*requestParameters\['v'\]\s*!=\s*null\s*\)\s*\{\s*formParams\.append\('v',\s*requestParameters\['v'\]\s*as\s*any\);\s*\}/,
        `if (requestParameters['v'] != null) {
            formParams.append('v', requestParameters['v'] as any);
        } else {
            formParams.append('v', '${version}' as any);
        }`
      );
    }
    return match;
  });

  if (totalChanges > 0) {
    fs.writeFileSync(filePath, updatedContent);
  }
  
  return { totalChanges };
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω API —Ñ–∞–π–ª –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
 */
function processLegacyApiFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  let updatedContent = content;
  let totalChanges = 0;

  // 1. –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –¥–ª—è Query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  // –ò—â–µ–º: if (v !== undefined) { localVarQueryParameter['v'] = v; }
  // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞: if (v !== undefined) { localVarQueryParameter['v'] = v; } else { localVarQueryParameter['v'] = 'X'; }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ - –∏—â–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã —Å –≤–µ—Ä—Å–∏—è–º–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
  const lines = content.split('\n');
  let currentMethodName = null;
  let currentMethodVersion = null;
  let inIfStatement = false;
  let ifStatementType = null; // 'query' –∏–ª–∏ 'formdata'
  let ifStartIndex = -1;
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    
    // –ò—â–µ–º –Ω–∞—á–∞–ª–æ –º–µ—Ç–æ–¥–∞ —Å –≤–µ—Ä—Å–∏–µ–π
    const methodMatch = line.match(/(\w*V\d+):\s*async/);
    if (methodMatch) {
      currentMethodName = methodMatch[1];
      currentMethodVersion = extractVersionFromMethodName(currentMethodName);
    }
    
    // –ï—Å–ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ —Å –≤–µ—Ä—Å–∏–µ–π, –∏—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
    if (currentMethodName && currentMethodVersion) {
      // –ò—â–µ–º –Ω–∞—á–∞–ª–æ if statement –¥–ª—è v –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
      if ((line.includes('if (v !== undefined)') || line.includes('if (v != undefined)')) && !inIfStatement) {
        inIfStatement = true;
        ifStartIndex = i;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø if statement
        if (i + 1 < lines.length && lines[i + 1].includes("localVarQueryParameter['v'] = v;")) {
          ifStatementType = 'query';
        } else if (i + 1 < lines.length && lines[i + 1].includes("localVarFormParams.append('v', v as any);")) {
          ifStatementType = 'formdata';
        }
      }
      
      // –ò—â–µ–º –∫–æ–Ω–µ—Ü if statement
      if (inIfStatement && line.trim() === '}' && !line.includes('} else {')) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç else
        if (i + 1 >= lines.length || !lines[i + 1].includes('} else {')) {
          const indentation = lines[ifStartIndex].match(/^(\s*)/)[1];
          
          if (ifStatementType === 'query') {
            lines[i] = `${indentation}} else {
${indentation}    localVarQueryParameter['v'] = '${currentMethodVersion}';
${indentation}}`;
            totalChanges++;
            console.log(`  üéØ Legacy Query: –¥–æ–±–∞–≤–ª—è—é –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É v="${currentMethodVersion}" –¥–ª—è ${currentMethodName}`);
          } else if (ifStatementType === 'formdata') {
            lines[i] = `${indentation}} else {
${indentation}    localVarFormParams.append('v', '${currentMethodVersion}' as any);
${indentation}}`;
            totalChanges++;
            console.log(`  üéØ Legacy FormData: –¥–æ–±–∞–≤–ª—è—é –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É v="${currentMethodVersion}" –¥–ª—è ${currentMethodName}`);
          }
        }
        
        inIfStatement = false;
        ifStatementType = null;
        ifStartIndex = -1;
      }
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ –∫–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º –∫–æ–Ω–µ—Ü –º–µ—Ç–æ–¥–∞
    if (line.includes('},') && currentMethodName) {
      currentMethodName = null;
      currentMethodVersion = null;
      inIfStatement = false;
      ifStatementType = null;
      ifStartIndex = -1;
    }
  }
  
  if (totalChanges > 0) {
    updatedContent = lines.join('\n');
    fs.writeFileSync(filePath, updatedContent);
  }
  
  return { totalChanges };
}

function main() {
  try {
    console.log('üîß –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ API —Ñ–∞–π–ª–æ–≤...');
    console.log('üéØ –¶–µ–ª—å: –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ—Ä—Å–∏–π –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ v –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
    console.log('=' .repeat(80));
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ –¥–ª—è Windows
    const fetchApiPath = path.resolve(apiDir, 'src', 'apis');
    const axiosApiPath = path.resolve(apiDir, 'api');
    const docsPath = path.resolve(apiDir, 'docs');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ TypeScript —Ñ–∞–π–ª—ã API (fetch)
    const fetchApiPattern = path.join(fetchApiPath, '*.ts').replace(/\\/g, '/');
    console.log(`üîç –ò—â–µ–º –Ω–æ–≤—ã–µ Fetch API —Ñ–∞–π–ª—ã –≤: ${fetchApiPath}`);
    
    const fetchApiFiles = glob.sync(fetchApiPattern);
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö Fetch API —Ñ–∞–π–ª–æ–≤: ${fetchApiFiles.length}`);
    console.log('');
    
    let totalFetchChanges = 0;
    let processedFetchFiles = 0;
    
    for (const filePath of fetchApiFiles) {
      const fileName = path.basename(filePath);
      console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Fetch API: ${fileName}`);
      
      const result = processFetchApiFile(filePath);
      if (result.totalChanges > 0) {
        processedFetchFiles++;
        totalFetchChanges += result.totalChanges;
        console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫: ${result.totalChanges}`);
      } else {
        console.log(`  ‚è≠Ô∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ TypeScript —Ñ–∞–π–ª—ã API (legacy —Ñ–æ—Ä–º–∞—Ç) - –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const legacyApiPattern = path.join(axiosApiPath, '*.ts').replace(/\\/g, '/');
    console.log('');
    console.log(`üîç –ò—â–µ–º —Å—Ç–∞—Ä—ã–µ Legacy API —Ñ–∞–π–ª—ã –≤: ${axiosApiPath}`);
    
    const legacyApiFiles = glob.sync(legacyApiPattern);
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö Legacy API —Ñ–∞–π–ª–æ–≤: ${legacyApiFiles.length}`);
    console.log('');
    
    let totalLegacyChanges = 0;
    let processedLegacyFiles = 0;
    
    for (const filePath of legacyApiFiles) {
      const fileName = path.basename(filePath);
      console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Legacy API: ${fileName}`);
      
      const result = processLegacyApiFile(filePath);
      if (result.totalChanges > 0) {
        processedLegacyFiles++;
        totalLegacyChanges += result.totalChanges;
        console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫: ${result.totalChanges}`);
      } else {
        console.log(`  ‚è≠Ô∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Markdown —Ñ–∞–π–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const docsPattern = path.join(docsPath, '*.md').replace(/\\/g, '/');
    console.log('');
    console.log(`üîç –ò—â–µ–º —Ñ–∞–π–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤: ${docsPath}`);
    
    const docsFiles = glob.sync(docsPattern);
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${docsFiles.length}`);
    console.log('');
    
    let totalDocsChanges = 0;
    let processedDocsFiles = 0;
    
    for (const filePath of docsFiles) {
      const fileName = path.basename(filePath);
      console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: ${fileName}`);
      
      const result = processMarkdownFile(filePath);
      if (result.totalChanges > 0) {
        processedDocsFiles++;
        totalDocsChanges += result.totalChanges;
        console.log(`  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${result.totalChanges}`);
      } else {
        console.log(`  ‚è≠Ô∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
      }
    }
    
    console.log('');
    console.log('=' .repeat(80));
    console.log('‚úÖ –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`   Fetch API —Ñ–∞–π–ª—ã (–Ω–æ–≤—ã–µ):`);
    console.log(`   ‚Ä¢ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${fetchApiFiles.length}`);
    console.log(`   ‚Ä¢ –§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: ${processedFetchFiles}`);
    console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${totalFetchChanges}`);
    console.log(`   Legacy API —Ñ–∞–π–ª—ã (—Å—Ç–∞—Ä—ã–µ):`);
    console.log(`   ‚Ä¢ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${legacyApiFiles.length}`);
    console.log(`   ‚Ä¢ –§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: ${processedLegacyFiles}`);
    console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${totalLegacyChanges}`);
    console.log(`   –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:`);
    console.log(`   ‚Ä¢ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${docsFiles.length}`);
    console.log(`   ‚Ä¢ –§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: ${processedDocsFiles}`);
    console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${totalDocsChanges}`);
    
    const totalApiChanges = totalFetchChanges + totalLegacyChanges;
    
    if (totalApiChanges > 0) {
      console.log('');
      console.log('üí° –¢–µ–ø–µ—Ä—å –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç –≤–µ—Ä—Å–∏—é:');
      console.log('   ‚Ä¢ userGetProfileV1({ language: "ru" }) - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç v="1"');
      console.log('   ‚Ä¢ paySettingGetSettingV3({ language: "ru" }) - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç v="3"');
      console.log('   ‚Ä¢ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å: userGetProfileV1({ v: "2", language: "ru" }) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç v="2"');
    }

    if (totalDocsChanges > 0) {
      console.log('');
      console.log('üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:');
      console.log('   ‚Ä¢ –£–±—Ä–∞–Ω—ã HTML-—Å—É—â–Ω–æ—Å—Ç–∏ (&#39; -> \', &#124; -> |)');
      console.log('   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
      console.log('   ‚Ä¢ –£–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –≤ —Ç–∏–ø–∞—Ö');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–µ:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
module.exports = {
  extractVersionFromMethodName,
  processApiFile: processLegacyApiFile, // –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏
  processFetchApiFile,
  processLegacyApiFile,
  processAxiosApiFile: processLegacyApiFile, // –∞–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  processMarkdownFile
}; 